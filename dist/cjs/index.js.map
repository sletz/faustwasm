{
  "version": 3,
  "sources": ["../../src/instantiateFaustModuleFromFile.ts", "../../src/FaustAudioWorkletProcessor.ts", "../../src/FaustFFTAudioWorkletProcessor.ts", "../../node_modules/tslib/tslib.es6.mjs", "../../node_modules/@aws-crypto/sha256-js/src/constants.ts", "../../node_modules/@aws-crypto/sha256-js/src/RawSha256.ts", "../../node_modules/@smithy/util-utf8/dist-es/fromUtf8.browser.js", "../../node_modules/@aws-crypto/util/src/convertToBuffer.ts", "../../node_modules/@aws-crypto/util/src/isEmptyData.ts", "../../node_modules/@aws-crypto/sha256-js/src/jsSha256.ts", "../../src/FaustCompiler.ts", "../../src/FaustDspInstance.ts", "../../src/FaustWasmInstantiator.ts", "../../src/FaustSensors.ts", "../../src/FaustWebAudioDsp.ts", "../../src/FaustOfflineProcessor.ts", "../../src/FaustSvgDiagrams.ts", "../../src/FaustCmajor.ts", "../../src/LibFaust.ts", "../../src/WavEncoder.ts", "../../src/WavDecoder.ts", "../../src/SoundfileReader.ts", "../../src/FaustAudioWorkletCommunicator.ts", "../../src/FaustAudioWorkletNode.ts", "../../src/FaustScriptProcessorNode.ts", "../../src/FaustDspGenerator.ts"],
  "sourcesContent": ["import type { FaustModuleFactory } from \"./types\";\n\n/**\n * Load libfaust-wasm files, than instantiate libFaust\n * @param jsFile path to `libfaust-wasm.js`\n * @param dataFile path to `libfaust-wasm.data`\n * @param wasmFile path to `libfaust-wasm.wasm`\n */\nconst instantiateFaustModuleFromFile = async (jsFile: string, dataFile = jsFile.replace(/c?js$/, \"data\"), wasmFile = jsFile.replace(/c?js$/, \"wasm\")) => {\n    let FaustModule: FaustModuleFactory;\n    let dataBinary: ArrayBuffer;\n    let wasmBinary: Uint8Array | ArrayBuffer;\n    const jsCodeHead = /var (.+) = \\(/;\n    if (typeof window === \"object\") {\n        let jsCode = await (await fetch(jsFile)).text();\n        jsCode = `${jsCode}\nexport default ${jsCode.match(jsCodeHead)?.[1]};\n`;\n        const jsFileMod = URL.createObjectURL(new Blob([jsCode], { type: \"text/javascript\" }));\n        FaustModule = (await import(/* webpackIgnore: true */jsFileMod)).default;\n        dataBinary = await (await fetch(dataFile)).arrayBuffer();\n        wasmBinary = new Uint8Array(await (await fetch(wasmFile)).arrayBuffer());\n    } else {\n        const { promises: fs } = await import(\"fs\");\n        const { pathToFileURL } = await import(\"url\");\n        let jsCode = (await fs.readFile(jsFile, { encoding: \"utf-8\" }));\n        jsCode = `\nimport process from \"process\";\nimport * as path from \"path\";\nimport { createRequire } from \"module\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst __filename = fileURLToPath(import.meta.url);\nconst require = createRequire(import.meta.url);\n\n${jsCode}\n\nexport default ${jsCode.match(jsCodeHead)?.[1]};\n`;\n        const jsFileMod = jsFile.replace(/c?js$/, \"mjs\");\n        await fs.writeFile(jsFileMod, jsCode);\n        FaustModule = (await import(/* webpackIgnore: true */pathToFileURL(jsFileMod).href)).default;\n        await fs.unlink(jsFileMod);\n        dataBinary = (await fs.readFile(dataFile)).buffer;\n        wasmBinary = (await fs.readFile(wasmFile)).buffer;\n    }\n    const faustModule = await FaustModule({\n        wasmBinary,\n        getPreloadedPackage: (remotePackageName: string, remotePackageSize: number) => {\n            if (remotePackageName === \"libfaust-wasm.data\") return dataBinary;\n            return new ArrayBuffer(0);\n        }});\n    return faustModule;\n};\n\nexport default instantiateFaustModuleFromFile;\n", "import type { FaustAudioWorkletProcessorCommunicator } from \"./FaustAudioWorkletCommunicator\";\nimport type FaustWasmInstantiator from \"./FaustWasmInstantiator\";\nimport type { FaustBaseWebAudioDsp, FaustWebAudioDspVoice, FaustMonoWebAudioDsp, FaustPolyWebAudioDsp } from \"./FaustWebAudioDsp\";\nimport type { AudioParamDescriptor, AudioWorkletGlobalScope, LooseFaustDspFactory, FaustDspMeta, FaustUIItem } from \"./types\";\nimport type { AudioWorkletGlobalScope as WamAudioWorkletGlobalScope, WamParamMgrSDKBaseModuleScope } from \"@webaudiomodules/sdk-parammgr\";\n\n/**\n * Injected in the string to be compiled on AudioWorkletProcessor side\n */\nexport interface FaustData {\n    processorName: string;\n    dspName: string;\n    dspMeta: FaustDspMeta;\n    poly: boolean;\n    effectMeta?: FaustDspMeta;\n};\nexport interface FaustAudioWorkletProcessorDependencies<Poly extends boolean = false> {\n    FaustBaseWebAudioDsp: typeof FaustBaseWebAudioDsp;\n    FaustMonoWebAudioDsp: Poly extends true ? undefined : typeof FaustMonoWebAudioDsp;\n    FaustPolyWebAudioDsp: Poly extends true ? typeof FaustPolyWebAudioDsp : undefined;\n    FaustWebAudioDspVoice: Poly extends true ? typeof FaustWebAudioDspVoice : undefined;\n    FaustWasmInstantiator: typeof FaustWasmInstantiator;\n    FaustAudioWorkletProcessorCommunicator: typeof FaustAudioWorkletProcessorCommunicator;\n}\nexport interface FaustAudioWorkletNodeOptions<Poly extends boolean = false> extends AudioWorkletNodeOptions {\n    processorOptions: Poly extends true ? FaustPolyAudioWorkletProcessorOptions : FaustMonoAudioWorkletProcessorOptions;\n}\nexport interface FaustMonoAudioWorkletNodeOptions extends AudioWorkletNodeOptions {\n    processorOptions: FaustMonoAudioWorkletProcessorOptions;\n}\nexport interface FaustPolyAudioWorkletNodeOptions extends AudioWorkletNodeOptions {\n    processorOptions: FaustPolyAudioWorkletProcessorOptions;\n}\nexport interface FaustAudioWorkletProcessorOptions {\n    name: string;\n    sampleSize: number;\n    // for WAMs\n    moduleId?: string;\n    instanceId?: string;\n}\nexport interface FaustMonoAudioWorkletProcessorOptions extends FaustAudioWorkletProcessorOptions {\n    factory: LooseFaustDspFactory;\n}\nexport interface FaustPolyAudioWorkletProcessorOptions extends FaustAudioWorkletProcessorOptions {\n    voiceFactory: LooseFaustDspFactory;\n    mixerModule: WebAssembly.Module;\n    voices: number;\n    effectFactory?: LooseFaustDspFactory;\n}\n\n// Dynamic AudioWorkletProcessor code generator\nconst getFaustAudioWorkletProcessor = <Poly extends boolean = false>(dependencies: FaustAudioWorkletProcessorDependencies<Poly>, faustData: FaustData, register = true): typeof AudioWorkletProcessor => {\n    const { registerProcessor, AudioWorkletProcessor, sampleRate } = globalThis as unknown as AudioWorkletGlobalScope;\n\n    const {\n        FaustBaseWebAudioDsp,\n        FaustWasmInstantiator,\n        FaustAudioWorkletProcessorCommunicator\n    } = dependencies;\n\n    const {\n        processorName,\n        dspName,\n        dspMeta,\n        effectMeta,\n        poly\n    } = faustData;\n\n    // Analyse voice JSON to generate AudioParam parameters\n    const analysePolyParameters = (item: FaustUIItem): AudioParamDescriptor | null => {\n        const polyKeywords = [\"/gate\", \"/freq\", \"/gain\", \"/key\", \"/vel\", \"/velocity\"];\n        const isPolyReserved = \"address\" in item && !!polyKeywords.find(k => item.address.endsWith(k));\n        if (poly && isPolyReserved) return null;\n        if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"nentry\") {\n            return { name: item.address, defaultValue: item.init || 0, minValue: item.min || 0, maxValue: item.max || 0 };\n        } else if (item.type === \"button\" || item.type === \"checkbox\") {\n            return { name: item.address, defaultValue: item.init || 0, minValue: 0, maxValue: 1 };\n        }\n        return null;\n    }\n\n    /**\n     * Base class for Monophonic and Polyphonic AudioWorkletProcessor\n     */\n    abstract class FaustAudioWorkletProcessor<Poly extends boolean = false> extends AudioWorkletProcessor {\n\n        // Use ! syntax when the field is not defined in the constructor\n        protected fDSPCode!: Poly extends true ? FaustPolyWebAudioDsp : FaustMonoWebAudioDsp;\n\n        protected paramValuesCache: Record<string, number> = {};\n\n        protected wamInfo?: { moduleId: string; instanceId: string };\n        protected fCommunicator: FaustAudioWorkletProcessorCommunicator;\n\n        constructor(options: FaustAudioWorkletNodeOptions<Poly>) {\n            super(options);\n\n            // Setup port message handling\n            this.fCommunicator = new FaustAudioWorkletProcessorCommunicator(this.port);\n\n            const { parameterDescriptors } = (this.constructor as typeof AudioWorkletProcessor);\n            parameterDescriptors.forEach((pd) => {\n                this.paramValuesCache[pd.name] = pd.defaultValue || 0;\n            })\n\n            const { moduleId, instanceId } = options.processorOptions;\n            if (!moduleId || !instanceId) return;\n            this.wamInfo = { moduleId, instanceId };\n        }\n\n        static get parameterDescriptors() {\n            const params = [] as AudioParamDescriptor[];\n            // Analyse voice JSON to generate AudioParam parameters\n            const callback = (item: FaustUIItem) => {\n                const param = analysePolyParameters(item);\n                if (param) params.push(param);\n            }\n            FaustBaseWebAudioDsp.parseUI(dspMeta.ui, callback);\n            // Analyse effect JSON to generate AudioParam parameters\n            if (effectMeta) FaustBaseWebAudioDsp.parseUI(effectMeta.ui, callback);\n            return params;\n        }\n\n        setupWamEventHandler() {\n            if (!this.wamInfo) return;\n            const { moduleId, instanceId } = this.wamInfo;\n            const { webAudioModules } = (globalThis as unknown as WamAudioWorkletGlobalScope);\n            const ModuleScope = webAudioModules.getModuleScope(moduleId) as WamParamMgrSDKBaseModuleScope;\n            const paramMgrProcessor = ModuleScope?.paramMgrProcessors?.[instanceId];\n            if (!paramMgrProcessor) return;\n            if (paramMgrProcessor.handleEvent) return;\n            paramMgrProcessor.handleEvent = (event) => {\n                if (event.type === \"wam-midi\") this.midiMessage(event.data.bytes);\n            };\n        }\n\n        process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: { [key: string]: Float32Array }) {\n\n            // Update controls (possibly needed for sample accurate control)\n            for (const path in parameters) {\n                const [paramValue] = parameters[path];\n                if (paramValue !== this.paramValuesCache[path]) {\n                    this.fDSPCode.setParamValue(path, paramValue);\n                    this.paramValuesCache[path] = paramValue;\n                }\n            }\n            if (this.fCommunicator.getNewAccDataAvailable()) {\n                const acc = this.fCommunicator.getAcc();\n                if (acc) {\n                    this.fCommunicator.setNewAccDataAvailable(false);\n                    const { invert, ...data } = acc;\n                    this.propagateAcc(data, invert);\n                }\n            }\n            if (this.fCommunicator.getNewGyrDataAvailable()) {\n                const gyr = this.fCommunicator.getGyr();\n                if (gyr) {\n                    this.fCommunicator.setNewGyrDataAvailable(false);\n                    this.propagateGyr(gyr);\n                }\n            }\n\n            return this.fDSPCode.compute(inputs[0], outputs[0]);\n        }\n\n        protected handleMessageAux(e: MessageEvent) { // use arrow function for binding\n            const msg = e.data;\n\n            switch (msg.type) {\n                // Generic MIDI message\n                case \"midi\": {\n                    this.midiMessage(msg.data);\n                    break;\n                }\n                // Typed MIDI message\n                case \"ctrlChange\": {\n                    this.ctrlChange(msg.data[0], msg.data[1], msg.data[2]);\n                    break;\n                }\n                case \"pitchWheel\": {\n                    this.pitchWheel(msg.data[0], msg.data[1]);\n                    break;\n                }\n                // Generic data message\n                case \"param\": {\n                    this.setParamValue(msg.data.path, msg.data.value);\n                    break;\n                }\n                // Plot handler set on demand\n                case \"setPlotHandler\": {\n                    if (msg.data) {\n                        this.fDSPCode.setPlotHandler((output, index, events) => this.port.postMessage({ type: \"plot\", value: output, index, events }));\n                    } else {\n                        this.fDSPCode.setPlotHandler(null);\n                    }\n                    break;\n                }\n                case \"setupWamEventHandler\": {\n                    this.setupWamEventHandler();\n                    break;\n                }\n                case \"start\": {\n                    this.fDSPCode.start();\n                    break;\n                }\n                case \"stop\": {\n                    this.fDSPCode.stop();\n                    break;\n                }\n                case \"destroy\": {\n                    this.port.close();\n                    this.fDSPCode.destroy();\n                    break;\n                }\n                default:\n                    break;\n            }\n        }\n\n        protected setParamValue(path: string, value: number) {\n            this.fDSPCode.setParamValue(path, value);\n            this.paramValuesCache[path] = value;\n        }\n\n        protected midiMessage(data: number[] | Uint8Array) {\n            this.fDSPCode.midiMessage(data);\n        }\n\n        protected ctrlChange(channel: number, ctrl: number, value: number) {\n            this.fDSPCode.ctrlChange(channel, ctrl, value);\n        }\n\n        protected pitchWheel(channel: number, wheel: number) {\n            this.fDSPCode.pitchWheel(channel, wheel);\n        }\n\n        protected propagateAcc(accelerationIncludingGravity: NonNullable<DeviceMotionEvent[\"accelerationIncludingGravity\"]>, invert: boolean = false) {\n            this.fDSPCode.propagateAcc(accelerationIncludingGravity, invert);\n        }\n\n        protected propagateGyr(event: Pick<DeviceOrientationEvent, \"alpha\" | \"beta\" | \"gamma\">) {\n            this.fDSPCode.propagateGyr(event);\n        }\n    }\n\n    /**\n     * Monophonic AudioWorkletProcessor\n     */\n    class FaustMonoAudioWorkletProcessor extends FaustAudioWorkletProcessor<false> {\n\n        constructor(options: FaustAudioWorkletNodeOptions) {\n            super(options);\n            const { FaustMonoWebAudioDsp } = dependencies as FaustAudioWorkletProcessorDependencies<false>;\n            const { factory, sampleSize } = options.processorOptions;\n\n            const instance = FaustWasmInstantiator.createSyncMonoDSPInstance(factory);\n\n            // Create Monophonic DSP\n            this.fDSPCode = new FaustMonoWebAudioDsp(instance, sampleRate, sampleSize, 128, factory.soundfiles);\n\n            // Setup port message handling\n            this.port.addEventListener(\"message\", this.handleMessageAux);\n            this.port.start();\n\n            // Setup output handler\n            this.fDSPCode.setOutputParamHandler((path, value) => this.port.postMessage({ path, value, type: \"param\" }));\n\n            this.fDSPCode.start();\n        }\n\n        protected handleMessageAux = (e: MessageEvent) => { // use arrow function for binding\n            super.handleMessageAux(e);\n        }\n    }\n\n    /**\n     * Polyphonic AudioWorkletProcessor\n     */\n    class FaustPolyAudioWorkletProcessor extends FaustAudioWorkletProcessor<true> {\n\n        constructor(options: FaustPolyAudioWorkletNodeOptions) {\n            super(options);\n            const { FaustPolyWebAudioDsp } = dependencies as FaustAudioWorkletProcessorDependencies<true>;\n\n            const { voiceFactory, mixerModule, voices, effectFactory, sampleSize } = options.processorOptions;\n\n            const instance = FaustWasmInstantiator.createSyncPolyDSPInstance(voiceFactory, mixerModule, voices, effectFactory);\n\n            const soundfiles = { ...effectFactory?.soundfiles, ...voiceFactory.soundfiles };\n            // Create Polyphonic DSP\n            this.fDSPCode = new FaustPolyWebAudioDsp(instance, sampleRate, sampleSize, 128, soundfiles);\n\n            // Setup port message handling\n            this.port.addEventListener(\"message\", this.handleMessageAux);\n            this.port.start();\n\n            // Setup output handler\n            this.fDSPCode.setOutputParamHandler((path, value) => this.port.postMessage({ path, value, type: \"param\" }));\n\n            this.fDSPCode.start();\n        }\n\n        protected midiMessage(data: number[] | Uint8Array) {\n            const cmd = data[0] >> 4;\n            const channel = data[0] & 0xf;\n            const data1 = data[1];\n            const data2 = data[2];\n            if (cmd === 8 || (cmd === 9 && data2 === 0)) this.keyOff(channel, data1, data2);\n            else if (cmd === 9) this.keyOn(channel, data1, data2);\n            else super.midiMessage(data);\n        }\n\n        protected handleMessageAux = (e: MessageEvent) => { // use arrow function for binding\n            const msg = e.data;\n            switch (msg.type) {\n                case \"keyOn\": this.keyOn(msg.data[0], msg.data[1], msg.data[2]); break;\n                case \"keyOff\": this.keyOff(msg.data[0], msg.data[1], msg.data[2]); break;\n                default:\n                    super.handleMessageAux(e);\n                    break;\n            }\n        }\n\n        // Public API\n        keyOn(channel: number, pitch: number, velocity: number) {\n            this.fDSPCode.keyOn(channel, pitch, velocity);\n        }\n\n        keyOff(channel: number, pitch: number, velocity: number) {\n            this.fDSPCode.keyOff(channel, pitch, velocity);\n        }\n\n        allNotesOff(hard: boolean) {\n            this.fDSPCode.allNotesOff(hard);\n        }\n    }\n\n    const Processor = poly ? FaustPolyAudioWorkletProcessor : FaustMonoAudioWorkletProcessor;\n    if (register) {\n        try {\n            registerProcessor(processorName || dspName || (poly ? \"mydsp_poly\" : \"mydsp\"), Processor);\n        } catch (error) {\n            console.warn(error);\n        }\n    }\n\n    return poly ? FaustPolyAudioWorkletProcessor : FaustMonoAudioWorkletProcessor;\n}\n\nexport default getFaustAudioWorkletProcessor;\n", "import type { FaustAudioWorkletProcessorCommunicator } from \"./FaustAudioWorkletCommunicator\";\r\nimport type { FaustMonoDspInstance } from \"./FaustDspInstance\";\r\nimport type FaustWasmInstantiator from \"./FaustWasmInstantiator\";\r\nimport type { FaustBaseWebAudioDsp, FaustMonoWebAudioDsp, PlotHandler } from \"./FaustWebAudioDsp\";\r\nimport type { AudioParamDescriptor, AudioWorkletGlobalScope, LooseFaustDspFactory, FaustDspMeta, FaustUIItem, InterfaceFFT, TWindowFunction, Writeable, TypedArray, FFTUtils } from \"./types\";\r\nimport type { AudioWorkletGlobalScope as WamAudioWorkletGlobalScope, WamParamMgrSDKBaseModuleScope } from \"@webaudiomodules/sdk-parammgr\";\r\n\r\nexport interface FaustFFTOptionsData {\r\n    fftSize: number;\r\n    fftOverlap: number;\r\n    noIFFT: boolean;\r\n    /** Index number of the default window function, leave undefined or -1 for rectangular (no windowing) */\r\n    defaultWindowFunction: number;\r\n}\r\n\r\n/**\r\n * Injected in the string to be compiled on AudioWorkletProcessor side\r\n */\r\nexport interface FaustFFTData {\r\n    processorName: string;\r\n    dspName: string;\r\n    dspMeta: FaustDspMeta;\r\n    fftOptions?: Partial<FaustFFTOptionsData>;\r\n};\r\nexport interface FaustFFTAudioWorkletProcessorDependencies {\r\n    FaustBaseWebAudioDsp: typeof FaustBaseWebAudioDsp;\r\n    FaustMonoWebAudioDsp: typeof FaustMonoWebAudioDsp;\r\n    FaustWasmInstantiator: typeof FaustWasmInstantiator;\r\n    FaustAudioWorkletProcessorCommunicator: typeof FaustAudioWorkletProcessorCommunicator;\r\n    FFTUtils: typeof FFTUtils;\r\n}\r\nexport interface FaustFFTAudioWorkletNodeOptions extends AudioWorkletNodeOptions {\r\n    processorOptions: FaustFFTAudioWorkletProcessorOptions;\r\n}\r\nexport interface FaustFFTAudioWorkletProcessorOptions {\r\n    name: string;\r\n    sampleSize: number;\r\n    factory: LooseFaustDspFactory;\r\n    // for WAMs\r\n    moduleId?: string;\r\n    instanceId?: string;\r\n}\r\n\r\n\r\n// Dynamic AudioWorkletProcessor code generator\r\nconst getFaustFFTAudioWorkletProcessor = (dependencies: FaustFFTAudioWorkletProcessorDependencies, faustData: FaustFFTData, register = true): typeof AudioWorkletProcessor => {\r\n    const { registerProcessor, AudioWorkletProcessor, sampleRate } = globalThis as unknown as AudioWorkletGlobalScope;\r\n\r\n    const {\r\n        FaustBaseWebAudioDsp,\r\n        FaustWasmInstantiator,\r\n        FaustMonoWebAudioDsp,\r\n        FaustAudioWorkletProcessorCommunicator,\r\n        FFTUtils\r\n    } = dependencies;\r\n    \r\n    const {\r\n        processorName,\r\n        dspName,\r\n        dspMeta,\r\n        fftOptions\r\n    } = faustData;\r\n\r\n    const {\r\n        windowFunctions,\r\n        getFFT,\r\n        fftToSignal,\r\n        signalToFFT,\r\n        signalToNoFFT\r\n    } = FFTUtils;\r\n\r\n    /**\r\n     * Ceil a number to multiple of another\r\n     */\r\n    const ceil = (x: number, to: number): number => (Math.abs(to) < 1 ? Math.ceil(x * (1 / to)) / (1 / to) : Math.ceil(x / to) * to);\r\n\r\n    /**\r\n     * Mod support wrapping with negative numbers\r\n     */\r\n    const mod = (x: number, y: number): number => (x % y + y) % y;\r\n\r\n    const apply = (array: Writeable<ArrayLike<number>>, windowFunction: TWindowFunction) => {\r\n        for (let i = 0; i < array.length; i++) {\r\n            array[i] *= windowFunction(i, array.length);\r\n        }\r\n    };\r\n\r\n    const fftParamKeywords = [\"/fftSize\", \"/fftHopSize\", \"/fftOverlap\", \"/windowFunction\", \"/noIFFT\"];\r\n\r\n    /**\r\n     * Copy buffer to another, support negative offset index\r\n     */\r\n    const setTypedArray = <T extends TypedArray = TypedArray>(to: T, from: T, offsetTo = 0, offsetFrom = 0) => {\r\n        const toLength = to.length;\r\n        const fromLength = from.length;\r\n        const spillLength = Math.min(toLength, fromLength);\r\n        let spilled = 0;\r\n        let $to = mod(offsetTo, toLength) || 0;\r\n        let $from = mod(offsetFrom, fromLength) || 0;\r\n        while (spilled < spillLength) {\r\n            const $spillLength = Math.min(spillLength - spilled, toLength - $to, fromLength - $from);\r\n            const $fromEnd = $from + $spillLength;\r\n            if ($from === 0 && $fromEnd === fromLength) to.set(from, $to);\r\n            else to.set(from.subarray($from, $fromEnd), $to);\r\n            $to = ($to + $spillLength) % toLength;\r\n            $from = $fromEnd % fromLength;\r\n            spilled += $spillLength;\r\n        }\r\n        return $to;\r\n    };\r\n\r\n    // Analyse JSON to generate AudioParam parameters\r\n    const analyseParameters = (item: FaustUIItem): AudioParamDescriptor | null => {\r\n        const isFFTReserved = \"address\" in item && !!fftParamKeywords.find(k => item.address.endsWith(k));\r\n        if (isFFTReserved) return null;\r\n        if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"nentry\") {\r\n            return { name: item.address, defaultValue: item.init || 0, minValue: item.min || 0, maxValue: item.max || 0 };\r\n        } else if (item.type === \"button\" || item.type === \"checkbox\") {\r\n            return { name: item.address, defaultValue: item.init || 0, minValue: 0, maxValue: 1 };\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Class for Faust FFT AudioWorkletProcessor\r\n     */\r\n    class FaustFFTAudioWorkletProcessor extends AudioWorkletProcessor {\r\n\r\n        protected fDSPCode: FaustMonoWebAudioDsp;\r\n\r\n        protected paramValuesCache: Record<string, number> = {};\r\n\r\n        protected wamInfo?: { moduleId: string; instanceId: string };\r\n        protected communicator: FaustAudioWorkletProcessorCommunicator;\r\n\r\n        private dspInstance!: FaustMonoDspInstance;\r\n        private sampleSize!: number;\r\n\r\n        private destroyed = false;\r\n        /** Pointer of next start sample to write of the FFT input window */\r\n        private $inputWrite = 0;\r\n        /** Pointer of next start sample to read of the FFT input window */\r\n        private $inputRead = 0;\r\n        /** Pointer of next start sample to write of the FFT output window */\r\n        private $outputWrite = 0;\r\n        /** Pointer of next start sample to read of the FFT output window */\r\n        private $outputRead = 0;\r\n        /** Not perform in IFFT when reconstruct the audio signal */\r\n        private noIFFT = false;\r\n        /** audio data from input, array of channels */\r\n        private readonly fftInput: Float32Array[] = [];\r\n        /** audio data for output, array of channels */\r\n        private readonly fftOutput: Float32Array[] = [];\r\n        /** Generated from the current window function */\r\n        private window: Float32Array;\r\n        /** Generated from the current window's rolling sum square */\r\n        private windowSumSquare: Float32Array;\r\n        \r\n        /** FFT constructor */\r\n        private FFT: typeof InterfaceFFT;\r\n        /** Real FFT interface */\r\n        private rfft: InterfaceFFT;\r\n        /** Faust param name of fftHopSize */\r\n        private fftHopSizeParam: string | undefined;\r\n        /** FFT Overlaps, 1 means no overlap */\r\n        private fftOverlap = 0;\r\n        private fftHopSize = 0;\r\n        private fftSize = 0;\r\n        private fftBufferSize = 0;\r\n        private fftProcessorZeros: Float32Array;\r\n        private noIFFTBuffer: Float32Array;\r\n\r\n        private fPlotHandler: PlotHandler | null = null;\r\n        private fCachedEvents: { type: string; data: any }[] = [];\r\n        private fBufferNum = 0;\r\n        private soundfiles: LooseFaustDspFactory[\"soundfiles\"] = {};\r\n        get fftProcessorBufferSize() {\r\n            return this.fftSize / 2 + 1;\r\n        }\r\n        private windowFunction: TWindowFunction | null = null;\r\n\r\n        constructor(options: FaustFFTAudioWorkletNodeOptions) {\r\n            super(options);\r\n\r\n            // Setup port message handling\r\n            this.port.addEventListener(\"message\", this.handleMessageAux);\r\n            this.port.start();\r\n            this.communicator = new FaustAudioWorkletProcessorCommunicator(this.port);\r\n            \r\n            const { parameterDescriptors } = (this.constructor as typeof AudioWorkletProcessor);\r\n            parameterDescriptors.forEach((pd) => {\r\n                this.paramValuesCache[pd.name] = pd.defaultValue || 0;\r\n            })\r\n\r\n            const { factory, sampleSize } = options.processorOptions;\r\n\r\n            this.dspInstance = FaustWasmInstantiator.createSyncMonoDSPInstance(factory);\r\n            this.sampleSize = sampleSize;\r\n            this.soundfiles = factory.soundfiles;\r\n\r\n            // Init the FFT constructor and the Faust FFT Processor\r\n            this.initFFT();\r\n\r\n            const { moduleId, instanceId } = options.processorOptions;\r\n            if (!moduleId || !instanceId) return;\r\n            this.wamInfo = { moduleId, instanceId };\r\n        }\r\n\r\n        async initFFT(): Promise<true> {\r\n            // Use injected function to instantiate the FFT constructor\r\n            this.FFT = await getFFT();\r\n            // Init Faust FFT Processor\r\n            await this.createFFTProcessor();\r\n            return true;\r\n        }\r\n\r\n        static get parameterDescriptors() {\r\n            const params = [] as AudioParamDescriptor[];\r\n            // Analyse voice JSON to generate AudioParam parameters\r\n            const callback = (item: FaustUIItem) => {\r\n                const param = analyseParameters(item);\r\n                if (param) params.push(param);\r\n            }\r\n            FaustBaseWebAudioDsp.parseUI(dspMeta.ui, callback);\r\n            // Add to Faust parameters, FFT specified parameters\r\n            return [\r\n                ...params,\r\n                {\r\n                    defaultValue: fftOptions?.fftSize || 1024,\r\n                    maxValue: 2 ** 32,\r\n                    minValue: 2,\r\n                    name: \"fftSize\"\r\n                }, {\r\n                    defaultValue: fftOptions?.fftOverlap || 2,\r\n                    maxValue: 32,\r\n                    minValue: 1,\r\n                    name: \"fftOverlap\"\r\n                }, {\r\n                    defaultValue: typeof fftOptions?.defaultWindowFunction === \"number\" ? fftOptions.defaultWindowFunction + 1 : 0,\r\n                    maxValue: windowFunctions?.length || 0,\r\n                    minValue: 0,\r\n                    name: \"windowFunction\"\r\n                }, {\r\n                    defaultValue: +!!fftOptions?.noIFFT || 0,\r\n                    maxValue: 1,\r\n                    minValue: 0,\r\n                    name: \"noIFFT\"\r\n                }\r\n            ];\r\n        }\r\n\r\n        setupWamEventHandler() {\r\n            if (!this.wamInfo) return;\r\n            const { moduleId, instanceId } = this.wamInfo;\r\n\t        const { webAudioModules } = (globalThis as unknown as WamAudioWorkletGlobalScope);\r\n            const ModuleScope = webAudioModules.getModuleScope(moduleId) as WamParamMgrSDKBaseModuleScope;\r\n            const paramMgrProcessor = ModuleScope?.paramMgrProcessors?.[instanceId];\r\n            if (!paramMgrProcessor) return;\r\n            if (paramMgrProcessor.handleEvent) return;\r\n            paramMgrProcessor.handleEvent = (event) => {\r\n                if (event.type === \"wam-midi\") this.midiMessage(event.data.bytes);\r\n            };\r\n        }\r\n\r\n        processFFT() {\r\n            // Get the number of samples that need to proceed, from the input r/w pointers\r\n            let samplesForFFT = mod(this.$inputWrite - this.$inputRead, this.fftBufferSize) || this.fftBufferSize;\r\n            // Start process, until no more enough samples\r\n            while (samplesForFFT >= this.fftSize) {\r\n                let fftProcessorOutputs: Float32Array[] = [];\r\n                // Faust processing, use a callback to avoid extra data copy\r\n                this.fDSPCode.compute((inputs) => {\r\n                    // for each audio input channel, three Faust FFT input buffers can be generated (real, imag, FFT bin index)\r\n                    for (let i = 0; i < Math.min(this.fftInput.length, Math.ceil(inputs.length / 3)); i++) {\r\n                        // FFT forward, use a callback to avoid extra data copy\r\n                        const ffted = this.rfft.forward((fftBuffer) => {\r\n                            setTypedArray(fftBuffer, this.fftInput[i], 0, this.$inputRead);\r\n                            // Windowing the input\r\n                            for (let j = 0; j < fftBuffer.length; j++) {\r\n                                fftBuffer[j] *= this.window[j];\r\n                            }\r\n                            // data for FFT (fftBuffer) is prepared\r\n                        });\r\n                        // write FFTed spectral data to three Faust FFT input buffers (real, imag, FFT bin index)\r\n                        fftToSignal(ffted, inputs[i * 3], inputs[i * 3 + 1], inputs[i * 3 + 2]);\r\n                        // Faust inputs are prepared\r\n                    }\r\n                    // If the Faust DSP has more inputs, fill them (zeros or real/imag, fill FFT bin indexes)\r\n                    for (let i = this.fftInput.length * 3; i < inputs.length; i++) {\r\n                        if (i % 3 === 2) inputs[i].forEach((v, j) => inputs[i][j] = j);\r\n                        else inputs[i].fill(0);\r\n                    }\r\n                }, (outputs) => {\r\n                    // Get the Faust DSP outputs\r\n                    fftProcessorOutputs = outputs as Float32Array[];\r\n                });\r\n\r\n                // Advance FFT input read pointers\r\n                this.$inputRead += this.fftHopSize;\r\n                this.$inputRead %= this.fftBufferSize;\r\n\r\n                samplesForFFT -= this.fftHopSize;\r\n\r\n                // Do inverse FFT on the processed data by Faust DSP, and write the reconstructed signal to the output buffer\r\n                for (let i = 0; i < this.fftOutput.length; i++) {\r\n                    let iffted: Float32Array;\r\n                    // If noIFFT option in enabled, then no need to do inverse IFFT, use the injected function to convert\r\n                    if (this.noIFFT) {\r\n                        iffted = this.noIFFTBuffer;\r\n                        signalToNoFFT(fftProcessorOutputs[i * 2] || this.fftProcessorZeros, fftProcessorOutputs[i * 2 + 1] || this.fftProcessorZeros, iffted);\r\n                    } else {\r\n                        // FFT inverse, use a callback to avoid extra data copy\r\n                        iffted = this.rfft.inverse((ifftBuffer) => {\r\n                            // Convert the Faust DSP output (real/imag plans) to an array for inverse FFT\r\n                            signalToFFT(fftProcessorOutputs[i * 2] || this.fftProcessorZeros, fftProcessorOutputs[i * 2 + 1] || this.fftProcessorZeros, ifftBuffer);\r\n                            // ifftBuffer is prepared\r\n                        });\r\n                    }\r\n                    // Windowing the output\r\n                    for (let j = 0; j < iffted.length; j++) {\r\n                        iffted[j] *= this.window[j];\r\n                    }\r\n                    // Overlap-add, preparing the windowSumSquare array for reverse the windowing effect when output the audio\r\n                    let $: number;\r\n                    // First part, add the part that is overlaped with the previous window\r\n                    for (let j = 0; j < iffted.length - this.fftHopSize; j++) {\r\n                        $ = mod(this.$outputWrite + j, this.fftBufferSize);\r\n                        this.fftOutput[i][$] += iffted[j];\r\n                        if (i === 0) this.windowSumSquare[$] += this.noIFFT ? this.window[j] : this.window[j] ** 2;\r\n                    }\r\n                    // Second part, write directly to the output buffer\r\n                    for (let j = iffted.length - this.fftHopSize; j < iffted.length; j++) {\r\n                        $ = mod(this.$outputWrite + j, this.fftBufferSize);\r\n                        this.fftOutput[i][$] = iffted[j];\r\n                        if (i === 0) this.windowSumSquare[$] = this.noIFFT ? this.window[j] : this.window[j] ** 2;\r\n                    }\r\n                }\r\n                // Advance FFT output write pointers\r\n                this.$outputWrite += this.fftHopSize;\r\n                this.$outputWrite %= this.fftBufferSize;\r\n            }\r\n        }\r\n\r\n        process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: { [key: string]: Float32Array }) {\r\n\r\n            if (this.destroyed) return false;\r\n            if (!this.FFT) return true;\r\n            const input = inputs[0];\r\n            const output = outputs[0];\r\n            const inputChannels = input?.length || 0;\r\n            const outputChannels = output?.length || 0;\r\n            // if (input.length === 0) return true;\r\n    \r\n            const bufferSize = input?.length ? Math.max(...input.map(c => c.length)) || 128 : 128;\r\n    \r\n            // Reset FFT and related buffers if necessary (checks in the resetFFT method)\r\n            this.noIFFT = !!parameters.noIFFT[0];\r\n            this.resetFFT(~~parameters.fftSize[0], ~~parameters.fftOverlap[0], ~~parameters.windowFunction[0], inputChannels, outputChannels, bufferSize);\r\n    \r\n            if (!this.fDSPCode) return true;\r\n    \r\n            for (const path in parameters) {\r\n                if (!!fftParamKeywords.find(k => `/${path}`.endsWith(k))) continue;\r\n                const [paramValue] = parameters[path];\r\n                if (paramValue !== this.paramValuesCache[path]) {\r\n                    this.fDSPCode.setParamValue(path, paramValue);\r\n                    this.paramValuesCache[path] = paramValue;\r\n                }\r\n            }\r\n            if (this.communicator.getNewAccDataAvailable()) {\r\n                const acc = this.communicator.getAcc();\r\n                if (acc) {\r\n                    this.communicator.setNewAccDataAvailable(false);\r\n                    const { invert, ...data } = acc;\r\n                    this.propagateAcc(data, invert);\r\n                }\r\n            }\r\n            if (this.communicator.getNewGyrDataAvailable()) {\r\n                const gyr = this.communicator.getGyr();\r\n                if (gyr) {\r\n                    this.communicator.setNewGyrDataAvailable(false);\r\n                    this.propagateGyr(gyr);\r\n                }\r\n            }\r\n\r\n            // Write audio input into fftInput buffer, advance pointers\r\n            if (input?.length) {\r\n                let $inputWrite = 0;\r\n                for (let i = 0; i < input.length; i++) {\r\n                    const inputWindow = this.fftInput[i];\r\n                    const channel = input[i].length ? input[i] : new Float32Array(bufferSize);\r\n                    $inputWrite = setTypedArray(inputWindow, channel, this.$inputWrite);\r\n                }\r\n                this.$inputWrite = $inputWrite;\r\n            } else {\r\n                this.$inputWrite += bufferSize;\r\n                this.$inputWrite %= this.fftBufferSize;\r\n            }\r\n    \r\n            // Do FFT if necessary\r\n            this.processFFT();\r\n    \r\n            // Read from fftOutput buffer for audio output, applying windowSumSquare to reverse the doubled windowing effect\r\n            for (let i = 0; i < output.length; i++) {\r\n                setTypedArray(output[i], this.fftOutput[i], 0, this.$outputRead);\r\n                // let a = 0;\r\n                let div = 0;\r\n                for (let j = 0; j < bufferSize; j++) {\r\n                    div = this.windowSumSquare[mod(this.$outputRead + j, this.fftBufferSize)];\r\n                    output[i][j] /= div < 1e-8 ? 1 : div;\r\n                }\r\n            }\r\n            // Advance pointers\r\n            this.$outputRead += bufferSize;\r\n            this.$outputRead %= this.fftBufferSize;\r\n\r\n            // plot\r\n            if (this.fPlotHandler) {\r\n                this.port.postMessage({ type: \"plot\", value: output, index: this.fBufferNum++, events: this.fCachedEvents });\r\n                this.fCachedEvents = [];\r\n            }\r\n            return true;\r\n        }\r\n\r\n        protected handleMessageAux = (e: MessageEvent) => { // use arrow function for binding\r\n            const msg = e.data;\r\n\r\n            switch (msg.type) {\r\n                // Generic MIDI message\r\n                case \"midi\": this.midiMessage(msg.data); break;\r\n                // Typed MIDI message\r\n                case \"ctrlChange\": this.ctrlChange(msg.data[0], msg.data[1], msg.data[2]); break;\r\n                case \"pitchWheel\": this.pitchWheel(msg.data[0], msg.data[1]); break;\r\n                // Generic data message\r\n                case \"param\": this.setParamValue(msg.data.path, msg.data.value); break;\r\n                // Plot handler set on demand\r\n                case \"setPlotHandler\": {\r\n                    if (msg.data) {\r\n                        this.fPlotHandler = (output, index, events) => {\r\n                            if (events) this.fCachedEvents.push(...events);\r\n                        };\r\n                    } else {\r\n                        this.fPlotHandler = null;\r\n                    }\r\n                    this.fDSPCode?.setPlotHandler(this.fPlotHandler);\r\n                    break;\r\n                }\r\n                case \"setupWamEventHandler\": {\r\n                    this.setupWamEventHandler();\r\n                    break;\r\n                }\r\n                case \"start\": {\r\n                    this.fDSPCode?.start();\r\n                    break;\r\n                }\r\n                case \"stop\": {\r\n                    this.fDSPCode?.stop();\r\n                    break;\r\n                }\r\n                case \"destroy\": {\r\n                    this.port.close();\r\n                    this.destroy();\r\n                    break;\r\n                }\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        protected setParamValue(path: string, value: number) {\r\n            this.fDSPCode?.setParamValue(path, value);\r\n            this.paramValuesCache[path] = value;\r\n        }\r\n\r\n        protected midiMessage(data: number[] | Uint8Array) {\r\n            this.fDSPCode?.midiMessage(data);\r\n        }\r\n\r\n        protected ctrlChange(channel: number, ctrl: number, value: number) {\r\n            this.fDSPCode?.ctrlChange(channel, ctrl, value);\r\n        }\r\n\r\n        protected pitchWheel(channel: number, wheel: number) {\r\n            this.fDSPCode?.pitchWheel(channel, wheel);\r\n        }\r\n\r\n        protected propagateAcc(accelerationIncludingGravity: NonNullable<DeviceMotionEvent[\"accelerationIncludingGravity\"]>, invert: boolean = false) {\r\n            this.fDSPCode.propagateAcc(accelerationIncludingGravity, invert);\r\n        }\r\n\r\n        protected propagateGyr(event: Pick<DeviceOrientationEvent, \"alpha\" | \"beta\" | \"gamma\">) {\r\n            this.fDSPCode.propagateGyr(event);\r\n        }\r\n\r\n        resetFFT(sizeIn: number, overlapIn: number, windowFunctionIn: number, inputChannels: number, outputChannels: number, bufferSize: number) {\r\n            const fftSize = ~~ceil(Math.max(2, sizeIn || 1024), 2);\r\n            const fftOverlap = ~~Math.min(fftSize, Math.max(1, overlapIn));\r\n            const fftHopSize = ~~Math.max(1, fftSize / fftOverlap);\r\n            const latency = fftSize - Math.min(fftHopSize, bufferSize);\r\n            let windowFunction: TWindowFunction | null = null;\r\n            \r\n            // set the window function from the injected list\r\n            if (windowFunctionIn !== 0) {\r\n                windowFunction = typeof windowFunctions === \"object\" ? windowFunctions[~~windowFunctionIn - 1] || null : null;\r\n            }\r\n            const fftSizeChanged = fftSize !== this.fftSize;\r\n\r\n            const fftOverlapChanged = fftOverlap !== this.fftOverlap;\r\n            // Reset FFT vars if the size is changed\r\n            if (fftSizeChanged || fftOverlapChanged) {\r\n                this.fftSize = fftSize;\r\n                this.fftOverlap = fftOverlap;\r\n                this.fftHopSize = fftHopSize;\r\n                this.$inputWrite = 0;\r\n                this.$inputRead = 0;\r\n                this.$outputWrite = 0;\r\n                this.$outputRead = -latency;\r\n                this.fftBufferSize = Math.max(fftSize * 2 - this.fftHopSize, bufferSize * 2);\r\n                if (!fftSizeChanged && this.fftHopSizeParam) this.fDSPCode?.setParamValue(this.fftHopSizeParam, this.fftHopSize);\r\n            }\r\n\r\n            // Reset the FFT interface and the Faust Processor\r\n            if (fftSizeChanged) {\r\n                this.rfft?.dispose();\r\n                this.rfft = new this.FFT(fftSize);\r\n                this.noIFFTBuffer = new Float32Array(this.fftSize);\r\n                this.createFFTProcessor();\r\n            }\r\n            \r\n            // Calculate a window from the window function, prepare the windowSumSquare buffer \r\n            if (fftSizeChanged || fftOverlapChanged || windowFunction !== this.windowFunction) {\r\n                this.windowFunction = windowFunction;\r\n                this.window = new Float32Array(fftSize);\r\n                this.window.fill(1);\r\n                if (windowFunction) apply(this.window, windowFunction);\r\n                this.windowSumSquare = new Float32Array(this.fftBufferSize);\r\n            }\r\n\r\n            // Reset FFT I/O buffers if necessary\r\n            if (this.fftInput.length > inputChannels) {\r\n                this.fftInput.splice(inputChannels);\r\n            }\r\n            if (this.fftOutput.length > outputChannels) {\r\n                this.fftOutput.splice(outputChannels);\r\n            }\r\n            if (fftSizeChanged || fftOverlapChanged) {\r\n                for (let i = 0; i < inputChannels; i++) {\r\n                    this.fftInput[i] = new Float32Array(this.fftBufferSize);\r\n                }\r\n                for (let i = 0; i < outputChannels; i++) {\r\n                    this.fftOutput[i] = new Float32Array(this.fftBufferSize);\r\n                }\r\n            } else {\r\n                if (this.fftInput.length < inputChannels) {\r\n                    for (let i = this.fftInput.length; i < inputChannels; i++) {\r\n                        this.fftInput[i] = new Float32Array(this.fftBufferSize);\r\n                    }\r\n                }\r\n                if (this.fftOutput.length < outputChannels) {\r\n                    for (let i = this.fftOutput.length; i < outputChannels; i++) {\r\n                        this.fftOutput[i] = new Float32Array(this.fftBufferSize);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        async createFFTProcessor() {\r\n            this.fDSPCode?.stop();\r\n            this.fDSPCode?.destroy();\r\n\r\n            // Create Monophonic DSP\r\n            this.fDSPCode = new FaustMonoWebAudioDsp(this.dspInstance, sampleRate, this.sampleSize, this.fftProcessorBufferSize, this.soundfiles);\r\n\r\n            // Setup output handler\r\n            this.fDSPCode.setOutputParamHandler((path, value) => this.port.postMessage({ path, value, type: \"param\" }));\r\n            this.fDSPCode.setPlotHandler(this.fPlotHandler);\r\n            const params = this.fDSPCode.getParams();\r\n            this.fDSPCode.start();\r\n            // Write the cached parameters\r\n            for (const path in this.paramValuesCache) {\r\n                if (!!fftParamKeywords.find(k => `/${path}`.endsWith(k))) continue;\r\n                this.fDSPCode.setParamValue(path, this.paramValuesCache[path])\r\n            }\r\n            // Write the FFT reverved parameters\r\n            const fftSizeParam = params.find(s => s.endsWith(\"/fftSize\"));\r\n            if (fftSizeParam) this.fDSPCode.setParamValue(fftSizeParam, this.fftSize);\r\n            this.fftHopSizeParam = params.find(s => s.endsWith(\"/fftHopSize\"));\r\n            if (this.fftHopSizeParam) this.fDSPCode.setParamValue(this.fftHopSizeParam, this.fftHopSize);\r\n            // Prepare a array of zeros for furthur usage\r\n            this.fftProcessorZeros = new Float32Array(this.fftProcessorBufferSize);\r\n        }\r\n        destroy() {\r\n            this.fDSPCode?.stop();\r\n            this.fDSPCode?.destroy();\r\n            this.rfft?.dispose();\r\n            this.destroyed = true;\r\n        }\r\n\r\n    }\r\n\r\n    const Processor = FaustFFTAudioWorkletProcessor;\r\n    if (register) {\r\n        try {\r\n            registerProcessor(processorName || dspName || \"myfftdsp\", Processor);\r\n        } catch (error) {\r\n            console.warn(error);\r\n        }\r\n    }\r\n\r\n    return FaustFFTAudioWorkletProcessor;\r\n\r\n};\r\n\r\nexport default getFaustFFTAudioWorkletProcessor;\r\n", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n", "/**\n * @internal\n */\nexport const BLOCK_SIZE: number = 64;\n\n/**\n * @internal\n */\nexport const DIGEST_LENGTH: number = 32;\n\n/**\n * @internal\n */\nexport const KEY = new Uint32Array([\n  0x428a2f98,\n  0x71374491,\n  0xb5c0fbcf,\n  0xe9b5dba5,\n  0x3956c25b,\n  0x59f111f1,\n  0x923f82a4,\n  0xab1c5ed5,\n  0xd807aa98,\n  0x12835b01,\n  0x243185be,\n  0x550c7dc3,\n  0x72be5d74,\n  0x80deb1fe,\n  0x9bdc06a7,\n  0xc19bf174,\n  0xe49b69c1,\n  0xefbe4786,\n  0x0fc19dc6,\n  0x240ca1cc,\n  0x2de92c6f,\n  0x4a7484aa,\n  0x5cb0a9dc,\n  0x76f988da,\n  0x983e5152,\n  0xa831c66d,\n  0xb00327c8,\n  0xbf597fc7,\n  0xc6e00bf3,\n  0xd5a79147,\n  0x06ca6351,\n  0x14292967,\n  0x27b70a85,\n  0x2e1b2138,\n  0x4d2c6dfc,\n  0x53380d13,\n  0x650a7354,\n  0x766a0abb,\n  0x81c2c92e,\n  0x92722c85,\n  0xa2bfe8a1,\n  0xa81a664b,\n  0xc24b8b70,\n  0xc76c51a3,\n  0xd192e819,\n  0xd6990624,\n  0xf40e3585,\n  0x106aa070,\n  0x19a4c116,\n  0x1e376c08,\n  0x2748774c,\n  0x34b0bcb5,\n  0x391c0cb3,\n  0x4ed8aa4a,\n  0x5b9cca4f,\n  0x682e6ff3,\n  0x748f82ee,\n  0x78a5636f,\n  0x84c87814,\n  0x8cc70208,\n  0x90befffa,\n  0xa4506ceb,\n  0xbef9a3f7,\n  0xc67178f2\n]);\n\n/**\n * @internal\n */\nexport const INIT = [\n  0x6a09e667,\n  0xbb67ae85,\n  0x3c6ef372,\n  0xa54ff53a,\n  0x510e527f,\n  0x9b05688c,\n  0x1f83d9ab,\n  0x5be0cd19\n];\n\n/**\n * @internal\n */\nexport const MAX_HASHABLE_LENGTH = 2 ** 53 - 1;\n", "import {\n  BLOCK_SIZE,\n  DIGEST_LENGTH,\n  INIT,\n  KEY,\n  MAX_HASHABLE_LENGTH\n} from \"./constants\";\n\n/**\n * @internal\n */\nexport class RawSha256 {\n  private state: Int32Array = Int32Array.from(INIT);\n  private temp: Int32Array = new Int32Array(64);\n  private buffer: Uint8Array = new Uint8Array(64);\n  private bufferLength: number = 0;\n  private bytesHashed: number = 0;\n\n  /**\n   * @internal\n   */\n  finished: boolean = false;\n\n  update(data: Uint8Array): void {\n    if (this.finished) {\n      throw new Error(\"Attempted to update an already finished hash.\");\n    }\n\n    let position = 0;\n    let { byteLength } = data;\n    this.bytesHashed += byteLength;\n\n    if (this.bytesHashed * 8 > MAX_HASHABLE_LENGTH) {\n      throw new Error(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    while (byteLength > 0) {\n      this.buffer[this.bufferLength++] = data[position++];\n      byteLength--;\n\n      if (this.bufferLength === BLOCK_SIZE) {\n        this.hashBuffer();\n        this.bufferLength = 0;\n      }\n    }\n  }\n\n  digest(): Uint8Array {\n    if (!this.finished) {\n      const bitsHashed = this.bytesHashed * 8;\n      const bufferView = new DataView(\n        this.buffer.buffer,\n        this.buffer.byteOffset,\n        this.buffer.byteLength\n      );\n\n      const undecoratedLength = this.bufferLength;\n      bufferView.setUint8(this.bufferLength++, 0x80);\n\n      // Ensure the final block has enough room for the hashed length\n      if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {\n        for (let i = this.bufferLength; i < BLOCK_SIZE; i++) {\n          bufferView.setUint8(i, 0);\n        }\n        this.hashBuffer();\n        this.bufferLength = 0;\n      }\n\n      for (let i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {\n        bufferView.setUint8(i, 0);\n      }\n      bufferView.setUint32(\n        BLOCK_SIZE - 8,\n        Math.floor(bitsHashed / 0x100000000),\n        true\n      );\n      bufferView.setUint32(BLOCK_SIZE - 4, bitsHashed);\n\n      this.hashBuffer();\n\n      this.finished = true;\n    }\n\n    // The value in state is little-endian rather than big-endian, so flip\n    // each word into a new Uint8Array\n    const out = new Uint8Array(DIGEST_LENGTH);\n    for (let i = 0; i < 8; i++) {\n      out[i * 4] = (this.state[i] >>> 24) & 0xff;\n      out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;\n      out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;\n      out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;\n    }\n\n    return out;\n  }\n\n  private hashBuffer(): void {\n    const { buffer, state } = this;\n\n    let state0 = state[0],\n      state1 = state[1],\n      state2 = state[2],\n      state3 = state[3],\n      state4 = state[4],\n      state5 = state[5],\n      state6 = state[6],\n      state7 = state[7];\n\n    for (let i = 0; i < BLOCK_SIZE; i++) {\n      if (i < 16) {\n        this.temp[i] =\n          ((buffer[i * 4] & 0xff) << 24) |\n          ((buffer[i * 4 + 1] & 0xff) << 16) |\n          ((buffer[i * 4 + 2] & 0xff) << 8) |\n          (buffer[i * 4 + 3] & 0xff);\n      } else {\n        let u = this.temp[i - 2];\n        const t1 =\n          ((u >>> 17) | (u << 15)) ^ ((u >>> 19) | (u << 13)) ^ (u >>> 10);\n\n        u = this.temp[i - 15];\n        const t2 =\n          ((u >>> 7) | (u << 25)) ^ ((u >>> 18) | (u << 14)) ^ (u >>> 3);\n\n        this.temp[i] =\n          ((t1 + this.temp[i - 7]) | 0) + ((t2 + this.temp[i - 16]) | 0);\n      }\n\n      const t1 =\n        ((((((state4 >>> 6) | (state4 << 26)) ^\n          ((state4 >>> 11) | (state4 << 21)) ^\n          ((state4 >>> 25) | (state4 << 7))) +\n          ((state4 & state5) ^ (~state4 & state6))) |\n          0) +\n          ((state7 + ((KEY[i] + this.temp[i]) | 0)) | 0)) |\n        0;\n\n      const t2 =\n        ((((state0 >>> 2) | (state0 << 30)) ^\n          ((state0 >>> 13) | (state0 << 19)) ^\n          ((state0 >>> 22) | (state0 << 10))) +\n          ((state0 & state1) ^ (state0 & state2) ^ (state1 & state2))) |\n        0;\n\n      state7 = state6;\n      state6 = state5;\n      state5 = state4;\n      state4 = (state3 + t1) | 0;\n      state3 = state2;\n      state2 = state1;\n      state1 = state0;\n      state0 = (t1 + t2) | 0;\n    }\n\n    state[0] += state0;\n    state[1] += state1;\n    state[2] += state2;\n    state[3] += state3;\n    state[4] += state4;\n    state[5] += state5;\n    state[6] += state6;\n    state[7] += state7;\n  }\n}\n", "export const fromUtf8 = (input) => new TextEncoder().encode(input);\n", "// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SourceData } from \"@aws-sdk/types\";\nimport { fromUtf8 as fromUtf8Browser } from \"@smithy/util-utf8\";\n\n// Quick polyfill\nconst fromUtf8 =\n  typeof Buffer !== \"undefined\" && Buffer.from\n    ? (input: string) => Buffer.from(input, \"utf8\")\n    : fromUtf8Browser;\n\nexport function convertToBuffer(data: SourceData): Uint8Array {\n  // Already a Uint8, do nothing\n  if (data instanceof Uint8Array) return data;\n\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(\n      data.buffer,\n      data.byteOffset,\n      data.byteLength / Uint8Array.BYTES_PER_ELEMENT\n    );\n  }\n\n  return new Uint8Array(data);\n}\n", "// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SourceData } from \"@aws-sdk/types\";\n\nexport function isEmptyData(data: SourceData): boolean {\n  if (typeof data === \"string\") {\n    return data.length === 0;\n  }\n\n  return data.byteLength === 0;\n}\n", "import { BLOCK_SIZE } from \"./constants\";\nimport { RawSha256 } from \"./RawSha256\";\nimport { Checksum, SourceData } from \"@aws-sdk/types\";\nimport { isEmptyData, convertToBuffer } from \"@aws-crypto/util\";\n\nexport class Sha256 implements Checksum {\n  private readonly secret?: SourceData;\n  private hash: RawSha256;\n  private outer?: RawSha256;\n  private error: any;\n\n  constructor(secret?: SourceData) {\n    this.secret = secret;\n    this.hash = new RawSha256();\n    this.reset();\n  }\n\n  update(toHash: SourceData): void {\n    if (isEmptyData(toHash) || this.error) {\n      return;\n    }\n\n    try {\n      this.hash.update(convertToBuffer(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  }\n\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n  digestSync(): Uint8Array {\n    if (this.error) {\n      throw this.error;\n    }\n\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n\n      return this.outer.digest();\n    }\n\n    return this.hash.digest();\n  }\n\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n  async digest(): Promise<Uint8Array> {\n    return this.digestSync();\n  }\n\n  reset(): void {\n    this.hash = new RawSha256();\n    if (this.secret) {\n      this.outer = new RawSha256();\n      const inner = bufferFromSecret(this.secret);\n      const outer = new Uint8Array(BLOCK_SIZE);\n      outer.set(inner);\n\n      for (let i = 0; i < BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n\n      this.hash.update(inner);\n      this.outer.update(outer);\n\n      // overwrite the copied key in memory\n      for (let i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  }\n}\n\nfunction bufferFromSecret(secret: SourceData): Uint8Array {\n  let input = convertToBuffer(secret);\n\n  if (input.byteLength > BLOCK_SIZE) {\n    const bufferHash = new RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n\n  const buffer = new Uint8Array(BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}\n", "import { Sha256 } from \"@aws-crypto/sha256-js\";\nimport type { ILibFaust } from \"./LibFaust\";\nimport type { FaustDspFactory, IntVector } from \"./types\";\n\nexport const ab2str = (buf: Uint8Array) => String.fromCharCode.apply(null, buf);\n\nexport const str2ab = (str: string) => {\n    const buf = new ArrayBuffer(str.length);\n    const bufView = new Uint8Array(buf);\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\n        bufView[i] = str.charCodeAt(i);\n    }\n    return bufView;\n};\nconst sha256 = async (str: string) => {\n    const sha256 = new Sha256();\n    sha256.update(str);\n    const hashArray = Array.from(await sha256.digest());\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\n    return hashHex;\n};\n\nexport interface IFaustCompiler {\n    /**\n     * Gives the Faust compiler version.\n     * @return a version string\n     */\n    version(): string;\n\n    /**\n     * Gives the last compilation error.\n     * @return an error string\n     */\n    getErrorMessage(): string;\n\n    /**\n     * Create a wasm factory from Faust code i.e. wasm compiled code, to be used to create monophonic instances. \n     * This function is running asynchronously.\n     *\n     * @param name - an arbitrary name for the Faust factory\n     * @param code - Faust dsp code\n     * @param args - the compiler options\n     * @returns returns the wasm factory\n     */\n    createMonoDSPFactory(name: string, code: string, args: string): Promise<FaustDspFactory | null>;\n\n    /**\n     * Create a wasm factory from Faust code i.e. wasm compiled code, to be used to create polyphonic instances. \n     * This function is running asynchronously.\n     *\n     * @param name - an arbitrary name for the Faust factory\n     * @param code - Faust dsp code\n     * @param args - the compiler options\n     * @returns returns the wasm factory\n     */\n    createPolyDSPFactory(name: string, code: string, args: string): Promise<FaustDspFactory | null>;\n\n    /**\n     * Delete a dsp factory.\n     *\n     * @param factory - the factory to be deleted\n     */\n    deleteDSPFactory(factory: FaustDspFactory): void;\n\n    /**\n     * Expand Faust code i.e. linearize included libraries.\n     *\n     * @param code - Faust dsp code\n     * @param args - the compiler options\n     * @returns returns the expanded dsp code\n     */\n    expandDSP(code: string, args: string): string | null;\n\n    /**\n     * Generates auxiliary files from Faust code. The output depends on the compiler options.\n     *\n     * @param name - an arbitrary name for the Faust module\n     * @param code - Faust dsp code\n     * @param args - the compiler options\n     * @returns whether the generation actually succeded\n     */\n    generateAuxFiles(name: string, code: string, args: string): boolean;\n\n    /**\n     * Delete all factories.\n     */\n    deleteAllDSPFactories(): void;\n\n    fs(): typeof FS;\n\n    getAsyncInternalMixerModule(isDouble?: boolean): Promise<{ mixerBuffer: Uint8Array; mixerModule: WebAssembly.Module }>;\n    getSyncInternalMixerModule(isDouble?: boolean): { mixerBuffer: Uint8Array; mixerModule: WebAssembly.Module };\n}\n\nclass FaustCompiler implements IFaustCompiler {\n    private fLibFaust: ILibFaust;\n    private fErrorMessage: string;\n    private static gFactories: Map<string, FaustDspFactory> = new Map<string, FaustDspFactory>();\n    private mixer32Buffer!: Uint8Array;\n    private mixer64Buffer!: Uint8Array;\n    private mixer32Module!: WebAssembly.Module;\n    private mixer64Module!: WebAssembly.Module;\n\n    /**\n     * Get a stringified DSP factories table\n     */\n    static serializeDSPFactories() {\n        const table: Record<string, { code: string, json: any; poly: boolean }> = {};\n        this.gFactories.forEach((factory, shaKey) => {\n            const { code, json, poly } = factory;\n            table[shaKey] = { code: btoa(ab2str(code)), json: JSON.parse(json), poly };\n        });\n        return table;\n    }\n    /**\n     * Get a stringified DSP factories table as string\n     */\n    static stringifyDSPFactories() {\n        return JSON.stringify(this.serializeDSPFactories());\n    }\n    /**\n     * Import a DSP factories table\n     */\n    static deserializeDSPFactories(table: Record<string, { code: string, json: any; poly: boolean }>) {\n        const awaited: Promise<Map<string, FaustDspFactory>>[] = [];\n        for (const shaKey in table) {\n            const factory = table[shaKey];\n            const { code, json, poly } = factory;\n            const ab = str2ab(atob(code))\n            awaited.push(WebAssembly.compile(ab).then(module => this.gFactories.set(shaKey, { shaKey, cfactory: 0, code: ab, module, json: JSON.stringify(json), poly, soundfiles: {} })));\n        }\n        return Promise.all(awaited);\n    }\n    /**\n     * Import a stringified DSP factories table\n     */\n    static importDSPFactories(tableStr: string) {\n        const table: Record<string, { code: string, json: any; poly: boolean }> = JSON.parse(tableStr);\n        return this.deserializeDSPFactories(table);\n    }\n    constructor(libFaust: ILibFaust) {\n        this.fLibFaust = libFaust;\n        this.fErrorMessage = \"\";\n    }\n    private intVec2intArray(vec: IntVector) {\n        const size = vec.size();\n        const ui8Code = new Uint8Array(size);\n        for (let i = 0; i < size; i++) {\n            ui8Code[i] = vec.get(i);\n        }\n        return ui8Code;\n    }\n    private async createDSPFactory(name: string, code: string, args: string, poly: boolean) {\n        // Cleanup the cache\n        if (FaustCompiler.gFactories.size > 10) {\n            FaustCompiler.gFactories.clear();\n        }\n\n        // If code is already compiled, return the cached factory\n        let shaKey = await sha256(name + code + args + (poly ? \"poly\" : \"mono\"));\n        if (FaustCompiler.gFactories.has(shaKey)) {\n            return FaustCompiler.gFactories.get(shaKey) || null;\n        } else {\n            try {\n                // Can possibly raise a C++ exception catched by the second catch()\n                const faustDspWasm = this.fLibFaust.createDSPFactory(name, code, args, !poly);\n                const ui8Code = this.intVec2intArray(faustDspWasm.data);\n                faustDspWasm.data.delete();\n                const module = await WebAssembly.compile(ui8Code);\n                const factory: FaustDspFactory = { shaKey, cfactory: faustDspWasm.cfactory, code: ui8Code, module, json: faustDspWasm.json, poly, soundfiles: {} };\n                // Factory C++ side can be deallocated immediately\n                this.deleteDSPFactory(factory);\n                // Keep the compiled factory in the cache\n                FaustCompiler.gFactories.set(shaKey, factory);\n                return factory;\n            } catch (e) {\n                this.fErrorMessage = this.fLibFaust.getErrorAfterException();\n                // console.error(`=> exception raised while running createDSPFactory: ${this.fErrorMessage}`, e);\n                this.fLibFaust.cleanupAfterException();\n                throw this.fErrorMessage ? new Error(this.fErrorMessage) : e;\n            }\n        }\n    }\n    version() {\n        return this.fLibFaust.version();\n    }\n    getErrorMessage() {\n        return this.fErrorMessage;\n    }\n    async createMonoDSPFactory(name: string, code: string, args: string) {\n        return this.createDSPFactory(name, code, args, false);\n    }\n    async createPolyDSPFactory(name: string, code: string, args: string) {\n        return this.createDSPFactory(name, code, args, true);\n    }\n    deleteDSPFactory(factory: FaustDspFactory) {\n        this.fLibFaust.deleteDSPFactory(factory.cfactory);\n        factory.cfactory = 0;\n    }\n    expandDSP(code: string, args: string) {\n        try {\n            return this.fLibFaust.expandDSP(\"FaustDSP\", code, args);\n        } catch (e) {\n            this.fErrorMessage = this.fLibFaust.getErrorAfterException();\n            // console.error(`=> exception raised while running expandDSP: ${this.fErrorMessage}`);\n            this.fLibFaust.cleanupAfterException();\n            throw this.fErrorMessage ? new Error(this.fErrorMessage) : e;\n        }\n    }\n    generateAuxFiles(name: string, code: string, args: string) {\n        try {\n            return this.fLibFaust.generateAuxFiles(name, code, args);\n        } catch (e) {\n            this.fErrorMessage = this.fLibFaust.getErrorAfterException();\n            // console.error(`=> exception raised while running generateAuxFiles: ${this.fErrorMessage}`);\n            this.fLibFaust.cleanupAfterException();\n            throw this.fErrorMessage ? new Error(this.fErrorMessage) : e;\n        }\n    }\n    deleteAllDSPFactories(): void {\n        this.fLibFaust.deleteAllDSPFactories();\n    }\n    fs() {\n        return this.fLibFaust.fs();\n    }\n    async getAsyncInternalMixerModule(isDouble = false) {\n        const bufferKey = isDouble ? \"mixer64Buffer\" : \"mixer32Buffer\";\n        const moduleKey = isDouble ? \"mixer64Module\" : \"mixer32Module\";\n        if (this[moduleKey]) return { mixerBuffer: this[bufferKey], mixerModule: this[moduleKey] };\n        const path = isDouble ? \"/usr/rsrc/mixer64.wasm\" : \"/usr/rsrc/mixer32.wasm\";\n        const mixerBuffer = this.fs().readFile(path, { encoding: \"binary\" });\n        this[bufferKey] = mixerBuffer;\n        // Compile mixer\n        const mixerModule = await WebAssembly.compile(mixerBuffer);\n        this[moduleKey] = mixerModule;\n        return { mixerBuffer, mixerModule };\n    }\n    getSyncInternalMixerModule(isDouble = false) {\n        const bufferKey = isDouble ? \"mixer64Buffer\" : \"mixer32Buffer\";\n        const moduleKey = isDouble ? \"mixer64Module\" : \"mixer32Module\";\n        if (this[moduleKey]) return { mixerBuffer: this[bufferKey], mixerModule: this[moduleKey] };\n        const path = isDouble ? \"/usr/rsrc/mixer64.wasm\" : \"/usr/rsrc/mixer32.wasm\";\n        const mixerBuffer = this.fs().readFile(path, { encoding: \"binary\" });\n        this[bufferKey] = mixerBuffer;\n        // Compile mixer\n        const mixerModule = new WebAssembly.Module(mixerBuffer);\n        this[moduleKey] = mixerModule;\n        return { mixerBuffer, mixerModule };\n    }\n}\n\nexport default FaustCompiler;\n", "/**\n * The Faust wasm instance interface.\n */\nexport interface IFaustDspInstance {\n    /**\n     * The dsp computation, to be called with successive input/output audio buffers.\n     *\n     * @param $dsp - the DSP pointer\n     * @param count - the audio buffer size in frames\n     * @param $inputs - the input audio buffer as in index in wasm memory\n     * @param $output - the output audio buffer as in index in wasm memory\n     */\n    compute($dsp: number, count: number, $inputs: number, $output: number): void;\n\n    /**\n     * Give the number of inputs of a Faust wasm instance.\n     * \n     * @param $dsp - the DSP pointer\n     */\n    getNumInputs($dsp: number): number;\n\n    /**\n     * Give the number of outputs of a Faust wasm instance.\n     * \n     * @param $dsp - the DSP pointer\n     */\n    getNumOutputs($dsp: number): number;\n\n    /**\n     * Give a parameter current value.\n     * \n     * @param $dsp - the DSP pointer\n     * @param index - the parameter index\n     * @return the parameter value\n     */\n    getParamValue($dsp: number, index: number): number;\n\n    /**\n     * Give the Faust wasm instance sample rate.\n     * \n     * @param $dsp - the DSP pointer\n     * @return the sample rate\n     */\n    getSampleRate($dsp: number): number;\n\n    /**\n     * Global init, calls the following methods:\n     * - static class 'classInit': static tables initialization\n     * - 'instanceInit': constants and instance state initialization\n     *\n     * @param $dsp - the DSP pointer\n     * @param sampleRate - the sampling rate in Hertz\n     */\n    init($dsp: number, sampleRate: number): void;\n\n    /** Init instance state (delay lines...).\n     * \n     * @param $dsp - the DSP pointer\n     */\n    instanceClear($dsp: number): void;\n\n    /** Init instance constant state.\n     * \n     * @param $dsp - the DSP pointer\n     * @param sampleRate - the sampling rate in Hertz\n     */\n    instanceConstants($dsp: number, sampleRate: number): void;\n\n    /** Init instance state.\n     * \n     * @param $dsp - the DSP pointer\n     * @param sampleRate - the sampling rate in Hertz\n     */\n    instanceInit($dsp: number, sampleRate: number): void;\n\n    /** Init default control parameters values.\n     * \n     * @param $dsp - the DSP pointer\n     */\n    instanceResetUserInterface($dsp: number): void;\n\n    /**\n     * Set a parameter current value.\n     * \n     * @param $dsp - the DSP pointer\n     * @param index - the parameter index\n     * @param value - the parameter value\n     */\n    setParamValue($dsp: number, index: number, value: number): void;\n}\n\n/**\n * Mixer used in polyphonic mode.\n */\nexport interface IFaustMixerInstance {\n    clearOutput(bufferSize: number, chans: number, $outputs: number): void;\n    mixCheckVoice(bufferSize: number, chans: number, $inputs: number, $outputs: number): number;\n    fadeOut(bufferSize: number, chans: number, $outputs: number): void;\n}\n\n/**\n * Monophonic instance.\n */\nexport interface FaustMonoDspInstance {\n    memory: WebAssembly.Memory;\n    api: IFaustDspInstance;\n    json: string;\n}\n\n/**\n * Polyphonic instance.\n */\nexport interface FaustPolyDspInstance {\n    memory: WebAssembly.Memory;\n    voices: number;\n    voiceAPI: IFaustDspInstance;\n    effectAPI?: IFaustDspInstance;\n    mixerAPI: IFaustMixerInstance;\n    voiceJSON: string;\n    effectJSON?: string;\n}\n\nexport class FaustDspInstance implements IFaustDspInstance {\n    private readonly fExports: IFaustDspInstance;\n\n    constructor(exports: IFaustDspInstance) { this.fExports = exports; }\n\n    compute($dsp: number, count: number, $input: number, $output: number) { this.fExports.compute($dsp, count, $input, $output); }\n    getNumInputs($dsp: number) { return this.fExports.getNumInputs($dsp); }\n    getNumOutputs($dsp: number) { return this.fExports.getNumOutputs($dsp); }\n    getParamValue($dsp: number, index: number) { return this.fExports.getParamValue($dsp, index); }\n    getSampleRate($dsp: number) { return this.fExports.getSampleRate($dsp); }\n    init($dsp: number, sampleRate: number) { this.fExports.init($dsp, sampleRate); }\n    instanceClear($dsp: number) { this.fExports.instanceClear($dsp); }\n    instanceConstants($dsp: number, sampleRate: number) { this.fExports.instanceConstants($dsp, sampleRate); }\n    instanceInit($dsp: number, sampleRate: number) { this.fExports.instanceInit($dsp, sampleRate); }\n    instanceResetUserInterface($dsp: number) { this.fExports.instanceResetUserInterface($dsp); }\n    setParamValue($dsp: number, index: number, value: number) { this.fExports.setParamValue($dsp, index, value); }\n}\n", "import { FaustDspInstance, FaustMonoDspInstance, FaustPolyDspInstance, IFaustDspInstance, IFaustMixerInstance } from \"./FaustDspInstance\";\nimport type { FaustDspFactory, FaustDspMeta, LooseFaustDspFactory } from \"./types\";\n\nclass FaustWasmInstantiator {\n    private static createWasmImport(memory?: WebAssembly.Memory) {\n        return {\n            env: {\n                memory: memory || new WebAssembly.Memory({ initial: 100 }),\n                memoryBase: 0,\n                tableBase: 0,\n                // Integer version\n                _abs: Math.abs,\n                // Float version\n                _acosf: Math.acos, _asinf: Math.asin, _atanf: Math.atan, _atan2f: Math.atan2,\n                _ceilf: Math.ceil, _cosf: Math.cos, _expf: Math.exp, _floorf: Math.floor,\n                _fmodf: (x: number, y: number) => x % y,\n                _logf: Math.log, _log10f: Math.log10, _max_f: Math.max, _min_f: Math.min,\n                _remainderf: (x: number, y: number) => x - Math.round(x / y) * y,\n                _powf: Math.pow, _roundf: Math.round, _sinf: Math.sin, _sqrtf: Math.sqrt, _tanf: Math.tan,\n                _acoshf: Math.acosh, _asinhf: Math.asinh, _atanhf: Math.atanh,\n                _coshf: Math.cosh, _sinhf: Math.sinh, _tanhf: Math.tanh,\n                _isnanf: Number.isNaN, _isinff: (x: number) => !isFinite(x),\n                _copysignf: (x: number, y: number) => (Math.sign(x) === Math.sign(y) ? x : -x),\n\n                // Double version\n                _acos: Math.acos, _asin: Math.asin, _atan: Math.atan, _atan2: Math.atan2,\n                _ceil: Math.ceil, _cos: Math.cos, _exp: Math.exp, _floor: Math.floor,\n                _fmod: (x: number, y: number) => x % y,\n                _log: Math.log, _log10: Math.log10, _max_: Math.max, _min_: Math.min,\n                _remainder: (x: number, y: number) => x - Math.round(x / y) * y,\n                _pow: Math.pow, _round: Math.round, _sin: Math.sin, _sqrt: Math.sqrt, _tan: Math.tan,\n                _acosh: Math.acosh, _asinh: Math.asinh, _atanh: Math.atanh,\n                _cosh: Math.cosh, _sinh: Math.sinh, _tanh: Math.tanh,\n                _isnan: Number.isNaN, _isinf: (x: number) => !isFinite(x),\n                _copysign: (x: number, y: number) => (Math.sign(x) === Math.sign(y) ? x : -x),\n\n                table: new WebAssembly.Table({ initial: 0, element: \"anyfunc\" })\n            }\n        };\n    }\n    private static createWasmMemoryPoly(voicesIn: number, sampleSize: number, dspMeta: FaustDspMeta, effectMeta: FaustDspMeta, bufferSize: number) {\n        // Hack : at least 4 voices (to avoid weird wasm memory bug?)\n        const voices = Math.max(4, voicesIn);\n        // Memory allocator\n        const ptrSize = sampleSize; // Done on wast/wasm backend side\n        const pow2limit = (x: number) => {\n            let n = 65536; // Minimum = 64 kB\n            while (n < x) { n *= 2; }\n            return n;\n        };\n        const effectSize = effectMeta ? effectMeta.size : 0;\n        let memorySize = pow2limit(\n            effectSize\n            + dspMeta.size * voices\n            + (dspMeta.inputs + dspMeta.outputs * 2)  // + 2 for effect\n            * (ptrSize + bufferSize * sampleSize)\n        ) / 65536;\n        memorySize = Math.max(2, memorySize); // At least 2\n        return new WebAssembly.Memory({ initial: memorySize });\n    };\n\n    private static createWasmMemoryMono(sampleSize: number, dspMeta: FaustDspMeta, bufferSize: number) {\n        // Memory allocator\n        const ptrSize = sampleSize; // Done on wast/wasm backend side\n        const memorySize = (dspMeta.size + (dspMeta.inputs + dspMeta.outputs) * (ptrSize + bufferSize * sampleSize)) / 65536;\n        return new WebAssembly.Memory({ initial: memorySize * 2 }); // Safer to have a bit more memory\n    }\n\n    private static createMonoDSPInstanceAux(instance: WebAssembly.Instance, json: string, mem: WebAssembly.Memory | null = null) {\n        const functions = instance.exports as IFaustDspInstance & WebAssembly.Exports;\n        const api = new FaustDspInstance(functions);\n        const memory: any = (mem) ? mem : instance.exports.memory;\n        return { memory, api, json } as FaustMonoDspInstance;\n    }\n\n    private static createMemoryMono(monoFactory: LooseFaustDspFactory) {\n        // Parse JSON to get 'size' and 'inputs/outputs' infos\n        const monoMeta: FaustDspMeta = JSON.parse(monoFactory.json);\n        const sampleSize = monoMeta.compile_options.match(\"-double\") ? 8 : 4;\n        return this.createWasmMemoryMono(sampleSize, monoMeta, 8192);\n\n    }\n    private static createMemoryPoly(voices: number, voiceFactory: LooseFaustDspFactory, effectFactory?: LooseFaustDspFactory) {\n        // Parse JSON to get 'size' and 'inputs/outputs' infos\n        const voiceMeta: FaustDspMeta = JSON.parse(voiceFactory.json);\n        const effectMeta: FaustDspMeta = (effectFactory && effectFactory.json) ? JSON.parse(effectFactory.json) : null;\n        const sampleSize = voiceMeta.compile_options.match(\"-double\") ? 8 : 4;\n        // Memory will be shared by voice, mixer and (possibly) effect instances\n        return this.createWasmMemoryPoly(voices, sampleSize, voiceMeta, effectMeta, 8192);\n    }\n\n    private static createMixerAux(mixerModule: WebAssembly.Module, memory: WebAssembly.Memory) {\n        // Create mixer instance\n        const mixerImport = {\n            imports: { print: console.log },\n            memory: { memory }\n        };\n        const mixerInstance = new WebAssembly.Instance(mixerModule, mixerImport);\n        const mixerFunctions = mixerInstance.exports as IFaustMixerInstance & WebAssembly.Exports;\n        return mixerFunctions;\n    }\n\n    // Public API\n    static async loadDSPFactory(wasmPath: string, jsonPath: string) {\n        const wasmFile = await fetch(wasmPath);\n        if (!wasmFile.ok) {\n            throw new Error(`=> exception raised while running loadDSPFactory, file not found: ${wasmPath}`);\n        }\n        try {\n            const wasmBuffer = await wasmFile.arrayBuffer();\n            const module = await WebAssembly.compile(wasmBuffer);\n            const jsonFile = await fetch(jsonPath);\n            const json = await jsonFile.text();\n            const meta: FaustDspMeta = JSON.parse(json);\n            const cOptions = meta.compile_options;\n            const poly = cOptions.indexOf('wasm-e') !== -1;\n            return { cfactory: 0, code: new Uint8Array(wasmBuffer), module, json, poly } as FaustDspFactory;\n        } catch (e) {\n            // console.error(`=> exception raised while running loadDSPFactory: ${e}`);\n            throw e;\n        }\n    }\n\n    static async loadDSPMixer(mixerPath: string, fs?: typeof FS) {\n        try {\n            let mixerBuffer = null;\n            if (fs) {\n                mixerBuffer = fs.readFile(mixerPath, { encoding: \"binary\" });\n            } else {\n                const mixerFile = await fetch(mixerPath);\n                mixerBuffer = await mixerFile.arrayBuffer();\n            }\n            // Compile mixer\n            return WebAssembly.compile(mixerBuffer);\n        } catch (e) {\n            // console.error(`=> exception raised while running loadMixer: ${e}`);\n            throw e;\n        }\n    }\n\n    static async createAsyncMonoDSPInstance(factory: LooseFaustDspFactory) {\n\n        // Regular expression to match the 'type: soundfile' pattern\n        const pattern = /\"type\":\\s*\"soundfile\"/;\n        // Check if the pattern exists in the JSON string\n        const isDetected = pattern.test(factory.json);\n\n        if (isDetected) {\n            const memory = this.createMemoryMono(factory);\n            const instance = await WebAssembly.instantiate(factory.module, this.createWasmImport(memory));\n            return this.createMonoDSPInstanceAux(instance, factory.json, memory);\n        } else {\n            // Otherwise, we can create the instance using the wasm internal memory allocated by the wasm module\n            const instance = await WebAssembly.instantiate(factory.module, this.createWasmImport());\n            return this.createMonoDSPInstanceAux(instance, factory.json);\n        }\n    }\n\n    static createSyncMonoDSPInstance(factory: LooseFaustDspFactory) {\n\n        // Regular expression to match the 'type: soundfile' pattern\n        const pattern = /\"type\":\\s*\"soundfile\"/;\n        // Check if the pattern exists in the JSON string\n        const isDetected = pattern.test(factory.json);\n\n        // If the JSON contains a soundfile UI element, we need to create a memory object\n        if (isDetected) {\n            const memory = this.createMemoryMono(factory);\n            const instance = new WebAssembly.Instance(factory.module, this.createWasmImport(memory));\n            return this.createMonoDSPInstanceAux(instance, factory.json, memory);\n        } else {\n            // Otherwise, we can create the instance using the wasm internal memory allocated by the wasm module\n            const instance = new WebAssembly.Instance(factory.module, this.createWasmImport());\n            return this.createMonoDSPInstanceAux(instance, factory.json);\n        }\n    }\n\n    static async createAsyncPolyDSPInstance(voiceFactory: LooseFaustDspFactory, mixerModule: WebAssembly.Module, voices: number, effectFactory?: LooseFaustDspFactory): Promise<FaustPolyDspInstance> {\n        const memory = this.createMemoryPoly(voices, voiceFactory, effectFactory);\n        // Create voice \n        const voiceInstance = await WebAssembly.instantiate(voiceFactory.module, this.createWasmImport(memory));\n        const voiceFunctions = voiceInstance.exports as IFaustDspInstance & WebAssembly.Exports;\n        const voiceAPI = new FaustDspInstance(voiceFunctions);\n        // Create mixer\n        const mixerAPI = this.createMixerAux(mixerModule, memory);\n\n        // Possibly create effect instance \n        if (effectFactory) {\n            const effectInstance = await WebAssembly.instantiate(effectFactory.module, this.createWasmImport(memory));\n            const effectFunctions = effectInstance.exports as IFaustDspInstance & WebAssembly.Exports;\n            const effectAPI = new FaustDspInstance(effectFunctions);\n            return {\n                memory,\n                voices,\n                voiceAPI,\n                effectAPI,\n                mixerAPI,\n                voiceJSON: voiceFactory.json,\n                effectJSON: effectFactory.json\n            } as FaustPolyDspInstance;\n        } else {\n            return {\n                memory,\n                voices,\n                voiceAPI,\n                mixerAPI,\n                voiceJSON: voiceFactory.json\n            } as FaustPolyDspInstance;\n        }\n    }\n\n    static createSyncPolyDSPInstance(voiceFactory: LooseFaustDspFactory, mixerModule: WebAssembly.Module, voices: number, effectFactory?: LooseFaustDspFactory): FaustPolyDspInstance {\n        const memory = this.createMemoryPoly(voices, voiceFactory, effectFactory);\n        // Create voice \n        const voiceInstance = new WebAssembly.Instance(voiceFactory.module, this.createWasmImport(memory));\n        const voiceFunctions = voiceInstance.exports as IFaustDspInstance & WebAssembly.Exports;\n        const voiceAPI = new FaustDspInstance(voiceFunctions);\n        // Create mixer\n        const mixerAPI = this.createMixerAux(mixerModule, memory);\n\n        // Possibly create effect instance \n        if (effectFactory) {\n            const effectInstance = new WebAssembly.Instance(effectFactory.module, this.createWasmImport(memory));\n            const effectFunctions = effectInstance.exports as IFaustDspInstance & WebAssembly.Exports;\n            const effectAPI = new FaustDspInstance(effectFunctions);\n            return {\n                memory,\n                voices,\n                voiceAPI,\n                effectAPI,\n                mixerAPI,\n                voiceJSON: voiceFactory.json,\n                effectJSON: effectFactory.json\n            } as FaustPolyDspInstance;\n        } else {\n            return {\n                memory,\n                voices,\n                voiceAPI,\n                mixerAPI,\n                voiceJSON: voiceFactory.json\n            } as FaustPolyDspInstance;\n        }\n    }\n}\n\nexport default FaustWasmInstantiator;\n", "\uFEFFexport interface AccParams {\n    isEnabled: boolean;\n    acc: string;\n    address: string;\n    min: number;\n    max: number;\n    init: number;\n    label: string;\n}\n\n/** Enum describing the axis of the accelerometer or gyroscope */\nexport enum Axis { x, y, z }\n\n/** Enum describing the curve of the accelerometer */\nexport enum Curve { Up, Down, UpDown, DownUp }\n\n/** Object describing value off accelerometer metadata values */\nclass AccMeta {\n    axis: Axis;\n    curve: Curve;\n    amin: number;\n    amid: number;\n    amax: number;\n}\n\ninterface Range {\n    fLo: number;\n    fHi: number;\n    clip(x: number): number;\n}\n\ninterface InterpolateObject {\n    amin: number;\n    amax: number;\n}\ninterface Interpolator {\n    fRange: Range;\n    fCoef: number;\n    fOffset: number;\n    returnMappedValue(v: number): number;\n    getLowHigh(amin: number, amax: number): InterpolateObject;\n}\n\ninterface InterpolateObject3pt {\n    amin: number;\n    amid: number;\n    amax: number;\n}\ninterface Interpolator3pt {\n    fSegment1: Interpolator;\n    fSegment2: Interpolator;\n    fMid: number;\n    returnMappedValue(v: number): number;\n    getMappingValues(amin: number, amid: number, amax: number): InterpolateObject3pt;\n}\n\n/**\n * ValueConverter interface\n */\ninterface ValueConverter {\n    uiToFaust(x: number): number;\n    faustToUi(x: number): number;\n}\n\n/**\n * UpdatableValueConverter interface\n */\nexport interface UpdatableValueConverter extends ValueConverter {\n    fActive: boolean;\n\n    setMappingValues(amin: number, amid: number, amax: number, min: number, init: number, max: number): void;\n    getMappingValues(amin: number, amid: number, amax: number): InterpolateObject3pt;\n\n    setActive(onOff: boolean): void;\n    getActive(): boolean;\n}\n\nexport default class FaustSensors {\n    /**\n     * Function to convert a number to an axis type\n     * \n     * @param value number\n     * @returns axis type\n     */\n    static convertToAxis(value: number): Axis {\n        switch (value) {\n            case 0:\n                return Axis.x;\n            case 1:\n                return Axis.y;\n            case 2:\n                return Axis.z;\n            default:\n                console.error(\"Error: Axis not found value: \" + value);\n                return Axis.x;\n        }\n    }\n    /**\n     * Function to convert a number to a curve type\n     * \n     * @param value number\n     * @returns curve type\n     */\n    static convertToCurve(value: number): Curve {\n        switch (value) {\n            case 0:\n                return Curve.Up;\n            case 1:\n                return Curve.Down;\n            case 2:\n                return Curve.UpDown;\n            case 3:\n                return Curve.DownUp;\n            default:\n                console.error(\"Error: Curve not found value: \" + value);\n                return Curve.Up;\n        }\n    }\n\n    // Converter objects use to map acc and Faust value\n    static _Range: new (x: number, y: number) => Range;\n    static get Range() {\n        if (!this._Range) {\n            this._Range = class {\n                fLo: number;\n                fHi: number;\n\n                constructor(x: number, y: number) {\n                    this.fLo = Math.min(x, y);\n                    this.fHi = Math.max(x, y);\n                }\n\n                clip(x: number): number {\n                    if (x < this.fLo) return this.fLo;\n                    if (x > this.fHi) return this.fHi;\n                    return x;\n                }\n            };\n        }\n        return this._Range;\n    }\n\n    static _Interpolator: new (lo: number, hi: number, v1: number, v2: number) => Interpolator;\n    /**\n     * Interpolator class\n     */\n    static get Interpolator() {\n        if (!this._Interpolator) {\n            this._Interpolator = class {\n                fRange: Range;\n                fCoef: number;\n                fOffset: number;\n\n                constructor(lo: number, hi: number, v1: number, v2: number) {\n                    this.fRange = new FaustSensors.Range(lo, hi);\n                    if (hi !== lo) {\n                        // regular case\n                        this.fCoef = (v2 - v1) / (hi - lo);\n                        this.fOffset = v1 - lo * this.fCoef;\n                    } else {\n                        // degenerate case, avoids division by zero\n                        this.fCoef = 0;\n                        this.fOffset = (v1 + v2) / 2;\n                    }\n                }\n                returnMappedValue(v: number): number {\n                    var x = this.fRange.clip(v);\n                    return this.fOffset + x * this.fCoef;\n                }\n                getLowHigh(amin: number, amax: number): InterpolateObject {\n                    return { amin: this.fRange.fLo, amax: this.fRange.fHi };\n                }\n            };\n        }\n        return this._Interpolator;\n    }\n\n    static _Interpolator3pt: new (lo: number, mid: number, hi: number, v1: number, vMid: number, v2: number) => Interpolator3pt;\n    /**\n     * Interpolator3pt class, combine two interpolators\n     */\n    static get Interpolator3pt() {\n        if (!this._Interpolator3pt) {\n            this._Interpolator3pt = class {\n\n                fSegment1: Interpolator;\n                fSegment2: Interpolator;\n                fMid: number;\n\n                constructor(lo: number, mid: number, hi: number, v1: number, vMid: number, v2: number) {\n                    this.fSegment1 = new FaustSensors.Interpolator(lo, mid, v1, vMid);\n                    this.fSegment2 = new FaustSensors.Interpolator(mid, hi, vMid, v2);\n                    this.fMid = mid;\n                }\n                returnMappedValue(x: number): number {\n                    return (x < this.fMid) ? this.fSegment1.returnMappedValue(x) : this.fSegment2.returnMappedValue(x);\n                }\n\n                getMappingValues(amin: number, amid: number, amax: number): InterpolateObject3pt {\n                    var lowHighSegment1 = this.fSegment1.getLowHigh(amin, amid);\n                    var lowHighSegment2 = this.fSegment2.getLowHigh(amid, amax);\n                    return { amin: lowHighSegment1.amin, amid: lowHighSegment2.amin, amax: lowHighSegment2.amax };\n                }\n            }\n\n        }\n        return this._Interpolator3pt;\n    }\n    static _UpConverter: new (amin: number, amid: number, amax: number, fmin: number, fmid: number, fmax: number) => UpdatableValueConverter;\n    /**\n     * UpConverter class, convert accelerometer value to Faust value\n     */\n    static get UpConverter() {\n        if (!this._UpConverter) {\n            this._UpConverter = class implements UpdatableValueConverter {\n\n                fA2F: Interpolator3pt;\n                fF2A: Interpolator3pt;\n                fActive: boolean = true;\n\n                constructor(amin: number, amid: number, amax: number, fmin: number, fmid: number, fmax: number) {\n                    this.fA2F = new FaustSensors.Interpolator3pt(amin, amid, amax, fmin, fmid, fmax);\n                    this.fF2A = new FaustSensors.Interpolator3pt(fmin, fmid, fmax, amin, amid, amax);\n                }\n\n                uiToFaust(x: number) { return this.fA2F.returnMappedValue(x) }\n                faustToUi(x: number) { return this.fF2A.returnMappedValue(x) }\n\n                setMappingValues(amin: number, amid: number, amax: number, min: number, init: number, max: number): void {\n                    this.fA2F = new FaustSensors.Interpolator3pt(amin, amid, amax, min, init, max);\n                    this.fF2A = new FaustSensors.Interpolator3pt(min, init, max, amin, amid, amax);\n                }\n\n                getMappingValues(amin: number, amid: number, amax: number): InterpolateObject3pt {\n                    return this.fA2F.getMappingValues(amin, amid, amax);\n                }\n\n                setActive(onOff: boolean): void { this.fActive = onOff }\n                getActive(): boolean { return this.fActive }\n            }\n\n        }\n        return this._UpConverter;\n    }\n    static _DownConverter: new (amin: number, amid: number, amax: number, fmin: number, fmid: number, fmax: number) => UpdatableValueConverter;\n    /**\n     * DownConverter class, convert accelerometer value to Faust value\n     */\n    static get DownConverter() {\n        if (!this._DownConverter) {\n            this._DownConverter = class implements UpdatableValueConverter {\n\n                fA2F: Interpolator3pt;\n                fF2A: Interpolator3pt;\n                fActive: boolean = true;\n\n                constructor(amin: number, amid: number, amax: number, fmin: number, fmid: number, fmax: number) {\n                    this.fA2F = new FaustSensors.Interpolator3pt(amin, amid, amax, fmax, fmid, fmin);\n                    this.fF2A = new FaustSensors.Interpolator3pt(fmin, fmid, fmax, amax, amid, amin);\n                }\n\n                uiToFaust(x: number) { return this.fA2F.returnMappedValue(x) }\n                faustToUi(x: number) { return this.fF2A.returnMappedValue(x) }\n\n                setMappingValues(amin: number, amid: number, amax: number, min: number, init: number, max: number): void {\n                    this.fA2F = new FaustSensors.Interpolator3pt(amin, amid, amax, max, init, min);\n                    this.fF2A = new FaustSensors.Interpolator3pt(min, init, max, amax, amid, amin);\n                }\n                getMappingValues(amin: number, amid: number, amax: number): InterpolateObject3pt {\n                    return this.fA2F.getMappingValues(amin, amid, amax);\n                }\n\n                setActive(onOff: boolean): void { this.fActive = onOff }\n                getActive(): boolean { return this.fActive }\n            }\n\n        }\n        return this._DownConverter;\n    }\n    static _UpDownConverter: new (amin: number, amid: number, amax: number, fmin: number, fmid: number, fmax: number) => UpdatableValueConverter;\n    /**\n     * UpDownConverter class, convert accelerometer value to Faust value\n     */\n    static get UpDownConverter() {\n        if (!this._UpDownConverter) {\n            this._UpDownConverter = class implements UpdatableValueConverter {\n\n                fA2F: Interpolator3pt;\n                fF2A: Interpolator;\n                fActive: boolean = true;\n\n                constructor(amin: number, amid: number, amax: number, fmin: number, fmid: number, fmax: number) {\n                    this.fA2F = new FaustSensors.Interpolator3pt(amin, amid, amax, fmin, fmax, fmin);\n                    this.fF2A = new FaustSensors.Interpolator(fmin, fmax, amin, amax);\n                }\n\n                uiToFaust(x: number) { return this.fA2F.returnMappedValue(x) }\n                faustToUi(x: number) { return this.fF2A.returnMappedValue(x) }\n\n                setMappingValues(amin: number, amid: number, amax: number, min: number, init: number, max: number): void {\n                    this.fA2F = new FaustSensors.Interpolator3pt(amin, amid, amax, min, max, min);\n                    this.fF2A = new FaustSensors.Interpolator(min, max, amin, amax);\n                }\n                getMappingValues(amin: number, amid: number, amax: number): InterpolateObject3pt {\n                    return this.fA2F.getMappingValues(amin, amid, amax);\n                }\n\n                setActive(onOff: boolean): void { this.fActive = onOff }\n                getActive(): boolean { return this.fActive }\n            }\n\n        }\n        return this._UpDownConverter;\n    }\n    /**\n     * DownUpConverter class, convert accelerometer value to Faust value\n     */\n    static _DownUpConverter: new (amin: number, amid: number, amax: number, fmin: number, fmid: number, fmax: number) => UpdatableValueConverter;\n    static get DownUpConverter() {\n        if (!this._DownUpConverter) {\n            this._DownUpConverter = class implements UpdatableValueConverter {\n\n                fA2F: Interpolator3pt;\n                fF2A: Interpolator;\n                fActive: boolean = true;\n\n                constructor(amin: number, amid: number, amax: number, fmin: number, fmid: number, fmax: number) {\n                    this.fA2F = new FaustSensors.Interpolator3pt(amin, amid, amax, fmax, fmin, fmax);\n                    this.fF2A = new FaustSensors.Interpolator(fmin, fmax, amin, amax);\n                }\n\n                uiToFaust(x: number) { return this.fA2F.returnMappedValue(x) }\n                faustToUi(x: number) { return this.fF2A.returnMappedValue(x) }\n\n                setMappingValues(amin: number, amid: number, amax: number, min: number, init: number, max: number): void {\n                    this.fA2F = new FaustSensors.Interpolator3pt(amin, amid, amax, max, min, max);\n                    this.fF2A = new FaustSensors.Interpolator(min, max, amin, amax);\n                }\n                getMappingValues(amin: number, amid: number, amax: number): InterpolateObject3pt {\n                    return this.fA2F.getMappingValues(amin, amid, amax);\n                }\n\n                setActive(onOff: boolean): void { this.fActive = onOff }\n                getActive(): boolean { return this.fActive }\n            }\n        }\n        return this._DownUpConverter;\n    }\n    /**\n     * Public function to build the accelerometer handler\n     *\n     * @returns `UpdatableValueConverter` built for the given curve\n     */\n    static buildHandler(curve: Curve, amin: number, amid: number, amax: number, min: number, init: number, max: number): UpdatableValueConverter {\n        switch (curve) {\n            case Curve.Up:\n                return new FaustSensors.UpConverter(amin, amid, amax, min, init, max);\n            case Curve.Down:\n                return new FaustSensors.DownConverter(amin, amid, amax, min, init, max);\n            case Curve.UpDown:\n                return new FaustSensors.UpDownConverter(amin, amid, amax, min, init, max);\n            case Curve.DownUp:\n                return new FaustSensors.DownUpConverter(amin, amid, amax, min, init, max);\n            default:\n                return new FaustSensors.UpConverter(amin, amid, amax, min, init, max);\n        }\n    }\n}\n", "import type { FaustMonoDspInstance, FaustPolyDspInstance, IFaustDspInstance } from \"./FaustDspInstance\";\nimport type { AudioData, FaustDspMeta, FaustUIDescriptor, FaustUIGroup, FaustUIInputItem, FaustUIItem, LooseFaustDspFactory } from \"./types\";\nimport FaustSensors, { Axis, Curve, UpdatableValueConverter } from \"./FaustSensors\";\n\n// Public API\nexport type OutputParamHandler = (path: string, value: number) => void;\nexport type ComputeHandler = (buffer_size: number) => void;\nexport type PlotHandler = (plotted: Float32Array[] | Float64Array[], index: number, events?: { type: string; data: any }[]) => void;\nexport type MetadataHandler = (key: string, value: string) => void;\n\n// Implementation API\nexport type UIHandler = (item: FaustUIItem) => void;\n\n// Accelerometer or gyroscope handler\nexport type SensorEventHandler = (val: number) => void;\n\n// Define a type for the accelerometer or gyroscope handlers\nexport type SensorEventHandlers = {\n    x: SensorEventHandler[];\n    y: SensorEventHandler[];\n    z: SensorEventHandler[];\n};\n\n/** Definition of the AudioBufferItem type */\nexport interface AudioBufferItem {\n    pathName: string;\n    audioBuffer: AudioBuffer;\n};\n\n/** Definition of the SoundfileItem type */\nexport interface SoundfileItem {\n    /** Name of the soundfile */\n    name: string;\n    /** URL of the soundfile */\n    url: string;\n    /** Index in the DSP struct */\n    index: number;\n    /** Base pointer in wasm memory */\n    basePtr: number;\n};\n\n/**\n * WasmAllocator is a basic memory management class designed to allocate\n * blocks of memory within a WebAssembly.Memory object. It provides a simple\n * alloc method to allocate a contiguous block of memory of a specified size.\n * \n * The allocator operates by keeping a linear progression through the memory,\n * always allocating the next block at the end of the last. This approach does not\n * handle freeing of memory or reuse of memory spaces.\n */\nexport class WasmAllocator {\n    // The WebAssembly.Memory object this allocator will manage.\n    private readonly memory: WebAssembly.Memory;\n    // The number of bytes currently allocated. This serves as the \"pointer\" to the\n    // next free byte in the memory.\n    private allocatedBytes: number;\n\n    constructor(memory: WebAssembly.Memory, offset: number) {\n        this.memory = memory;\n        // Initialize the allocator with offset allocated bytes.\n        this.allocatedBytes = offset;\n    }\n\n    /**\n     * Allocates a block of memory of the specified size, returning the pointer to the\n     * beginning of the block. The block is allocated at the current offset and the\n     * offset is incremented by the size of the block.\n     * \n     * @param sizeInBytes The size of the block to allocate in bytes.\n     * @returns The offset (pointer) to the beginning of the allocated block.\n     */\n    alloc(sizeInBytes: number): number {\n        // Store the current offset as the start of the new block.\n        const currentOffset = this.allocatedBytes;\n        // Calculate the new offset after allocating the requested block.\n        const newOffset = currentOffset + sizeInBytes;\n        // Get the total size of the WebAssembly memory in bytes.\n        const totalMemoryBytes = this.memory.buffer.byteLength;\n\n        // If the new offset exceeds the total size of the memory, grow the memory.\n        if (newOffset > totalMemoryBytes) {\n            // Calculate the number of WebAssembly pages needed to fit the new allocation.\n            // WebAssembly memory pages are 64KiB each.\n            const neededPages = Math.ceil((newOffset - totalMemoryBytes) / 65536);\n            // Grow the memory by the required number of pages.\n            console.log(`GROW: ${neededPages} pages`);\n            this.memory.grow(neededPages);\n        }\n\n        // Update the allocated bytes to the new offset.\n        this.allocatedBytes = newOffset;\n        // Return the offset at which the allocated block starts.\n        return currentOffset;\n    }\n\n    /**\n     * Returns the underlying buffer object.\n     * \n     * @returns The buffer object.\n     */\n    getBuffer(): ArrayBuffer {\n        return this.memory.buffer;\n    }\n\n    /**\n     * Returns the Int32 view of the underlying buffer object.\n     * \n     * @returns The view of the memory buffer as Int32Array.\n     */\n    getInt32Array(): Int32Array {\n        return new Int32Array(this.memory.buffer);\n    }\n\n    /**\n     * Returns the Int64 view of the underlying buffer object.\n     * \n     * @returns The view of the memory buffer as BigInt64Array.\n     */\n    getInt64Array(): BigInt64Array {\n        return new BigInt64Array(this.memory.buffer);\n    }\n\n    /**\n     * Returns the Float32 view of the underlying buffer object.\n     * \n     * @returns The view of the memory buffer as Float32Array.\n     */\n    getFloat32Array(): Float32Array {\n        return new Float32Array(this.memory.buffer);\n    }\n\n    /**\n     * Returns the Float64 view of the underlying buffer object..\n     * \n     * @returns The view of the memory buffer as Float64Array.\n     */\n    getFloat64Array(): Float64Array {\n        return new Float64Array(this.memory.buffer);\n    }\n}\n\n/**\n * Soundfile class to handle soundfile data in wasm memory.\n */\nexport class Soundfile {\n    /** Maximum number of soundfile parts. */\n    static get MAX_SOUNDFILE_PARTS() { return 256; }\n\n    /** Maximum number of channels. */\n    static get MAX_CHAN() { return 64; }\n\n    /** Maximum buffer size in frames. */\n    static get BUFFER_SIZE() { return 1024; }\n\n    /** Default sample rate. */\n    static get SAMPLE_RATE() { return 44100; }\n\n    /** Pointer to the soundfile structure in wasm memory */\n    private readonly fPtr: number;\n    private readonly fBuffers: number;\n    private readonly fLength: number;\n    private readonly fSR: number;\n    private readonly fOffset: number;\n    private readonly fSampleSize: number;\n    private readonly fPtrSize: number;\n    private readonly fIntSize: number;\n    private readonly fAllocator: WasmAllocator;\n\n    constructor(allocator: WasmAllocator, sampleSize: number, curChan: number, length: number, maxChan: number, totalParts: number) {\n\n        this.fSampleSize = sampleSize;\n\n        // To be coherent with the code generated by the wast/wasm backends:\n        // - that uses 4 bytes for int when float is used\n        // - that uses 8 bytes for int when double is used (to simplify the code generation)\n        this.fIntSize = this.fSampleSize;\n\n        this.fPtrSize = 4;  // Not related to float/double choice, so always 4\n\n        this.fAllocator = allocator;\n\n        console.log(`Soundfile constructor: curChan: ${curChan}, length: ${length}, maxChan: ${maxChan}, totalParts: ${totalParts}`);\n\n        // Allocate wasm memory for the soundfile structure\n        this.fPtr = allocator.alloc(4 * this.fPtrSize); // 4 fPtrSize: fBuffers, fLength, fSR, fOffset\n\n        // Use the 4 or 8 bytes size for int. The access are then adapted in copyToOut and emptyFile methods\n        this.fLength = allocator.alloc(Soundfile.MAX_SOUNDFILE_PARTS * this.fIntSize);\n        this.fSR = allocator.alloc(Soundfile.MAX_SOUNDFILE_PARTS * this.fIntSize);\n        this.fOffset = allocator.alloc(Soundfile.MAX_SOUNDFILE_PARTS * this.fIntSize);\n\n        this.fBuffers = this.allocBuffers(curChan, length, maxChan);\n\n        //this.displayMemory(\"Allocated soundfile structure 1\");\n\n        // Set the soundfile structure in wasm memory\n        const HEAP32 = this.fAllocator.getInt32Array();\n        HEAP32[this.fPtr >> 2] = this.fBuffers;\n        HEAP32[(this.fPtr + this.fPtrSize) >> 2] = this.fLength;\n        HEAP32[(this.fPtr + (2 * this.fPtrSize)) >> 2] = this.fSR;\n        HEAP32[(this.fPtr + (3 * this.fPtrSize)) >> 2] = this.fOffset;\n\n        for (let chan = 0; chan < curChan; chan++) {\n            const buffer: number = HEAP32[(this.fBuffers >> 2) + chan];\n            console.log(`allocBuffers AFTER: ${chan} - ${buffer}`);\n        }\n\n        //this.displayMemory(\"Allocated soundfile structure 2\");\n    }\n\n    private allocBuffers(curChan: number, length: number, maxChan: number): number {\n        const buffers = this.fAllocator.alloc(maxChan * this.fPtrSize);\n\n        console.log(`allocBuffers buffers: ${buffers}`);\n\n        for (let chan = 0; chan < curChan; chan++) {\n            const buffer: number = this.fAllocator.alloc(length * this.fSampleSize);\n            // HEAP32 is the Int32Array view of the memory buffer which can change after grow in `alloc` method\n            // so we need to recompute the buffer address\n            const HEAP32 = this.fAllocator.getInt32Array();\n            HEAP32[(buffers >> 2) + chan] = buffer;\n        }\n        //this.displayMemory(\"Allocated soundfile buffers\");\n        return buffers;\n    }\n\n    shareBuffers(curChan: number, maxChan: number) {\n        // Share the same buffers for all other channels so that we have maxChan channels available\n        const HEAP32 = this.fAllocator.getInt32Array();\n        for (let chan = curChan; chan < maxChan; chan++) {\n            HEAP32[(this.fBuffers >> 2) + chan] = HEAP32[(this.fBuffers >> 2) + chan % curChan];\n        }\n    }\n\n    copyToOut(part: number, maxChannels: number, offset: number, audioData: AudioData) {\n        // Set the soundfile fields in wasm memory\n        if (this.fIntSize === 4) {\n            const HEAP32 = this.fAllocator.getInt32Array();\n            HEAP32[(this.fLength >> Math.log2(this.fIntSize)) + part] = audioData.audioBuffer[0].length;\n            HEAP32[(this.fSR >> Math.log2(this.fIntSize)) + part] = audioData.sampleRate;\n            HEAP32[(this.fOffset >> Math.log2(this.fIntSize)) + part] = offset;\n        } else {\n            const HEAP64 = this.fAllocator.getInt64Array();\n            HEAP64[(this.fLength >> Math.log2(this.fIntSize)) + part] = BigInt(audioData.audioBuffer[0].length);\n            HEAP64[(this.fSR >> Math.log2(this.fIntSize)) + part] = BigInt(audioData.sampleRate);\n            HEAP64[(this.fOffset >> Math.log2(this.fIntSize)) + part] = BigInt(offset);\n        }\n\n        console.log(`copyToOut: part: ${part}, maxChannels: ${maxChannels}, offset: ${offset}, buffer: ${audioData}`);\n\n        //this.displayMemory(\"IN copyToOut, BEFORE copyToOutReal\", true);\n        // Copy the soundfile data to the buffer\n        if (this.fSampleSize === 8) {\n            this.copyToOutReal64(maxChannels, offset, audioData);\n        } else {\n            this.copyToOutReal32(maxChannels, offset, audioData);\n        }\n        //this.displayMemory(\"IN copyToOut, AFTER copyToOutReal\");\n    }\n\n    copyToOutReal32(maxChannels: number, offset: number, audioData: AudioData) {\n        const HEAP32 = this.fAllocator.getInt32Array();\n        const HEAPF = this.fAllocator.getFloat32Array();\n        for (let chan = 0; chan < audioData.audioBuffer.length; chan++) {\n            const input: Float32Array = audioData.audioBuffer[chan];\n            const output: number = HEAP32[(this.fBuffers >> 2) + chan];\n            const begin: number = (output + (offset * this.fSampleSize)) >> Math.log2(this.fSampleSize);\n            const end: number = (output + (offset + input.length) * this.fSampleSize) >> Math.log2(this.fSampleSize);\n            console.log(`copyToOutReal32 begin: ${begin}, end: ${end}, delta: ${end - begin}`);\n            const outputReal: Float32Array = HEAPF.subarray((output + (offset * this.fSampleSize)) >> Math.log2(this.fSampleSize),\n                (output + (offset + input.length) * this.fSampleSize) >> Math.log2(this.fSampleSize));\n            for (let sample = 0; sample < input.length; sample++) {\n                outputReal[sample] = input[sample];\n            }\n        }\n    }\n\n    copyToOutReal64(maxChannels: number, offset: number, audioData: AudioData) {\n        const HEAP32 = this.fAllocator.getInt32Array();\n        const HEAPF = this.fAllocator.getFloat64Array();\n        for (let chan = 0; chan < audioData.audioBuffer.length; chan++) {\n            const input: Float32Array = audioData.audioBuffer[chan];\n            const output: number = HEAP32[(this.fBuffers >> 2) + chan];\n            const begin: number = (output + (offset * this.fSampleSize)) >> Math.log2(this.fSampleSize);\n            const end: number = (output + (offset + input.length) * this.fSampleSize) >> Math.log2(this.fSampleSize);\n            console.log(`copyToOutReal64 begin: ${begin}, end: ${end}, delta: ${end - begin}`);\n            const outputReal: Float64Array = HEAPF.subarray((output + (offset * this.fSampleSize)) >> Math.log2(this.fSampleSize),\n                (output + (offset + input.length) * this.fSampleSize) >> Math.log2(this.fSampleSize));\n            for (let sample = 0; sample < input.length; sample++) {\n                outputReal[sample] = input[sample];\n            }\n        }\n    }\n\n    emptyFile(part: number, offset: number): number {\n        // Set the soundfile fields in wasm memory\n        if (this.fIntSize === 4) {\n            const HEAP32 = this.fAllocator.getInt32Array();\n            HEAP32[(this.fLength >> Math.log2(this.fIntSize)) + part] = Soundfile.BUFFER_SIZE;\n            HEAP32[(this.fSR >> Math.log2(this.fIntSize)) + part] = Soundfile.SAMPLE_RATE;\n            HEAP32[(this.fOffset >> Math.log2(this.fIntSize)) + part] = offset;\n        } else {\n            const HEAP64 = this.fAllocator.getInt64Array();\n            HEAP64[(this.fLength >> Math.log2(this.fIntSize)) + part] = BigInt(Soundfile.BUFFER_SIZE);\n            HEAP64[(this.fSR >> Math.log2(this.fIntSize)) + part] = BigInt(Soundfile.SAMPLE_RATE);\n            HEAP64[(this.fOffset >> Math.log2(this.fIntSize)) + part] = BigInt(offset);\n        }\n\n        // Update and return the new offset\n        return offset + Soundfile.BUFFER_SIZE;\n    }\n\n    displayMemory(where: string = \"\", mem: boolean = false) {\n        console.log(\"Soundfile memory: \" + where);\n        console.log(`fPtr: ${this.fPtr}`);\n        console.log(`fBuffers: ${this.fBuffers}`);\n        console.log(`fLength: ${this.fLength}`);\n        console.log(`fSR: ${this.fSR}`);\n        console.log(`fOffset: ${this.fOffset}`);\n        const HEAP32 = this.fAllocator.getInt32Array();\n        if (mem) console.log(`HEAP32: ${HEAP32}`);\n        console.log(`HEAP32[this.fPtr >> 2]: ${HEAP32[this.fPtr >> 2]}`);\n        console.log(`HEAP32[(this.fPtr + ptrSize) >> 2]: ${HEAP32[(this.fPtr + this.fPtrSize) >> 2]}`);\n        console.log(`HEAP32[(this.fPtr + 2 * ptrSize) >> 2]: ${HEAP32[(this.fPtr + 2 * this.fPtrSize) >> 2]}`);\n        console.log(`HEAP32[(this.fPtr + 3 * ptrSize) >> 2]: ${HEAP32[(this.fPtr + 3 * this.fPtrSize) >> 2]}`);\n    }\n\n    // Return the pointer to the soundfile structure in wasm memory\n    getPtr(): number {\n        return this.fPtr;\n    }\n\n    getHEAP32(): Int32Array {\n        return this.fAllocator.getInt32Array();\n    }\n    getHEAPFloat32(): Float32Array {\n        return this.fAllocator.getFloat32Array();\n    }\n\n    getHEAPFloat64(): Float64Array {\n        return this.fAllocator.getFloat64Array();\n    }\n}\n\n/**\n * DSP implementation that mimic the C++ 'dsp' class:\n * - adding MIDI control: metadata are decoded and incoming MIDI messages will control the associated controllers\n * - an output handler can be set to treat produced output controllers (like 'bargraph') \n * - regular controllers are handled using setParamValue/getParamValue and getParams methods\n */\nexport interface IFaustBaseWebAudioDsp {\n    /**\n     * Set the parameter output handler, to  be called in the 'compute' method with output parameters (like bargraph).\n     *\n     * @param handler - the output handler\n     */\n    setOutputParamHandler(handler: OutputParamHandler | null): void;\n\n    /**\n     * Get the parameter output handler.\n     *\n     * @return the current output handler\n     */\n    getOutputParamHandler(): OutputParamHandler | null;\n\n    /**\n     * Set the compute handler, to  be called in the 'compute' method with buffer size.\n     *\n     * @param handler - the compute handler\n     */\n    setComputeHandler(handler: ComputeHandler | null): void;\n\n    /**\n     * Get the compute handler.\n     *\n     * @return the current output handler\n     */\n    getComputeHandler(): ComputeHandler | null;\n\n    /**\n     * Set the plot handler, to  be called in the 'compute' method with various info (see PlotHandler type).\n     *\n     * @param handler - the plot handler\n     */\n    setPlotHandler(handler: PlotHandler | null): void;\n\n    /**\n     * Get the plot handler.\n     *\n     * @return the current plot handler\n     */\n    getPlotHandler(): PlotHandler | null;\n\n    /**\n     * Return instance number of audio inputs.\n     *\n     * @return the instance number of audio inputs\n     */\n    getNumInputs(): number;\n\n    /**\n     * Return instance number of audio outputs.\n     *\n     * @return the instance number of audio outputs\n     */\n    getNumOutputs(): number;\n\n    /**\n     * DSP instance computation, to be called with successive input/output audio buffers, using their size.\n     *\n     * @param inputs - the input audio buffers\n     * @param outputs - the output audio buffers\n     */\n    compute(inputs: Float32Array[], outputs: Float32Array[]): boolean;\n\n    /**\n     * Give a handler to be called on 'declare key value' kind of metadata.\n     *\n     * @param handler - the handler to be used\n     */\n    metadata(handler: MetadataHandler): void;\n\n    /**\n     * Handle untyped MIDI messages.\n     *\n     * @param data - and arry of MIDI bytes\n     */\n    midiMessage(data: number[] | Uint8Array): void;\n\n    /**\n     * Handle MIDI ctrlChange messages.\n     *\n     * @param channel - the MIDI channel (0..15, not used for now)\n     * @param ctrl - the MIDI controller number (0..127)\n     * @param value - the MIDI controller value (0..127)\n     */\n    ctrlChange(chan: number, ctrl: number, value: number): void;\n\n    /**\n     * Handle MIDI pitchWheel messages.\n     *\n     * @param channel - the MIDI channel (0..15, not used for now)\n     * @param value - the MIDI controller value (0..16383)\n     */\n    pitchWheel(chan: number, value: number): void;\n\n    /**\n     * Set parameter value.\n     *\n     * @param path - the path to the wanted parameter (retrieved using 'getParams' method)\n     * @param val - the float value for the wanted control\n     */\n    setParamValue(path: string, value: number): void;\n\n    /**\n     * Get parameter value.\n     *\n     * @param path - the path to the wanted parameter (retrieved using 'getParams' method)\n     *\n     * @return the float value\n     */\n    getParamValue(path: string): number;\n\n    /**\n     * Get the table of all input parameters paths.\n     *\n     * @return the table of all input parameters paths\n     */\n    getParams(): string[];\n\n    /**\n     * Get DSP JSON description with its UI and metadata as object.\n     *\n     * @return the DSP JSON description as object\n     */\n    getMeta(): FaustDspMeta;\n\n    /**\n     * Get DSP UI description.\n     *\n     * @return the DSP UI description\n     */\n    getUI(): FaustUIDescriptor;\n\n    /**\n    * Get DSP UI items description.\n    *\n    * @return the DSP UI items description\n    */\n    getDescriptors(): FaustUIInputItem[];\n\n    /**\n     * Get DSP JSON description with its UI and metadata.\n     *\n     * @return the DSP JSON description\n     */\n    getJSON(): string;\n\n    /**\n    * Start accelerometer and gyroscope handlers.\n    */\n    startSensors(): void;\n\n    /**\n     * Stop accelerometer and gyroscope handlers.\n     */\n    stopSensors(): void;\n\n    /** Indicating if the DSP handles the accelerometer */\n    readonly hasAccInput: boolean;\n\n    /** \n     * Accelerometer handling.\n     * accelerationIncludingGravity: DeviceMotionEvent[\"accelerationIncludingGravity\"]\n     * invert: boolean\n     */\n    propagateAcc(accelerationIncludingGravity: NonNullable<DeviceMotionEvent[\"accelerationIncludingGravity\"]>, invert: boolean): void;\n\n    /** Indicating if the DSP handles the gyroscope */\n    readonly hasGyrInput: boolean;\n\n    /** \n     * Gyroscope handling.\n     * event: Pick<DeviceOrientationEvent, \"alpha\" | \"beta\" | \"gamma\">\n     */\n    propagateGyr(event: Pick<DeviceOrientationEvent, \"alpha\" | \"beta\" | \"gamma\">): void;\n\n    /**\n     * Start the DSP audio processing. \n     */\n    start(): void;\n\n    /**\n     * Stop the DSP audio processing.\n     */\n    stop(): void;\n\n    /**\n     * Destroy the DSP.\n     */\n    destroy(): void;\n}\n\nexport interface IFaustMonoWebAudioDsp extends IFaustBaseWebAudioDsp { }\nexport interface IFaustMonoWebAudioNode extends IFaustMonoWebAudioDsp, AudioNode { }\n\nexport interface IFaustPolyWebAudioDsp extends IFaustBaseWebAudioDsp {\n    /**\n     * Handle MIDI keyOn messages.\n     *\n     * @param channel - the MIDI channel (0..15, not used for now)\n     * @param pitch - the MIDI pitch value (0..127)\n     * @param velocity - the MIDI velocity value (0..127)\n     */\n    keyOn(channel: number, pitch: number, velocity: number): void;\n\n    /**\n     * Handle MIDI keyOff messages.\n     *\n     * @param channel - the MIDI channel (0..15, not used for now)\n     * @param pitch - the MIDI pitch value (0..127)\n     * @param velocity - the MIDI velocity value (0..127)\n     */\n    keyOff(channel: number, pitch: number, velocity: number): void;\n\n    /**\n     * Stop all playing notes.\n     *\n     * @param hard - whether to immediately stop notes or put them in release mode\n     */\n    allNotesOff(hard: boolean): void;\n}\nexport interface IFaustPolyWebAudioNode extends IFaustPolyWebAudioDsp, AudioNode { }\n\nexport class FaustBaseWebAudioDsp implements IFaustBaseWebAudioDsp {\n    protected fOutputHandler: OutputParamHandler | null = null;\n    protected fComputeHandler: ComputeHandler | null = null;\n\n    // To handle MIDI events plot\n    protected fPlotHandler: PlotHandler | null = null;\n    protected fCachedEvents: { type: string; data: any }[] = [];\n    protected fBufferNum = 0;\n\n    protected fInChannels: Float32Array[] | Float64Array[] = [];\n    protected fOutChannels: Float32Array[] | Float64Array[] = [];\n\n    protected fOutputsTimer = 5;\n\n    // UI items path\n    protected fInputsItems: string[] = [];\n    protected fOutputsItems: string[] = [];\n    protected fDescriptor: FaustUIInputItem[] = [];\n\n    // Soundfile handling\n    protected fSoundfiles: SoundfileItem[] = [];\n    protected fSoundfileBuffers: LooseFaustDspFactory[\"soundfiles\"] = {};\n    /** Keep the end of memory offset before soundfiles */\n    protected fEndMemory: number;\n\n    // Accelerometer handling\n    protected fAcc: SensorEventHandlers; // array of accelerometer handlers on x,y,y axes, to be called with DeviceMotionEvent\n    protected fGyr: SensorEventHandlers; // array of gyroscope handlers on alpha,beta,gama axes, to be called with DeviceMotionEvent\n\n    // Buffers in wasm memory\n    protected fAudioInputs!: number;\n    protected fAudioOutputs!: number;\n\n    protected fBufferSize: number;\n    protected fPtrSize: number;\n    protected fSampleSize: number;\n\n    // MIDI handling\n    protected fPitchwheelLabel: { path: string; chan: number; min: number; max: number }[] = [];\n    protected fCtrlLabel: { path: string; chan: number; min: number; max: number }[][] = new Array(128).fill(null).map(() => []);\n    protected fPathTable: { [address: string]: number } = {};\n    protected fUICallback: UIHandler = (item: FaustUIItem) => {\n        if (item.type === \"hbargraph\" || item.type === \"vbargraph\") {\n            // Keep bargraph adresses\n            this.fOutputsItems.push(item.address);\n            this.fPathTable[item.address] = item.index;\n        } else if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"button\" || item.type === \"checkbox\" || item.type === \"nentry\") {\n            // Keep inputs adresses\n            this.fInputsItems.push(item.address);\n            this.fPathTable[item.address] = item.index;\n            this.fDescriptor.push(item);\n            if (!item.meta) return;\n            item.meta.forEach((meta) => {\n                const { midi, acc, gyr } = meta;\n                // Parse 'midi' metadata\n                if (midi) {\n                    const strMidi = midi.trim();\n                    if (strMidi === \"pitchwheel\") {\n                        const matched = strMidi.match(/^pitchwheel\\s(\\d+)/);\n                        // \"pitchwheel chan\"\n                        if (matched) {\n                            this.fPitchwheelLabel.push({ path: item.address, chan: parseInt(matched[1]), min: item.min as number, max: item.max as number });\n                            // \"pitchwheel\"\n                        } else {\n                            this.fPitchwheelLabel.push({ path: item.address, chan: 0, min: item.min as number, max: item.max as number });\n                        }\n                    } else {\n                        // \"ctrl num chan\"\n                        const matched2 = strMidi.match(/^ctrl\\s(\\d+)\\s(\\d+)/);\n                        // \"ctrl num\"\n                        const matched1 = strMidi.match(/^ctrl\\s(\\d+)/);\n                        if (matched2) {\n                            this.fCtrlLabel[parseInt(matched2[1])].push({ path: item.address, chan: parseInt(matched2[2]), min: item.min as number, max: item.max as number });\n                        } else if (matched1) {\n                            this.fCtrlLabel[parseInt(matched1[1])].push({ path: item.address, chan: 0, min: item.min as number, max: item.max as number });\n                        }\n                    }\n                }\n\n                // Parse 'acc' metadata\n                if (acc) {\n                    const numAcc: number[] = acc.trim().split(\" \").map(Number);\n                    this.setupAccHandler(item.address, FaustSensors.convertToAxis(numAcc[0]), FaustSensors.convertToCurve(numAcc[1]), numAcc[2], numAcc[3], numAcc[4], item.min as number, item.init as number, item.max as number);\n                }\n                // Parse 'gyr' metadata\n                if (gyr) {\n                    const numAcc: number[] = gyr.trim().split(\" \").map(Number);\n                    this.setupGyrHandler(item.address, FaustSensors.convertToAxis(numAcc[0]), FaustSensors.convertToCurve(numAcc[1]), numAcc[2], numAcc[3], numAcc[4], item.min as number, item.init as number, item.max as number);\n                }\n            });\n        } else if (item.type === \"soundfile\") {\n            this.fSoundfiles.push({ name: item.label, url: item.url, index: item.index, basePtr: -1 });\n        }\n    };\n\n    // Audio callback\n    protected fProcessing = false;\n    protected fDestroyed = false;\n    protected fFirstCall = true;\n\n    protected fJSONDsp!: FaustDspMeta;\n\n    constructor(sampleSize: number, bufferSize: number, soundfiles: LooseFaustDspFactory[\"soundfiles\"]) {\n        this.fBufferSize = bufferSize;\n        this.fPtrSize = sampleSize; // Done on wast/wasm backend side\n        this.fSampleSize = sampleSize;\n        this.fSoundfileBuffers = soundfiles;\n        this.fAcc = { x: [], y: [], z: [] };\n        this.fGyr = { x: [], y: [], z: [] };\n    }\n\n    // Tools\n    static remap(v: number, mn0: number, mx0: number, mn1: number, mx1: number) {\n        return (v - mn0) / (mx0 - mn0) * (mx1 - mn1) + mn1;\n    }\n\n    // JSON parsing functions\n    static parseUI(ui: FaustUIDescriptor, callback: (item: FaustUIItem) => any) {\n        ui.forEach(group => this.parseGroup(group, callback));\n    }\n\n    static parseGroup(group: FaustUIGroup, callback: (item: FaustUIItem) => any) {\n        if (group.items) {\n            this.parseItems(group.items, callback);\n        }\n    }\n    static parseItems(items: FaustUIItem[], callback: (item: FaustUIItem) => any) {\n        items.forEach(item => this.parseItem(item, callback));\n    }\n\n    static parseItem(item: FaustUIItem, callback: (item: FaustUIItem) => any) {\n        if (item.type === \"vgroup\" || item.type === \"hgroup\" || item.type === \"tgroup\") {\n            this.parseItems(item.items, callback);\n        } else {\n            callback(item);\n        }\n    }\n\n    /** Split the soundfile names and return an array of names */\n    static splitSoundfileNames(input: string): string[] {\n        // Trim off the curly braces at the start and end, if present\n        let trimmed = input.replace(/^\\{|\\}$/g, '');\n        // Split the string into an array of strings and remove first and last characters\n        return trimmed.split(\";\").map(str => str.length <= 2 ? '' : str.substring(1, str.length - 1));\n    }\n\n    get hasAccInput() { return this.fAcc.x.length + this.fAcc.y.length + this.fAcc.z.length > 0; }\n    propagateAcc(accelerationIncludingGravity: NonNullable<DeviceMotionEvent[\"accelerationIncludingGravity\"]>, invert: boolean = false) {\n\n        // Get accelerometervalues\n        const { x, y, z } = accelerationIncludingGravity;\n\n        if (invert) {\n            // Call the accelerometer handlers\n            if (x !== null) this.fAcc.x.forEach(handler => handler(-x));\n            if (y !== null) this.fAcc.y.forEach(handler => handler(-y));\n            if (z !== null) this.fAcc.z.forEach(handler => handler(-z));\n        } else {\n            // Call the accelerometer handlers\n            if (x !== null) this.fAcc.x.forEach(handler => handler(x));\n            if (y !== null) this.fAcc.y.forEach(handler => handler(y));\n            if (z !== null) this.fAcc.z.forEach(handler => handler(z));\n        }\n    }\n\n    get hasGyrInput() { return this.fGyr.x.length + this.fGyr.y.length + this.fGyr.z.length > 0; }\n    propagateGyr(event: Pick<DeviceOrientationEvent, \"alpha\" | \"beta\" | \"gamma\">) {\n\n        // Get gyroscope values\n        const { alpha, beta, gamma } = event;\n\n        // Call the gyroscope handlers\n        if (alpha !== null) this.fGyr.x.forEach(handler => handler(alpha));\n        if (beta !== null) this.fGyr.y.forEach(handler => handler(beta));\n        if (gamma !== null) this.fGyr.z.forEach(handler => handler(gamma));\n    }\n\n    /** Build the accelerometer handler */\n    private setupAccHandler(path: string, axis: Axis, curve: Curve, amin: number, amid: number, amax: number, min: number, init: number, max: number) {\n\n        const handler: UpdatableValueConverter = FaustSensors.buildHandler(curve, amin, amid, amax, min, init, max);\n        switch (axis) {\n            case Axis.x:\n                this.fAcc.x.push((val) => this.setParamValue(path, handler.uiToFaust(val)));\n                break;\n            case Axis.y:\n                this.fAcc.y.push((val) => this.setParamValue(path, handler.uiToFaust(val)));\n                break;\n            case Axis.z:\n                this.fAcc.z.push((val) => this.setParamValue(path, handler.uiToFaust(val)));\n                break;\n        }\n    }\n\n    /** Build the gyroscope handler */\n    private setupGyrHandler(path: string, axis: Axis, curve: Curve, amin: number, amid: number, amax: number, min: number, init: number, max: number) {\n\n        const handler: UpdatableValueConverter = FaustSensors.buildHandler(curve, amin, amid, amax, min, init, max);\n        switch (axis) {\n            case Axis.x:\n                this.fGyr.x.push((val) => this.setParamValue(path, handler.uiToFaust(val)));\n                break;\n            case Axis.y:\n                this.fGyr.y.push((val) => this.setParamValue(path, handler.uiToFaust(val)));\n                break;\n            case Axis.z:\n                this.fGyr.z.push((val) => this.setParamValue(path, handler.uiToFaust(val)));\n                break;\n        }\n    }\n\n    static extractUrlsFromMeta(dspMeta: FaustDspMeta): string[] {\n        // Find the entry with the \"soundfiles\" key\n        const soundfilesEntry = dspMeta.meta.find(entry => entry.soundfiles !== undefined);\n        // If the entry is found, split the string by semicolon to get the URLs\n        if (soundfilesEntry) {\n            return soundfilesEntry.soundfiles.split(\";\").filter(url => url !== \"\");\n        } else {\n            return [];\n        }\n    }\n\n    /**\n     * Load a soundfile possibly containing several parts in the DSP struct.\n     * Soundfile pointers are located at 'index' offset, to be read in the JSON file.\n     * The DSP struct is located at baseDSP in the wasm memory, \n     * either a monophonic DSP, or a voice in a polyphonic context.\n     * \n     * @param allocator : the wasm memory allocator\n     * @param baseDSP : the base DSP in the wasm memory\n     * @param name : the name of the soundfile\n     * @param url : the url of the soundfile\n     */\n    private loadSoundfile(allocator: WasmAllocator, baseDSP: number, name: string, url: string) {\n        console.log(`Soundfile ${name} paths: ${url}`);\n        const soundfileIds = FaustBaseWebAudioDsp.splitSoundfileNames(url);\n        const item = this.fSoundfiles.find(item => item.url === url);\n        if (!item) throw new Error(`Soundfile with ${url} cannot be found !}`);\n        // Use the cached Soundfile\n        if (item.basePtr !== -1) {\n            // Update HEAP32 after soundfile creation\n            const HEAP32 = allocator.getInt32Array();\n            // Fill the soundfile structure in wasm memory, soundfiles are at the beginning of the DSP memory\n            console.log(`Soundfile CACHE ${url}} : ${name} loaded at ${item.basePtr} in wasm memory with index ${item.index}`);\n            // Soundfile is located at 'index' in the DSP struct, to be added with baseDSP in the wasm memory\n            HEAP32[(baseDSP + item.index) >> 2] = item.basePtr;\n        } else {\n            // Create the soundfiles\n            const soundfile = this.createSoundfile(allocator, soundfileIds, this.fSoundfileBuffers);\n            if (soundfile) {\n                // Update HEAP32 after soundfile creation\n                const HEAP32 = soundfile.getHEAP32();\n                // Get the soundfile pointer in wasm memory\n                item.basePtr = soundfile.getPtr();\n                console.log(`Soundfile ${name} loaded at ${item.basePtr} in wasm memory with index ${item.index}`);\n                // Soundfile is located at 'index' in the DSP struct, to be added with baseDSP in the wasm memory\n                HEAP32[(baseDSP + item.index) >> 2] = item.basePtr;\n            } else {\n                console.log(`Soundfile ${name} for ${url} cannot be created !}`);\n            }\n        }\n    }\n\n    createSoundfile(allocator: WasmAllocator, soundfileIdList: string[], soundfiles: LooseFaustDspFactory[\"soundfiles\"], maxChan = Soundfile.MAX_CHAN) {\n        let curChan = 1; // At least one channel\n        let totalLength = 0;\n\n        // Compute total length and channels max of all files\n        for (const soundfileId of soundfileIdList) {\n            let chan = 0;\n            let len = 0;\n            const audioData = soundfiles[soundfileId];\n            if (audioData) {\n                chan = audioData.audioBuffer.length;\n                len = audioData.audioBuffer[0].length;\n            } else {\n                len = Soundfile.BUFFER_SIZE;\n                chan = 1;\n            }\n            curChan = Math.max(curChan, chan);\n            totalLength += len;\n        }\n\n        // Complete with empty parts\n        totalLength += (Soundfile.MAX_SOUNDFILE_PARTS - soundfileIdList.length) * Soundfile.BUFFER_SIZE;\n\n        // Create the soundfile\n        const soundfile = new Soundfile(allocator, this.fSampleSize, curChan, totalLength, maxChan, soundfileIdList.length);\n\n        //soundfile.displayMemory(\"After soundfile creation\");\n        // Init offset\n        let offset = 0;\n\n        // Read all files\n        for (let part = 0; part < soundfileIdList.length; part++) {\n            const soundfileId = soundfileIdList[part];\n            const audioData = soundfiles[soundfileId];\n            if (audioData) {\n                //soundfile.displayMemory(\"BEFORE copyToOut\");\n                soundfile.copyToOut(part, maxChan, offset, audioData);\n                //soundfile.displayMemory(\"AFTER copyToOut\");\n                offset += audioData.audioBuffer[0].length;\n            } else {\n                // Empty sound\n                offset = soundfile.emptyFile(part, offset);\n            }\n        }\n\n        //soundfile.displayMemory(\"After reading soundfiles\");\n\n        // Complete with empty parts\n        for (let part = soundfileIdList.length; part < Soundfile.MAX_SOUNDFILE_PARTS; part++) {\n            offset = soundfile.emptyFile(part, offset);\n        }\n\n        //soundfile.displayMemory(\"After emptyFile\");\n\n        // Share the same buffers for all other channels so that we have maxChan channels available\n        soundfile.shareBuffers(curChan, maxChan);\n\n        //soundfile.displayMemory(\"After shareBuffers\");\n\n        return soundfile;\n    }\n    /** \n     * Init soundfiles memory.\n     * \n     * @param allocator : the wasm memory allocator\n     * @param sfReader : the soundfile reader\n     * @param baseDSP : the DSP struct (either a monophonic DSP of polyphonic voice) base DSP in the wasm memory\n    */\n    protected initSoundfileMemory(allocator: WasmAllocator, baseDSP: number) {\n        // Create and fill the soundfile structure\n        for (const { name, url } of this.fSoundfiles) {\n            this.loadSoundfile(allocator, baseDSP, name, url);\n        };\n    }\n\n    protected updateOutputs() {\n        if (this.fOutputsItems.length > 0 && this.fOutputHandler && this.fOutputsTimer-- === 0) {\n            this.fOutputsTimer = 5;\n            this.fOutputsItems.forEach(item => this.fOutputHandler?.(item, this.getParamValue(item)));\n        }\n    }\n\n    // Public API\n    metadata(handler: MetadataHandler) {\n        if (this.fJSONDsp.meta) {\n            this.fJSONDsp.meta.forEach(meta => handler(Object.keys(meta)[0], meta[Object.keys(meta)[0]]));\n        }\n    }\n\n    compute(input: Float32Array[], output: Float32Array[]) {\n        return false;\n    }\n\n    setOutputParamHandler(handler: OutputParamHandler | null) {\n        this.fOutputHandler = handler;\n    }\n    getOutputParamHandler() {\n        return this.fOutputHandler;\n    }\n\n    setComputeHandler(handler: ComputeHandler | null) {\n        this.fComputeHandler = handler;\n    }\n    getComputeHandler() {\n        return this.fComputeHandler;\n    }\n\n    setPlotHandler(handler: PlotHandler | null) {\n        this.fPlotHandler = handler;\n    }\n    getPlotHandler() {\n        return this.fPlotHandler;\n    }\n\n    getNumInputs() {\n        return -1;\n    }\n    getNumOutputs() {\n        return -1;\n    }\n\n    midiMessage(data: number[] | Uint8Array) {\n        if (this.fPlotHandler) this.fCachedEvents.push({ data, type: \"midi\" });\n        const cmd = data[0] >> 4;\n        const channel = data[0] & 0xf;\n        const data1 = data[1];\n        const data2 = data[2];\n        if (cmd === 11) return this.ctrlChange(channel, data1, data2);\n        if (cmd === 14) return this.pitchWheel(channel, (data2 * 128.0 + data1));\n    }\n\n    ctrlChange(channel: number, ctrl: number, value: number) {\n        if (this.fPlotHandler) this.fCachedEvents.push({ type: \"ctrlChange\", data: [channel, ctrl, value] });\n        if (this.fCtrlLabel[ctrl].length) {\n            this.fCtrlLabel[ctrl].forEach((ctrl) => {\n                const { path, chan } = ctrl;\n                if (chan === 0 || channel === chan - 1) {\n                    this.setParamValue(path, FaustBaseWebAudioDsp.remap(value, 0, 127, ctrl.min, ctrl.max));\n                    // Typically used to reflect parameter change on GUI\n                    if (this.fOutputHandler) this.fOutputHandler(path, this.getParamValue(path));\n                }\n            });\n        }\n    }\n\n    pitchWheel(channel: number, wheel: number) {\n        if (this.fPlotHandler) this.fCachedEvents.push({ type: \"pitchWheel\", data: [channel, wheel] });\n        this.fPitchwheelLabel.forEach((pw) => {\n            const { path, chan } = pw;\n            if (chan === 0 || channel === chan - 1) {\n                this.setParamValue(path, FaustBaseWebAudioDsp.remap(wheel, 0, 16383, pw.min, pw.max));\n                // Typically used to reflect parameter change on GUI\n                if (this.fOutputHandler) this.fOutputHandler(path, this.getParamValue(path));\n            }\n        });\n    }\n\n    setParamValue(path: string, value: number) { }\n    getParamValue(path: string) { return 0; }\n\n    getParams() { return this.fInputsItems; }\n    getMeta() { return this.fJSONDsp; }\n    getJSON() { return JSON.stringify(this.getMeta()); }\n    getUI() { return this.fJSONDsp.ui; }\n    getDescriptors() { return this.fDescriptor; }\n\n    hasSoundfiles() { return this.fSoundfiles.length > 0; }\n\n    startSensors(): void {\n        this.startSensors();\n    }\n\n    stopSensors(): void {\n        this.stopSensors();\n    }\n\n    start() {\n        this.fProcessing = true;\n    }\n\n    stop() {\n        this.fProcessing = false;\n    }\n\n    destroy() {\n        this.fDestroyed = true;\n        this.fOutputHandler = null;\n        this.fComputeHandler = null;\n        this.fPlotHandler = null;\n    }\n\n}\n\nexport class FaustMonoWebAudioDsp extends FaustBaseWebAudioDsp implements IFaustMonoWebAudioDsp {\n\n    private fInstance: FaustMonoDspInstance;\n    private fDSP!: number;\n\n    constructor(instance: FaustMonoDspInstance, sampleRate: number, sampleSize: number, bufferSize: number, soundfiles: LooseFaustDspFactory[\"soundfiles\"]) {\n\n        super(sampleSize, bufferSize, soundfiles);\n        this.fInstance = instance;\n\n        console.log(`sampleSize: ${sampleSize} bufferSize: ${bufferSize}`);\n\n        // Create JSON object\n        this.fJSONDsp = JSON.parse(this.fInstance.json);\n\n        // Setup GUI\n        FaustBaseWebAudioDsp.parseUI(this.fJSONDsp.ui, this.fUICallback);\n\n        // Setup wasm memory\n        this.fEndMemory = this.initMemory();\n\n        // Init DSP\n        this.fInstance.api.init(this.fDSP, sampleRate);\n\n        // Init soundfiles memory is needed\n        if (this.fSoundfiles.length > 0) {\n\n            // Create memory allocator for soundfiles in wasm memory, starting at the end of DSP memory\n            const allocator = new WasmAllocator(this.fInstance.memory, this.fEndMemory);\n\n            // Init soundfiles memory\n            this.initSoundfileMemory(allocator, this.fDSP);\n        }\n\n    }\n\n    private initMemory(): number {\n\n        // Start of DSP memory: Mono DSP is placed first with index 0\n        this.fDSP = 0;\n\n        // Audio buffer start at the end of DSP\n        const $audio = this.fJSONDsp.size;\n\n        // Setup audio pointers offset\n        this.fAudioInputs = $audio;\n        this.fAudioOutputs = this.fAudioInputs + this.getNumInputs() * this.fPtrSize;\n\n        // Prepare wasm memory layout\n        const $audioInputs = this.fAudioOutputs + this.getNumOutputs() * this.fPtrSize;\n        const $audioOutputs = $audioInputs + this.getNumInputs() * this.fBufferSize * this.fSampleSize;\n        // Compute memory end in bytes\n        const endMemory = $audioOutputs + this.getNumOutputs() * this.fBufferSize * this.fSampleSize;\n\n        // Setup Int32 and Real views of the memory\n        const HEAP = this.fInstance.memory.buffer;\n        const HEAP32 = new Int32Array(HEAP);\n        const HEAPF = (this.fSampleSize === 4) ? new Float32Array(HEAP) : new Float64Array(HEAP);\n\n        if (this.getNumInputs() > 0) {\n            for (let chan = 0; chan < this.getNumInputs(); chan++) {\n                HEAP32[(this.fAudioInputs >> 2) + chan] = $audioInputs + this.fBufferSize * this.fSampleSize * chan;\n            }\n            // Prepare Ins buffer tables\n            const dspInChans = HEAP32.subarray(this.fAudioInputs >> 2, (this.fAudioInputs + this.getNumInputs() * this.fPtrSize) >> 2);\n            for (let chan = 0; chan < this.getNumInputs(); chan++) {\n                this.fInChannels[chan] = HEAPF.subarray(dspInChans[chan] >> Math.log2(this.fSampleSize), (dspInChans[chan] + this.fBufferSize * this.fSampleSize) >> Math.log2(this.fSampleSize));\n            }\n        }\n        if (this.getNumOutputs() > 0) {\n            for (let chan = 0; chan < this.getNumOutputs(); chan++) {\n                HEAP32[(this.fAudioOutputs >> 2) + chan] = $audioOutputs + this.fBufferSize * this.fSampleSize * chan;\n            }\n            // Prepare Out buffer tables\n            const dspOutChans = HEAP32.subarray(this.fAudioOutputs >> 2, (this.fAudioOutputs + this.getNumOutputs() * this.fPtrSize) >> 2);\n            for (let chan = 0; chan < this.getNumOutputs(); chan++) {\n                this.fOutChannels[chan] = HEAPF.subarray(dspOutChans[chan] >> Math.log2(this.fSampleSize), (dspOutChans[chan] + this.fBufferSize * this.fSampleSize) >> Math.log2(this.fSampleSize));\n            }\n        }\n\n        return endMemory;\n    }\n\n    toString() {\n        return `============== Mono Memory layout ==============\n        this.fBufferSize: ${this.fBufferSize}\n        this.fJSONDsp.size: ${this.fJSONDsp.size}\n        this.fAudioInputs: ${this.fAudioInputs}\n        this.fAudioOutputs: ${this.fAudioOutputs}\n        this.fDSP: ${this.fDSP}`;\n    }\n\n    // Public API\n    compute(input: Float32Array[] | ((input: Float32Array[] | Float64Array[]) => any), output: Float32Array[] | ((output: Float32Array[] | Float64Array[]) => any)) {\n\n        // Check DSP state\n        if (this.fDestroyed) return false;\n\n        // Check Processing state: the node returns 'true' to stay in the graph, even if not processing\n        if (!this.fProcessing) return true;\n\n        // Init memory again on first call (since WebAssembly.memory.grow() may have been called)\n        if (this.fFirstCall) {\n            this.initMemory();\n            this.fFirstCall = false;\n        }\n\n        if (typeof input === \"function\") {\n            // Call input callback to avoid array copy\n            input(this.fInChannels);\n        } else {\n            // Check inputs\n            if (this.getNumInputs() > 0 && (!input || !input[0] || input[0].length === 0)) {\n                // console.log(\"Process input error\");\n                return true;\n            }\n\n            // Check outputs\n            if (this.getNumOutputs() > 0 && typeof output !== \"function\" && (!output || !output[0] || output[0].length === 0)) {\n                // console.log(\"Process output error\");\n                return true;\n            }\n\n            // Copy inputs\n            if (input !== undefined) {\n                for (let chan = 0; chan < Math.min(this.getNumInputs(), input.length); chan++) {\n                    const dspInput = this.fInChannels[chan];\n                    dspInput.set(input[chan]);\n                }\n            }\n        }\n        // Possibly call an externally given callback (for instance to synchronize playing a MIDIFile...)\n        if (this.fComputeHandler) this.fComputeHandler(this.fBufferSize);\n\n        // Compute\n        this.fInstance.api.compute(this.fDSP, this.fBufferSize, this.fAudioInputs, this.fAudioOutputs);\n\n        // Update bargraph\n        this.updateOutputs();\n\n        let forPlot = this.fOutChannels;\n        if (typeof output === \"function\") {\n            // Call output callback to avoid array copy\n            output(this.fOutChannels);\n        } else {\n            // Copy outputs\n            for (let chan = 0; chan < Math.min(this.getNumOutputs(), output.length); chan++) {\n                const dspOutput = this.fOutChannels[chan];\n                output[chan].set(dspOutput);\n                // console.log(\"chan: \" + chan + \" output: \" + dspOutput[0]);\n            }\n            forPlot = output;\n        }\n\n        // PlotHandler handling \n        if (this.fPlotHandler) {\n            this.fPlotHandler(forPlot, this.fBufferNum++, (this.fCachedEvents.length ? this.fCachedEvents : undefined));\n            this.fCachedEvents = [];\n        }\n\n        return true;\n    }\n\n    metadata(handler: MetadataHandler) { super.metadata(handler); }\n\n    getNumInputs() {\n        return this.fInstance.api.getNumInputs(this.fDSP);\n    }\n    getNumOutputs() {\n        return this.fInstance.api.getNumOutputs(this.fDSP);\n    }\n\n    setParamValue(path: string, value: number) {\n        if (this.fPlotHandler) this.fCachedEvents.push({ type: \"param\", data: { path, value } });\n        this.fInstance.api.setParamValue(this.fDSP, this.fPathTable[path], value);\n    }\n    getParamValue(path: string) {\n        return this.fInstance.api.getParamValue(this.fDSP, this.fPathTable[path]);\n    }\n\n    getMeta() { return this.fJSONDsp; }\n    getJSON() { return this.fInstance.json; }\n    getDescriptors() { return this.fDescriptor; }\n    getUI() { return this.fJSONDsp.ui; }\n}\n\nexport class FaustWebAudioDspVoice {\n    // Voice state\n    static get kActiveVoice() { return 0; }\n    static get kFreeVoice() { return -1; }\n    static get kReleaseVoice() { return -2; }\n    static get kLegatoVoice() { return -3; }\n    static get kNoVoice() { return -4; }\n    static get VOICE_STOP_LEVEL() { return 0.0005; }\n\n    private fFreqLabel: number[] = [];\n    private fGateLabel: number[] = [];\n    private fGainLabel: number[] = [];\n    private fKeyLabel: number[] = [];\n    private fVelLabel: number[] = [];\n    private fDSP: number;            // Voice DSP location in wasm memory\n    private fAPI: IFaustDspInstance; // Voice DSP code\n    // Accessed by PolyDSPImp class\n    fCurNote = FaustWebAudioDspVoice.kFreeVoice;\n    fNextNote = -1;\n    fNextVel = -1;\n    fDate = 0;\n    fLevel = 0;\n    fRelease = 0;\n\n    constructor($dsp: number, api: IFaustDspInstance, inputItems: string[], pathTable: { [address: string]: number }, sampleRate: number) {\n        this.fDSP = $dsp;\n        this.fAPI = api;\n        this.fAPI.init(this.fDSP, sampleRate);\n        this.extractPaths(inputItems, pathTable);\n    }\n\n    static midiToFreq(note: number) { return 440.0 * 2 ** ((note - 69) / 12); }\n\n    static normalizeVelocity(velocity: number) { return velocity / 127.0; }\n\n    private extractPaths(inputItems: string[], pathTable: { [address: string]: number }) {\n        inputItems.forEach((item) => {\n            if (item.endsWith(\"/gate\")) {\n                this.fGateLabel.push(pathTable[item]);\n            } else if (item.endsWith(\"/freq\")) {\n                this.fFreqLabel.push(pathTable[item]);\n            } else if (item.endsWith(\"/key\")) {\n                this.fKeyLabel.push(pathTable[item]);\n            } else if (item.endsWith(\"/gain\")) {\n                this.fGainLabel.push(pathTable[item]);\n            } else if (item.endsWith(\"/vel\") && item.endsWith(\"/velocity\")) {\n                this.fVelLabel.push(pathTable[item]);\n            }\n        });\n    }\n\n    // Public API\n    keyOn(pitch: number, velocity: number, legato: boolean = false) {\n        if (legato) {\n            this.fNextNote = pitch;\n            this.fNextVel = velocity;\n        } else {\n            this.fFreqLabel.forEach(index => this.fAPI.setParamValue(this.fDSP, index, FaustWebAudioDspVoice.midiToFreq(pitch)));\n            this.fGateLabel.forEach(index => this.fAPI.setParamValue(this.fDSP, index, 1));\n            this.fGainLabel.forEach(index => this.fAPI.setParamValue(this.fDSP, index, FaustWebAudioDspVoice.normalizeVelocity(velocity)));\n            this.fKeyLabel.forEach(index => this.fAPI.setParamValue(this.fDSP, index, pitch));\n            this.fVelLabel.forEach(index => this.fAPI.setParamValue(this.fDSP, index, velocity));\n            // Keep pitch\n            this.fCurNote = pitch;\n        }\n    }\n\n    keyOff(hard: boolean = false) {\n        this.fGateLabel.forEach(index => this.fAPI.setParamValue(this.fDSP, index, 0));\n        if (hard) {\n            this.fCurNote = FaustWebAudioDspVoice.kFreeVoice;\n        } else {\n            this.fRelease = this.fAPI.getSampleRate(this.fDSP) / 2;\n            this.fCurNote = FaustWebAudioDspVoice.kReleaseVoice;\n        }\n    }\n\n    computeLegato(bufferSize: number, $inputs: number, $outputZero: number, $outputsHalf: number) {\n\n        let size = bufferSize / 2;\n\n        // Reset envelops\n        this.fGateLabel.forEach(index => this.fAPI.setParamValue(this.fDSP, index, 0));\n\n        // Compute current voice on half buffer\n        this.fAPI.compute(this.fDSP, size, $inputs, $outputZero);\n\n        // Start next keyOn\n        this.keyOn(this.fNextNote, this.fNextVel);\n\n        // Compute on second half buffer\n        this.fAPI.compute(this.fDSP, size, $inputs, $outputsHalf);\n    }\n\n    compute(bufferSize: number, $inputs: number, $outputs: number) {\n        this.fAPI.compute(this.fDSP, bufferSize, $inputs, $outputs);\n    }\n\n    setParamValue(index: number, value: number) {\n        this.fAPI.setParamValue(this.fDSP, index, value);\n    }\n    getParamValue(index: number) {\n        return this.fAPI.getParamValue(this.fDSP, index);\n    }\n}\n\nexport class FaustPolyWebAudioDsp extends FaustBaseWebAudioDsp implements IFaustPolyWebAudioDsp {\n\n    private fInstance: FaustPolyDspInstance;\n    private fEffect!: number;\n    private fJSONEffect: FaustDspMeta | null;\n    private fAudioMixing!: number;\n    private fAudioMixingHalf!: number;\n    private fVoiceTable: FaustWebAudioDspVoice[];\n\n    constructor(instance: FaustPolyDspInstance, sampleRate: number, sampleSize: number, bufferSize: number, soundfiles: LooseFaustDspFactory[\"soundfiles\"]) {\n        super(sampleSize, bufferSize, soundfiles);\n        this.fInstance = instance;\n\n        console.log(`sampleSize: ${sampleSize} bufferSize: ${bufferSize}`);\n\n        // Create JSON for voice\n        this.fJSONDsp = JSON.parse(this.fInstance.voiceJSON);\n\n        // Create JSON for effect\n        this.fJSONEffect = (this.fInstance.effectAPI && this.fInstance.effectJSON) ? JSON.parse(this.fInstance.effectJSON) : null;\n\n        // Setup GUI\n        FaustBaseWebAudioDsp.parseUI(this.fJSONDsp.ui, this.fUICallback);\n        if (this.fJSONEffect) FaustBaseWebAudioDsp.parseUI(this.fJSONEffect.ui, this.fUICallback);\n\n        // Setup wasm memory\n        this.fEndMemory = this.initMemory();\n\n        // Init DSP voices\n        this.fVoiceTable = [];\n        for (let voice = 0; voice < this.fInstance.voices; voice++) {\n            this.fVoiceTable.push(new FaustWebAudioDspVoice(\n                this.fJSONDsp.size * voice,\n                this.fInstance.voiceAPI,\n                this.fInputsItems,\n                this.fPathTable,\n                sampleRate\n            ));\n        }\n\n        // Init effect\n        if (this.fInstance.effectAPI) this.fInstance.effectAPI.init(this.fEffect, sampleRate);\n\n        // Init soundfiles memory is needed\n        if (this.fSoundfiles.length > 0) {\n            // Create memory allocator for soundfiles in wasm memory, starting at the end of DSP memory\n            const allocator = new WasmAllocator(this.fInstance.memory, this.fEndMemory);\n            // Init soundfiles memory for all voices\n            for (let voice = 0; voice < this.fInstance.voices; voice++) {\n                this.initSoundfileMemory(allocator, this.fJSONDsp.size * voice);\n            }\n        }\n    }\n\n    private initMemory() {\n\n        // Effet start at the end of all DSP voices\n        this.fEffect = this.fJSONDsp.size * this.fInstance.voices;\n\n        // Audio buffer start at the end of effect\n        const $audio = this.fEffect + (this.fJSONEffect ? this.fJSONEffect.size : 0);\n\n        // Setup audio pointers offset\n        this.fAudioInputs = $audio;\n        this.fAudioOutputs = this.fAudioInputs + this.getNumInputs() * this.fPtrSize;\n        this.fAudioMixing = this.fAudioOutputs + this.getNumOutputs() * this.fPtrSize;\n        this.fAudioMixingHalf = this.fAudioMixing + this.getNumOutputs() * this.fPtrSize;\n\n        // Prepare wasm memory layout\n        const $audioInputs = this.fAudioMixingHalf + this.getNumOutputs() * this.fPtrSize;\n        const $audioOutputs = $audioInputs + this.getNumInputs() * this.fBufferSize * this.fSampleSize;\n        const $audioMixing = $audioOutputs + this.getNumOutputs() * this.fBufferSize * this.fSampleSize;\n\n        // Compute memory end in bytes\n        const endMemory = $audioMixing + this.getNumOutputs() * this.fBufferSize * this.fSampleSize;\n\n        // Setup Int32 and Real views of the memory\n        const HEAP = this.fInstance.memory.buffer;\n        const HEAP32 = new Int32Array(HEAP);\n        const HEAPF = (this.fSampleSize === 4) ? new Float32Array(HEAP) : new Float64Array(HEAP);\n\n        if (this.getNumInputs() > 0) {\n            for (let chan = 0; chan < this.getNumInputs(); chan++) {\n                HEAP32[(this.fAudioInputs >> 2) + chan] = $audioInputs + this.fBufferSize * this.fSampleSize * chan;\n            }\n            // Prepare Ins buffer tables\n            const dspInChans = HEAP32.subarray(this.fAudioInputs >> 2, (this.fAudioInputs + this.getNumInputs() * this.fPtrSize) >> 2);\n            for (let chan = 0; chan < this.getNumInputs(); chan++) {\n                this.fInChannels[chan] = HEAPF.subarray(dspInChans[chan] >> Math.log2(this.fSampleSize), (dspInChans[chan] + this.fBufferSize * this.fSampleSize) >> Math.log2(this.fSampleSize));\n            }\n        }\n        if (this.getNumOutputs() > 0) {\n            for (let chan = 0; chan < this.getNumOutputs(); chan++) {\n                HEAP32[(this.fAudioOutputs >> 2) + chan] = $audioOutputs + this.fBufferSize * this.fSampleSize * chan;\n                HEAP32[(this.fAudioMixing >> 2) + chan] = $audioMixing + this.fBufferSize * this.fSampleSize * chan;\n                HEAP32[(this.fAudioMixingHalf >> 2) + chan] = $audioMixing + this.fBufferSize * this.fSampleSize * chan + this.fBufferSize / 2 * this.fSampleSize;\n            }\n            // Prepare Out buffer tables\n            const dspOutChans = HEAP32.subarray(this.fAudioOutputs >> 2, (this.fAudioOutputs + this.getNumOutputs() * this.fPtrSize) >> 2);\n            for (let chan = 0; chan < this.getNumOutputs(); chan++) {\n                this.fOutChannels[chan] = HEAPF.subarray(dspOutChans[chan] >> Math.log2(this.fSampleSize), (dspOutChans[chan] + this.fBufferSize * this.fSampleSize) >> Math.log2(this.fSampleSize));\n            }\n        }\n\n        return endMemory;\n    }\n\n    toString() {\n        return `============== Poly Memory layout ==============\n        this.fBufferSize: ${this.fBufferSize}\n        this.fJSONDsp.size: ${this.fJSONDsp.size}\n        this.fAudioInputs: ${this.fAudioInputs}\n        this.fAudioOutputs: ${this.fAudioOutputs}\n        this.fAudioMixing: ${this.fAudioMixing}\n        this.fAudioMixingHalf: ${this.fAudioMixingHalf}`;\n    }\n\n    private allocVoice(voice: number, type: number) {\n        this.fVoiceTable[voice].fDate++;\n        this.fVoiceTable[voice].fCurNote = type;\n        return voice;\n    }\n\n    private getPlayingVoice(pitch: number) {\n        let voicePlaying = FaustWebAudioDspVoice.kNoVoice;\n        let oldestDatePlaying = Number.MAX_VALUE;\n\n        for (let voice = 0; voice < this.fInstance.voices; voice++) {\n            if (this.fVoiceTable[voice].fCurNote === pitch) {\n                // Keeps oldest playing voice\n                if (this.fVoiceTable[voice].fDate < oldestDatePlaying) {\n                    oldestDatePlaying = this.fVoiceTable[voice].fDate;\n                    voicePlaying = voice;\n                }\n            }\n        }\n        return voicePlaying;\n    }\n\n    private getFreeVoice() {\n        for (let voice = 0; voice < this.fInstance.voices; voice++) {\n            if (this.fVoiceTable[voice].fCurNote === FaustWebAudioDspVoice.kFreeVoice) {\n                return this.allocVoice(voice, FaustWebAudioDspVoice.kActiveVoice);\n            }\n        }\n\n        let voiceRelease = FaustWebAudioDspVoice.kNoVoice;\n        let voicePlaying = FaustWebAudioDspVoice.kNoVoice;\n        let oldestDateRelease = Number.MAX_VALUE;\n        let oldestDatePlaying = Number.MAX_VALUE;\n\n        for (let voice = 0; voice < this.fInstance.voices; voice++) { // Scan all voices\n            // Try to steal a voice in DspVoice.kReleaseVoice mode...\n            if (this.fVoiceTable[voice].fCurNote === FaustWebAudioDspVoice.kReleaseVoice) {\n                // Keeps oldest release voice\n                if (this.fVoiceTable[voice].fDate < oldestDateRelease) {\n                    oldestDateRelease = this.fVoiceTable[voice].fDate;\n                    voiceRelease = voice;\n                }\n            } else if (this.fVoiceTable[voice].fDate < oldestDatePlaying) {\n                oldestDatePlaying = this.fVoiceTable[voice].fDate;\n                voicePlaying = voice;\n            }\n        }\n        // Then decide which one to steal\n        if (oldestDateRelease !== Number.MAX_VALUE) {\n            console.log(`Steal release voice : voice_date = ${this.fVoiceTable[voiceRelease].fDate} voice = ${voiceRelease}`);\n            return this.allocVoice(voiceRelease, FaustWebAudioDspVoice.kLegatoVoice);\n        }\n        if (oldestDatePlaying !== Number.MAX_VALUE) {\n            console.log(`Steal playing voice : voice_date = ${this.fVoiceTable[voicePlaying].fDate} voice = ${voicePlaying}`);\n            return this.allocVoice(voicePlaying, FaustWebAudioDspVoice.kLegatoVoice);\n        }\n        return FaustWebAudioDspVoice.kNoVoice;\n    }\n\n    // Public API\n    compute(input: Float32Array[], output: Float32Array[]) {\n\n        // Check DSP state\n        if (this.fDestroyed) return false;\n\n        // Init memory again on first call (since WebAssembly.memory.grow() may have been called)\n        if (this.fFirstCall) {\n            this.initMemory();\n            this.fFirstCall = false;\n        }\n\n        // Check Processing state: the node returns 'true' to stay in the graph, even if not processing\n        if (!this.fProcessing) return true;\n\n        // Check inputs\n        if (this.getNumInputs() > 0 && (!input || !input[0] || input[0].length === 0)) {\n            // console.log(\"Process input error\");\n            return true;\n        }\n\n        // Check outputs\n        if (this.getNumOutputs() > 0 && (!output || !output[0] || output[0].length === 0)) {\n            // console.log(\"Process output error\");\n            return true;\n        }\n\n        // Copy inputs\n        if (input !== undefined) {\n            for (let chan = 0; chan < Math.min(this.getNumInputs(), input.length); ++chan) {\n                const dspInput = this.fInChannels[chan];\n                dspInput.set(input[chan]);\n            }\n        }\n\n        // Possibly call an externally given callback (for instance to synchronize playing a MIDIFile...)\n        if (this.fComputeHandler) this.fComputeHandler(this.fBufferSize);\n\n        // Compute\n        this.fInstance.mixerAPI.clearOutput(this.fBufferSize, this.getNumOutputs(), this.fAudioOutputs);\n        this.fVoiceTable.forEach((voice) => {\n            if (voice.fCurNote === FaustWebAudioDspVoice.kLegatoVoice) {\n                // Play from current note and next note\n                voice.computeLegato(this.fBufferSize, this.fAudioInputs, this.fAudioMixing, this.fAudioMixingHalf);\n                // FadeOut on first half buffer\n                this.fInstance.mixerAPI.fadeOut(this.fBufferSize / 2, this.getNumOutputs(), this.fAudioMixing);\n                // Mix it in result\n                voice.fLevel = this.fInstance.mixerAPI.mixCheckVoice(this.fBufferSize, this.getNumOutputs(), this.fAudioMixing, this.fAudioOutputs);\n            } else if (voice.fCurNote !== FaustWebAudioDspVoice.kFreeVoice) {\n                // Compute current note\n                voice.compute(this.fBufferSize, this.fAudioInputs, this.fAudioMixing);\n                // Mix it in result\n                voice.fLevel = this.fInstance.mixerAPI.mixCheckVoice(this.fBufferSize, this.getNumOutputs(), this.fAudioMixing, this.fAudioOutputs);\n                // Check the level to possibly set the voice in kFreeVoice again\n                voice.fRelease -= this.fBufferSize;\n                if ((voice.fCurNote == FaustWebAudioDspVoice.kReleaseVoice) && ((voice.fLevel < FaustWebAudioDspVoice.VOICE_STOP_LEVEL) && (voice.fRelease < 0))) {\n                    voice.fCurNote = FaustWebAudioDspVoice.kFreeVoice;\n                }\n            }\n        });\n        if (this.fInstance.effectAPI) this.fInstance.effectAPI.compute(this.fEffect, this.fBufferSize, this.fAudioOutputs, this.fAudioOutputs);\n\n        // Update bargraph\n        this.updateOutputs();\n\n        if (output !== undefined) {\n            // Copy outputs\n            for (let chan = 0; chan < Math.min(this.getNumOutputs(), output.length); chan++) {\n                const dspOutput = this.fOutChannels[chan];\n                output[chan].set(dspOutput);\n            }\n\n            // PlotHandler handling \n            if (this.fPlotHandler) {\n                this.fPlotHandler(output, this.fBufferNum++, (this.fCachedEvents.length ? this.fCachedEvents : undefined));\n                this.fCachedEvents = [];\n            }\n        }\n\n        return true;\n    }\n\n    getNumInputs() {\n        return this.fInstance.voiceAPI.getNumInputs(0);\n    }\n    getNumOutputs() {\n        return this.fInstance.voiceAPI.getNumOutputs(0);\n    }\n\n    private static findPath(o: any, p: string) {\n        if (typeof o !== \"object\") {\n            return false;\n        } else if (o.address) {\n            return (o.address === p);\n        } else {\n            for (const k in o) {\n                if (FaustPolyWebAudioDsp.findPath(o[k], p)) return true;\n            }\n            return false;\n        }\n    }\n\n    setParamValue(path: string, value: number) {\n        if (this.fPlotHandler) this.fCachedEvents.push({ type: \"param\", data: { path, value } });\n        if (this.fJSONEffect && FaustPolyWebAudioDsp.findPath(this.fJSONEffect.ui, path) && this.fInstance.effectAPI) {\n            this.fInstance.effectAPI.setParamValue(this.fEffect, this.fPathTable[path], value);\n        } else {\n            this.fVoiceTable.forEach(voice => voice.setParamValue(this.fPathTable[path], value));\n        }\n    }\n    getParamValue(path: string) {\n        if (this.fJSONEffect && FaustPolyWebAudioDsp.findPath(this.fJSONEffect.ui, path) && this.fInstance.effectAPI) {\n            return this.fInstance.effectAPI.getParamValue(this.fEffect, this.fPathTable[path]);\n        } else {\n            return this.fVoiceTable[0].getParamValue(this.fPathTable[path]);\n        }\n    }\n\n    getMeta() {\n        const o = this.fJSONDsp;\n        const e = this.fJSONEffect;\n        const r = { ...o };\n        if (e) {\n            r.ui = [{\n                type: \"tgroup\", label: \"Sequencer\", items: [\n                    { type: \"vgroup\", label: \"Instrument\", items: o.ui },\n                    { type: \"vgroup\", label: \"Effect\", items: e.ui }\n                ]\n            }];\n        } else {\n            r.ui = [{\n                type: \"tgroup\", label: \"Polyphonic\", items: [\n                    { type: \"vgroup\", label: \"Voices\", items: o.ui }\n                ]\n            }];\n        }\n        return r as FaustDspMeta;\n    }\n\n    getJSON() {\n        return JSON.stringify(this.getMeta());\n    }\n\n    getUI() {\n        return this.getMeta().ui;\n    }\n\n    getDescriptors() { return this.fDescriptor; }\n\n    midiMessage(data: number[] | Uint8Array) {\n        const cmd = data[0] >> 4;\n        const channel = data[0] & 0xf;\n        const data1 = data[1];\n        const data2 = data[2];\n        if (cmd === 8 || (cmd === 9 && data2 === 0)) return this.keyOff(channel, data1, data2);\n        else if (cmd === 9) return this.keyOn(channel, data1, data2);\n        else super.midiMessage(data);\n    };\n\n    ctrlChange(channel: number, ctrl: number, value: number) {\n        if (ctrl === 123 || ctrl === 120) {\n            this.allNotesOff(true);\n        } else {\n            super.ctrlChange(channel, ctrl, value);\n        }\n    }\n\n    keyOn(channel: number, pitch: number, velocity: number) {\n        if (this.fPlotHandler) this.fCachedEvents.push({ type: \"keyOn\", data: [channel, pitch, velocity] });\n        const voice = this.getFreeVoice();\n        this.fVoiceTable[voice].keyOn(pitch, velocity, this.fVoiceTable[voice].fCurNote == FaustWebAudioDspVoice.kLegatoVoice);\n    }\n\n    keyOff(channel: number, pitch: number, velocity: number) {\n        if (this.fPlotHandler) this.fCachedEvents.push({ type: \"keyOff\", data: [channel, pitch, velocity] });\n        const voice = this.getPlayingVoice(pitch);\n        if (voice !== FaustWebAudioDspVoice.kNoVoice) {\n            this.fVoiceTable[voice].keyOff();\n        } else {\n            console.log(\"Playing pitch = %d not found\\n\", pitch);\n        }\n    }\n\n    allNotesOff(hard: boolean = true) {\n        this.fCachedEvents.push({ type: \"ctrlChange\", data: [0, 123, 0] });\n        this.fVoiceTable.forEach(voice => voice.keyOff(hard));\n    }\n}\n", "import { ComputeHandler, FaustBaseWebAudioDsp, FaustMonoWebAudioDsp, FaustPolyWebAudioDsp, IFaustBaseWebAudioDsp, IFaustMonoWebAudioDsp, IFaustPolyWebAudioDsp, MetadataHandler, OutputParamHandler, PlotHandler } from \"./FaustWebAudioDsp\";\nimport { AudioParamDescriptor, FaustUIItem } from \"./types\";\n\n/**\n *  For offline rendering.\n */\nexport interface IFaustOfflineProcessor extends IFaustBaseWebAudioDsp {\n    render(inputs?: Float32Array[], length?: number, onUpdate?: (sample: number) => any): Float32Array[];\n}\n\nexport interface IFaustMonoOfflineProcessor extends IFaustOfflineProcessor, IFaustMonoWebAudioDsp { }\nexport interface IFaustPolyOfflineProcessor extends IFaustOfflineProcessor, IFaustPolyWebAudioDsp { }\n\nexport class FaustOfflineProcessor<Poly extends boolean = false> {\n    protected fDSPCode!: Poly extends true ? FaustPolyWebAudioDsp : FaustMonoWebAudioDsp;\n\n    protected fBufferSize: number;\n    protected fInputs: Float32Array[];\n    protected fOutputs: Float32Array[];\n\n    constructor(instance: Poly extends true ? FaustPolyWebAudioDsp : FaustMonoWebAudioDsp, bufferSize: number) {\n        this.fDSPCode = instance;\n        this.fBufferSize = bufferSize;\n        this.fInputs = new Array(this.fDSPCode.getNumInputs()).fill(null).map(() => new Float32Array(bufferSize));\n        this.fOutputs = new Array(this.fDSPCode.getNumOutputs()).fill(null).map(() => new Float32Array(bufferSize));\n    }\n\n    // Public API\n\n    getParameterDescriptors() {\n        const params = [] as AudioParamDescriptor[];\n        // Analyse voice JSON to generate AudioParam parameters\n        const callback = (item: FaustUIItem) => {\n            let param: AudioParamDescriptor | null = null;\n            const polyKeywords = [\"/gate\", \"/freq\", \"/gain\", \"/key\", \"/vel\", \"/velocity\"];\n            const isPolyReserved = \"address\" in item && !!polyKeywords.find(k => item.address.endsWith(k));\n            if (this.fDSPCode instanceof FaustMonoWebAudioDsp || !isPolyReserved) {\n                if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"nentry\") {\n                    param = { name: item.address, defaultValue: item.init || 0, minValue: item.min || 0, maxValue: item.max || 0 };\n                } else if (item.type === \"button\" || item.type === \"checkbox\") {\n                    param = { name: item.address, defaultValue: item.init || 0, minValue: 0, maxValue: 1 };\n                }\n            }\n            if (param) params.push(param);\n        }\n        FaustBaseWebAudioDsp.parseUI(this.fDSPCode.getUI(), callback);\n        return params;\n    }\n    compute(input: Float32Array[], output: Float32Array[]) { return this.fDSPCode.compute(input, output); }\n\n    setOutputParamHandler(handler: OutputParamHandler) { this.fDSPCode.setOutputParamHandler(handler); }\n    getOutputParamHandler() { return this.fDSPCode.getOutputParamHandler(); }\n\n    setComputeHandler(handler: ComputeHandler) { this.fDSPCode.setComputeHandler(handler); }\n    getComputeHandler() { return this.fDSPCode.getComputeHandler(); }\n\n    setPlotHandler(handler: PlotHandler) { this.fDSPCode.setPlotHandler(handler); }\n    getPlotHandler() { return this.fDSPCode.getPlotHandler(); }\n\n    getNumInputs() { return this.fDSPCode.getNumInputs(); }\n    getNumOutputs() { return this.fDSPCode.getNumOutputs(); }\n\n    metadata(handler: MetadataHandler) { }\n\n    midiMessage(data: number[] | Uint8Array) { this.fDSPCode.midiMessage(data); }\n\n    ctrlChange(chan: number, ctrl: number, value: number) { this.fDSPCode.ctrlChange(chan, ctrl, value); }\n    pitchWheel(chan: number, value: number) { this.fDSPCode.pitchWheel(chan, value); }\n\n    setParamValue(path: string, value: number) { this.fDSPCode.setParamValue(path, value); }\n    getParamValue(path: string) { return this.fDSPCode.getParamValue(path); }\n    getParams() { return this.fDSPCode.getParams(); }\n\n    getMeta() { return this.fDSPCode.getMeta(); }\n    getJSON() { return this.fDSPCode.getJSON(); }\n    getDescriptors() { return this.fDSPCode.getDescriptors(); }\n    getUI() { return this.fDSPCode.getUI(); }\n\n    start() { this.fDSPCode.start(); }\n    stop() { this.fDSPCode.stop(); }\n\n    destroy() { this.fDSPCode.destroy(); }\n\n    get hasAccInput() { return this.fDSPCode.hasAccInput; }\n\n    propagateAcc(accelerationIncludingGravity: NonNullable<DeviceMotionEvent[\"accelerationIncludingGravity\"]>, invert: boolean = false) {\n        this.fDSPCode.propagateAcc(accelerationIncludingGravity, invert);\n    }\n\n    get hasGyrInput() { return this.fDSPCode.hasGyrInput; }\n\n    propagateGyr(event: Pick<DeviceOrientationEvent, \"alpha\" | \"beta\" | \"gamma\">) {\n        this.fDSPCode.propagateGyr(event);\n    }\n\n    startSensors(): void { }\n\n    stopSensors(): void { }\n\n    /**\n     * Render frames in an array.\n     *\n     * @param inputs - input signal\n     * @param length - the number of frames to render (default: bufferSize)\n     * @param onUpdate - a callback after each buffer calculated, with an argument \"current sample\"\n     * @return an array of Float32Array with the rendered frames\n     */\n    render(inputs: Float32Array[] = [], length = this.fBufferSize, onUpdate?: (sample: number) => any): Float32Array[] {\n        let l = 0;\n        const outputs = new Array(this.fDSPCode.getNumOutputs()).fill(null).map(() => new Float32Array(length));\n        // The node has to be started before rendering\n        this.fDSPCode.start();\n        while (l < length) {\n            const sliceLength = Math.min(length - l, this.fBufferSize);\n            for (let i = 0; i < this.fDSPCode.getNumInputs(); i++) {\n                let input: Float32Array;\n                if (inputs[i]) {\n                    if (inputs[i].length <= l) {\n                        input = new Float32Array(sliceLength);\n                    } else if (inputs[i].length > l + sliceLength) {\n                        input = inputs[i].subarray(l, l + sliceLength);\n                    } else {\n                        input = inputs[i].subarray(l, inputs[i].length);\n                    }\n                } else {\n                    input = new Float32Array(sliceLength);\n                }\n                this.fInputs[i] = input;\n            }\n            this.fDSPCode.compute(this.fInputs, this.fOutputs);\n            for (let i = 0; i < this.fDSPCode.getNumOutputs(); i++) {\n                const output = this.fOutputs[i];\n                if (sliceLength < this.fBufferSize) {\n                    outputs[i].set(output.subarray(0, sliceLength), l);\n                } else {\n                    outputs[i].set(output, l);\n                }\n            }\n            l += this.fBufferSize;\n            onUpdate?.(l);\n        }\n        // The node can be stopped after rendering\n        this.fDSPCode.stop();\n        return outputs;\n    }\n}\n\nexport class FaustMonoOfflineProcessor extends FaustOfflineProcessor<false> implements IFaustMonoWebAudioDsp {\n}\n\nexport class FaustPolyOfflineProcessor extends FaustOfflineProcessor<true> implements IFaustPolyWebAudioDsp {\n    keyOn(channel: number, pitch: number, velocity: number) { this.fDSPCode.keyOn(channel, pitch, velocity); }\n    keyOff(channel: number, pitch: number, velocity: number) { this.fDSPCode.keyOff(channel, pitch, velocity); }\n    allNotesOff(hard: boolean) { this.fDSPCode.allNotesOff(hard); }\n}\n\nexport default FaustOfflineProcessor;\n", "import type FaustCompiler from \"./FaustCompiler\";\n\ninterface IFaustSvgDiagrams {\n    /**\n     * Generates auxiliary files from Faust code. The output depends on the compiler options.\n     *\n     * @param name - the DSP's name\n     * @param code - Faust code\n     * @param args - compilation args\n     * @returns the svg diagrams as a filename - svg string map\n     */\n    from(name: string, code: string, args: string): Record<string, string>;\n}\n\nclass FaustSvgDiagrams implements IFaustSvgDiagrams {\n    private compiler: FaustCompiler;\n\n    constructor(compiler: FaustCompiler) {\n        this.compiler = compiler;\n    }\n\n    from(name: string, code: string, args: string) {\n        const fs = this.compiler.fs();\n        try {\n            const files: string[] = fs.readdir(`/${name}-svg/`);\n            files.filter(file => file !== \".\" && file !== \"..\").forEach(file => fs.unlink(`/${name}-svg/${file}`));\n        } catch { }\n        const success = this.compiler.generateAuxFiles(name, code, `-lang wasm -o binary -svg ${args}`);\n        if (!success) throw new Error(this.compiler.getErrorMessage());\n        const svgs: Record<string, string> = {};\n        const files: string[] = fs.readdir(`/${name}-svg/`);\n        files.filter(file => file !== \".\" && file !== \"..\").forEach(file => svgs[file] = fs.readFile(`/${name}-svg/${file}`, { encoding: \"utf8\" }) as string);\n        return svgs;\n    }\n}\n\nexport default FaustSvgDiagrams;\n", "import type FaustCompiler from \"./FaustCompiler\";\n\ninterface IFaustCmajor {\n    /**\n     * Generates auxiliary files from Faust code. The output depends on the compiler options.\n     *\n     * @param name - the DSP's name\n     * @param code - Faust code\n     * @param args - compilation args\n     * @returns the Cmajor compiled string\n     */\n    compile(name: string, code: string, args: string): string;\n}\n\nclass FaustCmajor implements IFaustCmajor {\n    private fCompiler: FaustCompiler;\n\n    constructor(compiler: FaustCompiler) {\n        this.fCompiler = compiler;\n    }\n\n    compile(name: string, code: string, args: string) {\n        const fs = this.fCompiler.fs();\n        const success = this.fCompiler.generateAuxFiles(name, code, `-lang cmajor-hybrid -cn ${name} -o ${name}.cmajor`);\n        return (success) ? fs.readFile(`${name}.cmajor`, { encoding: \"utf8\" }) as string : \"\";\n    }\n}\n\nexport default FaustCmajor;\n", "import type { FaustModule, LibFaustWasm, FaustInfoType } from \"./types\";\n\nexport interface ILibFaust extends LibFaustWasm {\n    module(): FaustModule;\n    fs(): typeof FS;\n}\n\nclass LibFaust implements ILibFaust {\n    private fModule: FaustModule;\n    private fCompiler: LibFaustWasm;\n    private fFileSystem: typeof FS;\n\n    constructor(module: FaustModule) {\n        this.fModule = module;\n        this.fCompiler = new module.libFaustWasm();\n        this.fFileSystem = this.fModule.FS;\n    }\n    module() {\n        return this.fModule;\n    }\n    fs() {\n        return this.fFileSystem;\n    }\n    version() {\n        return this.fCompiler.version();\n    }\n    createDSPFactory(name: string, code: string, args: string, useInternalMemory: boolean) {\n        return this.fCompiler.createDSPFactory(name, code, args, useInternalMemory);\n    }\n    deleteDSPFactory(cFactory: number) {\n        return this.fCompiler.deleteDSPFactory(cFactory);\n    }\n    expandDSP(name: string, code: string, args: string) {\n        return this.fCompiler.expandDSP(name, code, args);\n    }\n    generateAuxFiles(name: string, code: string, args: string) {\n        return this.fCompiler.generateAuxFiles(name, code, args);\n    }\n    deleteAllDSPFactories() {\n        return this.fCompiler.deleteAllDSPFactories();\n    }\n    getErrorAfterException() {\n        return this.fCompiler.getErrorAfterException();\n    }\n    cleanupAfterException() {\n        return this.fCompiler.cleanupAfterException();\n    }\n    getInfos(what: FaustInfoType) {\n        return this.fCompiler.getInfos(what);\n    }\n    toString() {\n        return `LibFaust module: ${this.fModule}, compiler: ${this.fCompiler}`;\n    }\n\n}\n\nexport default LibFaust;\n", "export interface WavEncoderOptions {\n    bitDepth: number;\n    float?: boolean;\n    symmetric?: boolean;\n    shared?: boolean;\n    sampleRate: number;\n}\ninterface Format {\n    formatId: number;\n    float: boolean;\n    symmetric: boolean;\n    numberOfChannels: number;\n    sampleRate: number;\n    length: number;\n    bitDepth: number;\n    byteDepth: number;\n}\n\n/**\n * Code from https://github.com/mohayonao/wav-encoder\n */\nclass WavEncoder {\n    static encode(audioBuffer: Float32Array[], options: WavEncoderOptions) {\n        const numberOfChannels = audioBuffer.length;\n        const length = audioBuffer[0].length;\n        const { shared, float } = options;\n        const bitDepth = float ? 32 : ((options.bitDepth | 0) || 16);\n        const byteDepth = bitDepth >> 3;\n        const byteLength = length * numberOfChannels * byteDepth;\n        // eslint-disable-next-line no-undef\n        const AB = shared ? (globalThis.SharedArrayBuffer || globalThis.ArrayBuffer) : globalThis.ArrayBuffer;\n        const ab = new AB((44 + byteLength) * Uint8Array.BYTES_PER_ELEMENT);\n        const dataView = new DataView(ab);\n        const writer = new Writer(dataView);\n        const format: Format = {\n            formatId: float ? 0x0003 : 0x0001,\n            float: !!float,\n            numberOfChannels,\n            sampleRate: options.sampleRate,\n            symmetric: !!options.symmetric,\n            length,\n            bitDepth,\n            byteDepth\n        };\n        this.writeHeader(writer, format);\n        this.writeData(writer, audioBuffer, format);\n        return ab;\n    }\n    private static writeHeader(writer: Writer, format: Format) {\n        const { formatId, sampleRate, bitDepth, numberOfChannels, length, byteDepth } = format;\n        writer.string(\"RIFF\");\n        writer.uint32(writer.dataView.byteLength - 8);\n        writer.string(\"WAVE\");\n        writer.string(\"fmt \");\n        writer.uint32(16);\n        writer.uint16(formatId);\n        writer.uint16(numberOfChannels);\n        writer.uint32(sampleRate);\n        writer.uint32(sampleRate * numberOfChannels * byteDepth);\n        writer.uint16(numberOfChannels * byteDepth);\n        writer.uint16(bitDepth);\n        writer.string(\"data\");\n        writer.uint32(length * numberOfChannels * byteDepth);\n        return writer.pos;\n    }\n    private static writeData(writer: Writer, audioBuffer: Float32Array[], format: Format) {\n        const { bitDepth, float, length, numberOfChannels, symmetric } = format;\n        if (bitDepth === 32 && float) {\n            const { dataView, pos } = writer;\n            const ab = dataView.buffer;\n            const f32View = new Float32Array(ab, pos);\n            if (numberOfChannels === 1) {\n                f32View.set(audioBuffer[0]);\n                return;\n            }\n            for (let ch = 0; ch < numberOfChannels; ch++) {\n                const channel = audioBuffer[ch];\n                for (let i = 0; i < length; i++) {\n                    f32View[i * numberOfChannels + ch] = channel[i];\n                }\n            }\n            return;\n        }\n        const encoderOption = float ? \"f\" : symmetric ? \"s\" : \"\";\n        const methodName = \"pcm\" + bitDepth + encoderOption;\n\n        if (!(writer as any)[methodName]) {\n            throw new TypeError(\"Not supported bit depth: \" + bitDepth);\n        }\n\n        const write: (value: number) => void = (writer as any)[methodName].bind(writer);\n\n        for (let i = 0; i < length; i++) {\n            for (let j = 0; j < numberOfChannels; j++) {\n                write(audioBuffer[j][i]);\n            }\n        }\n    }\n}\n\nclass Writer {\n    pos = 0;\n    dataView: DataView;\n    constructor(dataView: DataView) {\n        this.dataView = dataView;\n    }\n    int16(value: number) {\n        this.dataView.setInt16(this.pos, value, true);\n        this.pos += 2;\n    }\n    uint16(value: number) {\n        this.dataView.setUint16(this.pos, value, true);\n        this.pos += 2;\n    }\n    uint32(value: number) {\n        this.dataView.setUint32(this.pos, value, true);\n        this.pos += 4;\n    }\n    string(value: string) {\n        for (let i = 0, imax = value.length; i < imax; i++) {\n            this.dataView.setUint8(this.pos++, value.charCodeAt(i));\n        }\n    }\n    pcm8(valueIn: number) {\n        let value = valueIn;\n        value = Math.max(-1, Math.min(value, +1));\n        value = (value * 0.5 + 0.5) * 255;\n        value = Math.round(value) | 0;\n        this.dataView.setUint8(this.pos, value/* , true*/);\n        this.pos += 1;\n    }\n    pcm8s(valueIn: number) {\n        let value = valueIn;\n        value = Math.round(value * 128) + 128;\n        value = Math.max(0, Math.min(value, 255));\n        this.dataView.setUint8(this.pos, value/* , true*/);\n        this.pos += 1;\n    }\n    pcm16(valueIn: number) {\n        let value = valueIn;\n        value = Math.max(-1, Math.min(value, +1));\n        value = value < 0 ? value * 32768 : value * 32767;\n        value = Math.round(value) | 0;\n        this.dataView.setInt16(this.pos, value, true);\n        this.pos += 2;\n    }\n    pcm16s(valueIn: number) {\n        let value = valueIn;\n        value = Math.round(value * 32768);\n        value = Math.max(-32768, Math.min(value, 32767));\n        this.dataView.setInt16(this.pos, value, true);\n        this.pos += 2;\n    }\n    pcm24(valueIn: number) {\n        let value = valueIn;\n        value = Math.max(-1, Math.min(value, +1));\n        value = value < 0 ? 0x1000000 + value * 8388608 : value * 8388607;\n        value = Math.round(value) | 0;\n\n        const x0 = (value >> 0) & 0xFF;\n        const x1 = (value >> 8) & 0xFF;\n        const x2 = (value >> 16) & 0xFF;\n\n        this.dataView.setUint8(this.pos + 0, x0);\n        this.dataView.setUint8(this.pos + 1, x1);\n        this.dataView.setUint8(this.pos + 2, x2);\n        this.pos += 3;\n    }\n    pcm24s(valueIn: number) {\n        let value = valueIn;\n        value = Math.round(value * 8388608);\n        value = Math.max(-8388608, Math.min(value, 8388607));\n\n        const x0 = (value >> 0) & 0xFF;\n        const x1 = (value >> 8) & 0xFF;\n        const x2 = (value >> 16) & 0xFF;\n\n        this.dataView.setUint8(this.pos + 0, x0);\n        this.dataView.setUint8(this.pos + 1, x1);\n        this.dataView.setUint8(this.pos + 2, x2);\n        this.pos += 3;\n    }\n    pcm32(valueIn: number) {\n        let value = valueIn;\n        value = Math.max(-1, Math.min(value, +1));\n        value = value < 0 ? value * 2147483648 : value * 2147483647;\n        value = Math.round(value) | 0;\n        this.dataView.setInt32(this.pos, value, true);\n        this.pos += 4;\n    }\n    pcm32s(valueIn: number) {\n        let value = valueIn;\n        value = Math.round(value * 2147483648);\n        value = Math.max(-2147483648, Math.min(value, +2147483647));\n        this.dataView.setInt32(this.pos, value, true);\n        this.pos += 4;\n    }\n    pcm32f(value: number) {\n        this.dataView.setFloat32(this.pos, value, true);\n        this.pos += 4;\n    }\n}\n\nexport default WavEncoder;\n", "export interface WavDecoderOptions {\n    symmetric?: boolean;\n    shared?: boolean;\n}\ninterface Format {\n    formatId: number;\n    float: boolean;\n    numberOfChannels: number;\n    sampleRate: number;\n    byteRate: number;\n    blockSize: number;\n    bitDepth: number;\n}\n\n/**\n * Code from https://github.com/mohayonao/wav-decoder\n */\nclass WavDecoder {\n    static decode(buffer: ArrayBuffer, options?: WavDecoderOptions) {\n        const dataView = new DataView(buffer);\n        const reader = new Reader(dataView);\n        if (reader.string(4) !== \"RIFF\") {\n            throw new TypeError(\"Invalid WAV file\");\n        }\n        reader.uint32(); // skip file length\n        if (reader.string(4) !== \"WAVE\") {\n            throw new TypeError(\"Invalid WAV file\");\n        }\n        let format: Format | null = null;\n        let audioData: {\n            numberOfChannels: number;\n            length: number;\n            sampleRate: number;\n            channelData: Float32Array[];\n        } | null = null;\n        do {\n            const chunkType = reader.string(4);\n            const chunkSize = reader.uint32();\n            if (chunkType === \"fmt \") {\n                format = this.decodeFormat(reader, chunkSize);\n            } else if (chunkType === \"data\") {\n                audioData = this.decodeData(reader, chunkSize, format as Format, options || {});\n            } else {\n                reader.skip(chunkSize);\n            }\n        } while (audioData === null);\n        return audioData;\n    }\n    private static decodeFormat(reader: Reader, chunkSize: number) {\n        const formats = {\n            0x0001: \"lpcm\",\n            0x0003: \"lpcm\"\n        };\n        const formatId = reader.uint16();\n        if (!formats.hasOwnProperty(formatId)) {\n            throw new TypeError(\"Unsupported format in WAV file: 0x\" + formatId.toString(16));\n        }\n        const format: Format = {\n            formatId: formatId,\n            float: formatId === 0x0003,\n            numberOfChannels: reader.uint16(),\n            sampleRate: reader.uint32(),\n            byteRate: reader.uint32(),\n            blockSize: reader.uint16(),\n            bitDepth: reader.uint16()\n        };\n        reader.skip(chunkSize - 16);\n        return format;\n    }\n    private static decodeData(reader: Reader, chunkSizeIn: number, format: Format, options: WavDecoderOptions) {\n        const chunkSize = Math.min(chunkSizeIn, reader.remain());\n        const length = Math.floor(chunkSize / format.blockSize);\n        const numberOfChannels = format.numberOfChannels;\n        const sampleRate = format.sampleRate;\n        const channelData: Float32Array[] = new Array(numberOfChannels);\n        for (let ch = 0; ch < numberOfChannels; ch++) {\n            const AB = options.shared ? (globalThis.SharedArrayBuffer || globalThis.ArrayBuffer) : globalThis.ArrayBuffer;\n            const ab = new AB(length * Float32Array.BYTES_PER_ELEMENT);\n            channelData[ch] = new Float32Array(ab);\n        }\n        this.readPCM(reader, channelData, length, format, options);\n        return {\n            numberOfChannels,\n            length,\n            sampleRate,\n            channelData\n        };\n    }\n    private static readPCM(reader: Reader, channelData: Float32Array[], length: number, format: Format, options: WavDecoderOptions) {\n        const bitDepth = format.bitDepth;\n        const decoderOption = format.float ? \"f\" : options.symmetric ? \"s\" : \"\";\n        const methodName = \"pcm\" + bitDepth + decoderOption as `pcm${8 | 16 | 32}${\"f\" | \"s\" | \"\"}`;\n        if (!(reader as any)[methodName]) {\n            throw new TypeError(\"Not supported bit depth: \" + format.bitDepth);\n        }\n        const read: () => number = (reader as any)[methodName].bind(reader);\n        const numberOfChannels = format.numberOfChannels;\n        for (let i = 0; i < length; i++) {\n            for (let ch = 0; ch < numberOfChannels; ch++) {\n                channelData[ch][i] = read();\n            }\n        }\n    }\n}\n\nclass Reader {\n    pos = 0;\n    dataView: DataView;\n    constructor(dataView: DataView) {\n        this.dataView = dataView;\n    }\n    remain() {\n        return this.dataView.byteLength - this.pos;\n    }\n    skip(n: number) {\n        this.pos += n;\n    }\n    uint8() {\n        const data = this.dataView.getUint8(this.pos);\n        this.pos += 1;\n        return data;\n    }\n    int16() {\n        const data = this.dataView.getInt16(this.pos, true);\n        this.pos += 2;\n        return data;\n    }\n    uint16() {\n        const data = this.dataView.getUint16(this.pos, true);\n        this.pos += 2;\n        return data;\n    }\n    uint32() {\n        const data = this.dataView.getUint32(this.pos, true);\n        this.pos += 4;\n        return data;\n    }\n    string(n: number) {\n        let data = \"\";\n        for (let i = 0; i < n; i++) {\n            data += String.fromCharCode(this.uint8());\n        }\n        return data;\n    }\n    pcm8() {\n        const data = this.dataView.getUint8(this.pos) - 128;\n        this.pos += 1;\n        return data < 0 ? data / 128 : data / 127;\n    }\n    pcm8s() {\n        const data = this.dataView.getUint8(this.pos) - 127.5;\n        this.pos += 1;\n        return data / 127.5;\n    }\n    pcm16() {\n        const data = this.dataView.getInt16(this.pos, true);\n        this.pos += 2;\n        return data < 0 ? data / 32768 : data / 32767;\n    }\n    pcm16s() {\n        const data = this.dataView.getInt16(this.pos, true);\n        this.pos += 2;\n        return data / 32768;\n    }\n    pcm24() {\n        const x0 = this.dataView.getUint8(this.pos + 0);\n        const x1 = this.dataView.getUint8(this.pos + 1);\n        const x2 = this.dataView.getUint8(this.pos + 2);\n        const xx = (x0 + (x1 << 8) + (x2 << 16));\n\n        const data = xx > 0x800000 ? xx - 0x1000000 : xx;\n        this.pos += 3;\n        return data < 0 ? data / 8388608 : data / 8388607;\n    }\n    pcm24s() {\n        const x0 = this.dataView.getUint8(this.pos + 0);\n        const x1 = this.dataView.getUint8(this.pos + 1);\n        const x2 = this.dataView.getUint8(this.pos + 2);\n        const xx = (x0 + (x1 << 8) + (x2 << 16));\n\n        const data = xx > 0x800000 ? xx - 0x1000000 : xx;\n        this.pos += 3;\n        return data / 8388608;\n    }\n    pcm32() {\n        const data = this.dataView.getInt32(this.pos, true);\n        this.pos += 4;\n        return data < 0 ? data / 2147483648 : data / 2147483647;\n    }\n    pcm32s() {\n        const data = this.dataView.getInt32(this.pos, true);\n        this.pos += 4;\n        return data / 2147483648;\n    }\n    pcm32f() {\n        const data = this.dataView.getFloat32(this.pos, true);\n        this.pos += 4;\n        return data;\n    }\n    pcm64f() {\n        const data = this.dataView.getFloat64(this.pos, true);\n        this.pos += 8;\n        return data;\n    }\n}\n\nexport default WavDecoder;\n", "import { FaustBaseWebAudioDsp } from \"./FaustWebAudioDsp\";\r\nimport type { AudioData, FaustDspMeta, FaustUIItem, LooseFaustDspFactory } from \"./types\";\r\n\r\n/** Read metadata and fetch soundfiles */\r\nclass SoundfileReader {\r\n\r\n    // Set the fallback paths\r\n    static get fallbackPaths() { return [location.href, this.getParentUrl(location.href), location.origin]; }\r\n\r\n    /**\r\n     * Extract the parent URL from an URL.\r\n     * @param url : the URL\r\n     * @returns : the parent URL\r\n     */\r\n    private static getParentUrl(url: string) {\r\n        return url.substring(0, url.lastIndexOf('/') + 1);\r\n    }\r\n\r\n    /**\r\n     * Convert an audio buffer to audio data.\r\n     * \r\n     * @param audioBuffer : the audio buffer to convert\r\n     * @returns : the audio data\r\n     */\r\n    private static toAudioData(audioBuffer: AudioBuffer): AudioData {\r\n        const { sampleRate, numberOfChannels } = audioBuffer;\r\n        return {\r\n            sampleRate,\r\n            audioBuffer: new Array(numberOfChannels).fill(null).map((v, i) => audioBuffer.getChannelData(i))\r\n        } as AudioData;\r\n    }\r\n\r\n    /**\r\n     * Extract the URLs from the metadata.\r\n     * \r\n     * @param dspMeta : the metadata\r\n     * @returns : the URLs\r\n     */\r\n    static findSoundfilesFromMeta(dspMeta: FaustDspMeta): LooseFaustDspFactory[\"soundfiles\"] {\r\n        const soundfiles: LooseFaustDspFactory[\"soundfiles\"] = {};\r\n        const callback = (item: FaustUIItem) => {\r\n            if (item.type === \"soundfile\") {\r\n                const urls = FaustBaseWebAudioDsp.splitSoundfileNames(item.url);\r\n                // soundfiles.map[item.label] = urls;\r\n                urls.forEach(url => soundfiles[url] = null);\r\n            }\r\n        };\r\n        FaustBaseWebAudioDsp.parseUI(dspMeta.ui, callback);\r\n        return soundfiles;\r\n    }\r\n    /**\r\n     * Check if the file exists.\r\n     * \r\n     * @param url : the url of the file to check\r\n     * @returns : true if the file exists, otherwise false\r\n     */\r\n    private static async checkFileExists(url: string): Promise<boolean> {\r\n        try {\r\n            console.log(`\"checkFileExists\" url: ${url}`);\r\n            // Fetch in \"HEAD\" mode does not properly work with the service-worker.js cache, so use \"GET\" mode for now\r\n            //const response = await fetch(url, { method: \"HEAD\" });\r\n            const response = await fetch(url);\r\n            console.log(`\"checkFileExists\" response.ok: ${response.ok}`);\r\n            return response.ok; // Will be true if the status code is 200-299\r\n        } catch (error) {\r\n            console.error('Fetch error:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetch the soundfile.\r\n     * \r\n     * @param url : the url of the soundfile\r\n     * @param audioCtx : the audio context\r\n     * @returns : the audio data\r\n     */\r\n    private static async fetchSoundfile(url: string, audioCtx: BaseAudioContext): Promise<AudioData> {\r\n        console.log(`Loading sound file from ${url}`);\r\n        const response = await fetch(url);\r\n        if (!response.ok) throw new Error(`Failed to load sound file from ${url}: ${response.statusText}`);\r\n        // Decode the audio data\r\n        const arrayBuffer = await response.arrayBuffer();\r\n        const audioBuffer = await audioCtx.decodeAudioData(arrayBuffer);\r\n        return this.toAudioData(audioBuffer);\r\n    }\r\n\r\n    /**\r\n     * Load the soundfile.\r\n     * \r\n     * @param filename : the filename\r\n     * @param metaUrls : the metadata URLs\r\n     * @param soundfiles : the soundfiles\r\n     * @param audioCtx : the audio context\r\n     */\r\n    private static async loadSoundfile(filename: string, metaUrls: string[], soundfiles: LooseFaustDspFactory[\"soundfiles\"], audioCtx: BaseAudioContext): Promise<void> {\r\n        if (soundfiles[filename]) return;\r\n        const urlsToCheck = [filename, ...[...metaUrls, ...this.fallbackPaths].map(path => new URL(filename, path.endsWith(\"/\") ? path : `${path}/`).href)];\r\n        const checkResults = await Promise.all(urlsToCheck.map(url => this.checkFileExists(url)));\r\n        const successIndex = checkResults.findIndex(r => !!r);\r\n        if (successIndex === -1) throw new Error(`Failed to load sound file ${filename}, all check failed.`);\r\n        soundfiles[filename] = await this.fetchSoundfile(urlsToCheck[successIndex], audioCtx);\r\n    }\r\n\r\n    /**\r\n     * Load the soundfiles, public API.\r\n     * \r\n     * @param dspMeta : the metadata\r\n     * @param soundfilesIn : the soundfiles\r\n     * @param audioCtx : the audio context\r\n     * @returns : the soundfiles\r\n     */\r\n    static async loadSoundfiles(dspMeta: FaustDspMeta, soundfilesIn: LooseFaustDspFactory[\"soundfiles\"], audioCtx: BaseAudioContext): Promise<LooseFaustDspFactory[\"soundfiles\"]> {\r\n        const metaUrls = FaustBaseWebAudioDsp.extractUrlsFromMeta(dspMeta);\r\n        const soundfiles = this.findSoundfilesFromMeta(dspMeta);\r\n        for (const id in soundfiles) {\r\n            if (soundfilesIn[id]) {\r\n                soundfiles[id] = soundfilesIn[id];\r\n                continue;\r\n            }\r\n            try {\r\n                await this.loadSoundfile(id, metaUrls, soundfiles, audioCtx);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        return soundfiles;\r\n    }\r\n}\r\n\r\nexport default SoundfileReader;\r\n", "\r\n/**\r\n * Layout:\r\n * \r\n * \r\n * invert-isAndroid (uint8)\r\n * new-acc-data-available (uint8)\r\n * new-gyr-data-available (uint8)\r\n * empty (uint8)\r\n * \r\n * acc.x, acc.y, acc.z (f32)\r\n * \r\n * gyr.alpha, gyr.beta, gyr.gamma (f32)\r\n */\r\nexport class FaustAudioWorkletCommunicator {\r\n    protected readonly port: MessagePort;\r\n    protected readonly supportSharedArrayBuffer: boolean;\r\n    protected readonly byteLength: number;\r\n    protected uin8Invert: Uint8ClampedArray;\r\n    protected uin8NewAccData: Uint8ClampedArray;\r\n    protected uin8NewGyrData: Uint8ClampedArray;\r\n    protected f32Acc: Float32Array;\r\n    protected f32Gyr: Float32Array;\r\n    constructor(port: MessagePort) {\r\n        this.port = port;\r\n        this.supportSharedArrayBuffer = !!globalThis.SharedArrayBuffer;\r\n        this.byteLength\r\n            = 4 * Uint8Array.BYTES_PER_ELEMENT\r\n            + 3 * Float32Array.BYTES_PER_ELEMENT\r\n            + 3 * Float32Array.BYTES_PER_ELEMENT;\r\n    }\r\n    initializeBuffer(ab: SharedArrayBuffer | ArrayBuffer) {\r\n        let ptr = 0;\r\n        this.uin8Invert = new Uint8ClampedArray(ab, ptr, 1);\r\n        ptr += Uint8ClampedArray.BYTES_PER_ELEMENT;\r\n        this.uin8NewAccData = new Uint8ClampedArray(ab, ptr, 1);\r\n        ptr += Uint8ClampedArray.BYTES_PER_ELEMENT;\r\n        this.uin8NewGyrData = new Uint8ClampedArray(ab, ptr, 1);\r\n        ptr += Uint8ClampedArray.BYTES_PER_ELEMENT;\r\n        ptr += Uint8ClampedArray.BYTES_PER_ELEMENT;; // empty\r\n        this.f32Acc = new Float32Array(ab, ptr, 3);\r\n        ptr += 3 * Float32Array.BYTES_PER_ELEMENT;\r\n        this.f32Gyr = new Float32Array(ab, ptr, 3);\r\n        ptr += 3 * Float32Array.BYTES_PER_ELEMENT;\r\n    }\r\n    setNewAccDataAvailable(value: boolean) {\r\n        if (!this.uin8NewAccData) return;\r\n        this.uin8NewAccData[0] = +value;\r\n    }\r\n    getNewAccDataAvailable() {\r\n        return !!this.uin8NewAccData?.[0];\r\n    }\r\n    setNewGyrDataAvailable(value: boolean) {\r\n        if (!this.uin8NewGyrData) return;\r\n        this.uin8NewGyrData[0] = +value;\r\n    }\r\n    getNewGyrDataAvailable() {\r\n        return !!this.uin8NewGyrData?.[0];\r\n    }\r\n    setAcc({ x, y, z }: { x: number, y: number, z: number }, invert = false) {\r\n        if (!this.supportSharedArrayBuffer) {\r\n            const e = { type: \"acc\", data: { x, y, z }, invert };\r\n            this.port.postMessage(e);\r\n        }\r\n        if (!this.uin8NewAccData) return;\r\n        this.uin8Invert[0] = +invert;\r\n        this.f32Acc[0] = x;\r\n        this.f32Acc[1] = y;\r\n        this.f32Acc[2] = z;\r\n        this.uin8NewAccData[0] = 1;\r\n    }\r\n    getAcc() {\r\n        if (!this.uin8NewAccData) return;\r\n        const invert = !!this.uin8Invert[0];\r\n        const [x, y, z] = this.f32Acc;\r\n        return { x, y, z, invert };\r\n    }\r\n    setGyr({ alpha, beta, gamma }: { alpha: number, beta: number, gamma: number }) {\r\n        if (!this.supportSharedArrayBuffer) {\r\n            const e = { type: \"gyr\", data: { alpha, beta, gamma } };\r\n            this.port.postMessage(e);\r\n        }\r\n        if (!this.uin8NewGyrData) return;\r\n        this.f32Gyr[0] = alpha;\r\n        this.f32Gyr[1] = beta;\r\n        this.f32Gyr[2] = gamma;\r\n        this.uin8NewGyrData[0] = 1;\r\n    }\r\n    getGyr() {\r\n        if (!this.uin8NewGyrData) return;\r\n        const [alpha, beta, gamma] = this.f32Gyr;\r\n        return { alpha, beta, gamma };\r\n    }\r\n}\r\n\r\nexport class FaustAudioWorkletNodeCommunicator extends FaustAudioWorkletCommunicator {\r\n    constructor(port: MessagePort) {\r\n        super(port);\r\n        if (this.supportSharedArrayBuffer) {\r\n            const sab = new SharedArrayBuffer(this.byteLength);\r\n            this.initializeBuffer(sab);\r\n            this.port.postMessage({ type: \"initSab\", sab });\r\n        } else {\r\n            const ab = new ArrayBuffer(this.byteLength);\r\n            this.initializeBuffer(ab);\r\n        }\r\n    }\r\n}\r\n\r\nexport class FaustAudioWorkletProcessorCommunicator extends FaustAudioWorkletCommunicator {\r\n    constructor(port: MessagePort) {\r\n        super(port);\r\n\r\n        if (this.supportSharedArrayBuffer) {\r\n            this.port.addEventListener(\"message\", (event) => {\r\n                const { data } = event;\r\n                if (data.type === \"initSab\") {\r\n                    this.initializeBuffer(data.sab);\r\n                }\r\n            });\r\n        } else {\r\n            const ab = new ArrayBuffer(this.byteLength);\r\n            this.initializeBuffer(ab);\r\n            this.port.addEventListener(\"message\", (event) => {\r\n                const msg = event.data;\r\n\r\n                switch (msg.type) {\r\n                    // Sensors messages\r\n                    case \"acc\": {\r\n                        this.setAcc(msg.data, msg.invert);\r\n                        break;\r\n                    }\r\n                    case \"gyr\": {\r\n                        this.setGyr(msg.data);\r\n                        break;\r\n                    }\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n", "import { OutputParamHandler, ComputeHandler, PlotHandler, UIHandler, MetadataHandler, FaustBaseWebAudioDsp, IFaustMonoWebAudioDsp, IFaustPolyWebAudioDsp } from \"./FaustWebAudioDsp\";\nimport type { FaustAudioWorkletNodeOptions } from \"./FaustAudioWorkletProcessor\";\nimport type { LooseFaustDspFactory, FaustDspMeta, FaustUIInputItem, FaustUIItem } from \"./types\";\nimport { FaustAudioWorkletNodeCommunicator } from \"./FaustAudioWorkletCommunicator\";\n\n/**\n * Base class for Monophonic and Polyphonic AudioWorkletNode\n */\nexport class FaustAudioWorkletNode<Poly extends boolean = false> extends (globalThis.AudioWorkletNode || null) {\n\n    protected fJSONDsp: FaustDspMeta;\n    protected fJSON: string;\n    protected fInputsItems: string[];\n    protected fOutputHandler: OutputParamHandler | null;\n    protected fComputeHandler: ComputeHandler | null;\n    protected fPlotHandler: PlotHandler | null;\n    protected fUICallback: UIHandler;\n    protected fDescriptor: FaustUIInputItem[];\n    protected fCommunicator: FaustAudioWorkletNodeCommunicator;\n    #hasAccInput = false;\n    #hasGyrInput = false;\n\n    constructor(context: BaseAudioContext, name: string, factory: LooseFaustDspFactory, options: Partial<FaustAudioWorkletNodeOptions<Poly>> = {}) {\n\n        // Create JSON object\n        const JSONObj: FaustDspMeta = JSON.parse(factory.json);\n\n        // Create proxy FaustAudioWorkletProcessor\n        super(context, name, {\n            numberOfInputs: JSONObj.inputs > 0 ? 1 : 0,\n            numberOfOutputs: JSONObj.outputs > 0 ? 1 : 0,\n            channelCount: Math.max(1, JSONObj.inputs),\n            outputChannelCount: [JSONObj.outputs],\n            channelCountMode: \"explicit\",\n            channelInterpretation: \"speakers\",\n            processorOptions: options.processorOptions,\n            ...options\n        });\n\n        this.fJSONDsp = JSONObj;\n        this.fJSON = factory.json;\n        this.fOutputHandler = null;\n        this.fComputeHandler = null;\n        this.fPlotHandler = null;\n        this.fDescriptor = [];\n\n        // Parse UI\n        this.fInputsItems = [];\n        this.fUICallback = (item: FaustUIItem) => {\n            if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"button\" || item.type === \"checkbox\" || item.type === \"nentry\") {\n                // Keep inputs adresses\n                this.fInputsItems.push(item.address);\n                this.fDescriptor.push(item);\n                if (!item.meta) return;\n                item.meta.forEach((meta) => {\n                    const { midi, acc, gyr } = meta;\n                    if (acc) this.#hasAccInput = true;\n                    if (gyr) this.#hasGyrInput = true;\n                });\n            }\n        }\n\n        FaustBaseWebAudioDsp.parseUI(this.fJSONDsp.ui, this.fUICallback);\n\n        this.fCommunicator = new FaustAudioWorkletNodeCommunicator(this.port);\n\n        // Patch it with additional functions\n        this.port.addEventListener(\"message\", this.handleMessageAux);\n        this.port.start();\n    }\n\n    protected handleMessageAux = (e: MessageEvent) => {\n        if (e.data.type === \"param\" && this.fOutputHandler) {\n            this.fOutputHandler(e.data.path, e.data.value);\n        } else if (e.data.type === \"plot\" && this.fPlotHandler) {\n            this.fPlotHandler(e.data.value, e.data.index, e.data.events);\n        }\n    };\n\n    // Accelerometer and gyroscope handlers\n    private handleDeviceMotion = ({ accelerationIncludingGravity }: DeviceMotionEvent) => {\n        const isAndroid: boolean = /Android/i.test(navigator.userAgent);\n        if (!accelerationIncludingGravity) return;\n        const { x, y, z } = accelerationIncludingGravity;\n        this.propagateAcc({ x, y, z }, isAndroid);\n    };\n\n    private handleDeviceOrientation = ({ alpha, beta, gamma }: DeviceOrientationEvent) => {\n        this.propagateGyr({ alpha, beta, gamma });\n    };\n\n    // Public API\n\n    /** Setup accelerometer and gyroscope handlers */\n    async startSensors() {\n        if (this.hasAccInput) {\n            if (window.DeviceMotionEvent) {\n                // iOS 13+ requires a user gesture to enable DeviceMotionEvent, to be done in the main thread\n                window.addEventListener(\"devicemotion\", this.handleDeviceMotion, true);\n            } else {\n                // Browser doesn't support DeviceMotionEvent\n                console.log(\"Cannot set the accelerometer handler.\");\n            }\n        }\n        if (this.hasGyrInput) {\n            if (window.DeviceMotionEvent) {\n                // iOS 13+ requires a user gesture to enable DeviceMotionEvent, to be done in the main thread\n                window.addEventListener(\"deviceorientation\", this.handleDeviceOrientation, true);\n            } else {\n                // Browser doesn't support DeviceMotionEvent\n                console.log(\"Cannot set the gyroscope handler.\");\n            }\n        }\n    }\n\n    stopSensors() {\n        if (this.hasAccInput) {\n            window.removeEventListener(\"devicemotion\", this.handleDeviceMotion, true);\n        }\n        if (this.hasGyrInput) {\n            window.removeEventListener(\"deviceorientation\", this.handleDeviceOrientation, true);\n        }\n    }\n\n    setOutputParamHandler(handler: OutputParamHandler | null) {\n        this.fOutputHandler = handler;\n    }\n    getOutputParamHandler() {\n        return this.fOutputHandler;\n    }\n\n    setComputeHandler(handler: ComputeHandler | null) {\n        this.fComputeHandler = handler;\n    }\n    getComputeHandler(): ComputeHandler | null {\n        return this.fComputeHandler;\n    }\n\n    setPlotHandler(handler: PlotHandler | null) {\n        this.fPlotHandler = handler;\n        // Set PlotHandler on processor side\n        if (this.fPlotHandler) {\n            this.port.postMessage({ type: \"setPlotHandler\", data: true });\n        } else {\n            this.port.postMessage({ type: \"setPlotHandler\", data: false });\n        }\n    }\n    getPlotHandler(): PlotHandler | null {\n        return this.fPlotHandler;\n    }\n\n    setupWamEventHandler() {\n        this.port.postMessage({ type: \"setupWamEventHandler\" });\n    }\n\n    getNumInputs() {\n        return this.fJSONDsp.inputs;\n    }\n    getNumOutputs() {\n        return this.fJSONDsp.outputs;\n    }\n\n    // Implemented in subclasses\n    compute(inputs: Float32Array[], outputs: Float32Array[]) {\n        return false;\n    }\n\n    metadata(handler: MetadataHandler) {\n        if (this.fJSONDsp.meta) {\n            this.fJSONDsp.meta.forEach(meta => handler(Object.keys(meta)[0], meta[Object.keys(meta)[0]]));\n        }\n    }\n\n    midiMessage(data: number[] | Uint8Array): void {\n        const cmd = data[0] >> 4;\n        const channel = data[0] & 0xf;\n        const data1 = data[1];\n        const data2 = data[2];\n        if (cmd === 11) this.ctrlChange(channel, data1, data2);\n        else if (cmd === 14) this.pitchWheel(channel, data2 * 128.0 + data1);\n        else this.port.postMessage({ type: \"midi\", data: data });\n    }\n\n    ctrlChange(channel: number, ctrl: number, value: number) {\n        const e = { type: \"ctrlChange\", data: [channel, ctrl, value] };\n        this.port.postMessage(e);\n    }\n    pitchWheel(channel: number, wheel: number) {\n        const e = { type: \"pitchWheel\", data: [channel, wheel] };\n        this.port.postMessage(e);\n    }\n\n    get hasAccInput() { return this.#hasAccInput; }\n\n    propagateAcc(accelerationIncludingGravity: NonNullable<DeviceMotionEvent[\"accelerationIncludingGravity\"]>, invert: boolean = false) {\n        if (!accelerationIncludingGravity) return;\n        const { x, y, z } = accelerationIncludingGravity;\n        this.fCommunicator.setAcc({ x: x!, y: y!, z: z! }, invert);\n    }\n\n    get hasGyrInput() { return this.#hasGyrInput; }\n\n    propagateGyr(event: Pick<DeviceOrientationEvent, \"alpha\" | \"beta\" | \"gamma\">) {\n        if (!event) return;\n        const { alpha, beta, gamma } = event;\n        this.fCommunicator.setGyr({ alpha: alpha!, beta: beta!, gamma: gamma! });\n    }\n\n    setParamValue(path: string, value: number) {\n        const e = { type: \"param\", data: { path, value } };\n        this.port.postMessage(e);\n        // Set value on AudioParam (but this is not used on Processor side for now)\n        const param = this.parameters.get(path);\n        if (param) param.setValueAtTime(value, this.context.currentTime);\n\n    }\n    getParamValue(path: string) {\n        // Get value of AudioParam\n        const param = this.parameters.get(path);\n        return (param) ? param.value : 0;\n    }\n\n    getParams() { return this.fInputsItems; }\n    getMeta() { return this.fJSONDsp; }\n    getJSON() { return JSON.stringify(this.getMeta()); }\n    getUI() { return this.fJSONDsp.ui; }\n    getDescriptors() { return this.fDescriptor; }\n\n    start() {\n        this.port.postMessage({ type: \"start\" });\n    }\n\n    stop() {\n        this.port.postMessage({ type: \"stop\" });\n    }\n\n    destroy() {\n        this.port.postMessage({ type: \"destroy\" });\n        this.port.close();\n    }\n}\n\n/**\n * Monophonic AudioWorkletNode\n */\nexport class FaustMonoAudioWorkletNode extends FaustAudioWorkletNode<false> implements IFaustMonoWebAudioDsp {\n\n    onprocessorerror = (e: Event) => {\n        // console.error(\"Error from \" + this.fJSONDsp.name + \" FaustMonoAudioWorkletNode\");\n        throw e;\n    }\n\n    constructor(context: BaseAudioContext, options: Partial<FaustAudioWorkletNodeOptions<false>> & Pick<FaustAudioWorkletNodeOptions<false>, \"processorOptions\">) {\n        super(context, options.processorOptions.name, options.processorOptions.factory, options);\n    }\n}\n\n/**\n * Polyphonic AudioWorkletNode\n */\nexport class FaustPolyAudioWorkletNode extends FaustAudioWorkletNode<true> implements IFaustPolyWebAudioDsp {\n\n    private fJSONEffect: FaustDspMeta | null;\n\n    onprocessorerror = (e: Event) => {\n        // console.error(\"Error from \" + this.fJSONDsp.name + \" FaustPolyAudioWorkletNode\");\n        throw e;\n    }\n\n    constructor(context: BaseAudioContext, options: Partial<FaustAudioWorkletNodeOptions<true>> & Pick<FaustAudioWorkletNodeOptions<true>, \"processorOptions\">) {\n\n        super(\n            context,\n            options.processorOptions.name,\n            options.processorOptions.voiceFactory,\n            options\n        );\n\n        this.fJSONEffect = options.processorOptions.effectFactory ? JSON.parse(options.processorOptions.effectFactory.json) : null;\n\n        if (this.fJSONEffect) {\n            FaustBaseWebAudioDsp.parseUI(this.fJSONEffect.ui, this.fUICallback);\n        }\n    }\n\n    // Public API\n    keyOn(channel: number, pitch: number, velocity: number) {\n        const e = { type: \"keyOn\", data: [channel, pitch, velocity] };\n        this.port.postMessage(e);\n    }\n\n    keyOff(channel: number, pitch: number, velocity: number) {\n        const e = { type: \"keyOff\", data: [channel, pitch, velocity] };\n        this.port.postMessage(e);\n    }\n\n    allNotesOff(hard: boolean) {\n        const e = { type: \"ctrlChange\", data: [0, 123, 0] };\n        this.port.postMessage(e);\n    }\n\n    getMeta() {\n        const o = this.fJSONDsp;\n        const e = this.fJSONEffect;\n        const r = { ...o };\n        if (e) {\n            r.ui = [{\n                type: \"tgroup\", label: \"Sequencer\", items: [\n                    { type: \"vgroup\", label: \"Instrument\", items: o.ui },\n                    { type: \"vgroup\", label: \"Effect\", items: e.ui }\n                ]\n            }];\n        } else {\n            r.ui = [{\n                type: \"tgroup\", label: \"Polyphonic\", items: [\n                    { type: \"vgroup\", label: \"Voices\", items: o.ui }\n                ]\n            }];\n        }\n        return r as FaustDspMeta;\n    }\n\n    getJSON() {\n        return JSON.stringify(this.getMeta());\n    }\n\n    getUI() {\n        return this.getMeta().ui;\n    }\n}\n", "import type { ComputeHandler, FaustMonoWebAudioDsp, FaustPolyWebAudioDsp, IFaustMonoWebAudioDsp, IFaustPolyWebAudioDsp, MetadataHandler, OutputParamHandler, PlotHandler } from \"./FaustWebAudioDsp\";\n\n/**\n * Base class for Monophonic and Polyphonic ScriptProcessorNode\n */\nexport class FaustScriptProcessorNode<Poly extends boolean = false> extends (globalThis.ScriptProcessorNode || null) {\n    protected fDSPCode!: Poly extends true ? FaustPolyWebAudioDsp : FaustMonoWebAudioDsp;\n\n    // Needed for ScriptProcessorNode\n    protected fInputs!: Float32Array[];\n    protected fOutputs!: Float32Array[];\n    protected handleDeviceMotion = undefined as any;\n    protected handleDeviceOrientation = undefined as any;\n\n    init(instance: Poly extends true ? FaustPolyWebAudioDsp : FaustMonoWebAudioDsp) {\n        this.fDSPCode = instance;\n\n        this.fInputs = new Array(this.fDSPCode.getNumInputs());\n        this.fOutputs = new Array(this.fDSPCode.getNumOutputs());\n\n        // Accelerometer and gyroscope handlers\n        this.handleDeviceMotion = ({ accelerationIncludingGravity }: DeviceMotionEvent) => {\n            const isAndroid: boolean = /Android/i.test(navigator.userAgent);\n            if (!accelerationIncludingGravity) return;\n            const { x, y, z } = accelerationIncludingGravity;\n            this.propagateAcc({ x, y, z }, isAndroid);\n        };\n\n        this.handleDeviceOrientation = ({ alpha, beta, gamma }: DeviceOrientationEvent) => {\n            this.propagateGyr({ alpha, beta, gamma });\n        };\n\n        this.onaudioprocess = (e) => {\n\n            // Read inputs\n            for (let chan = 0; chan < this.fDSPCode.getNumInputs(); chan++) {\n                this.fInputs[chan] = e.inputBuffer.getChannelData(chan);\n            }\n\n            // Read outputs\n            for (let chan = 0; chan < this.fDSPCode.getNumOutputs(); chan++) {\n                this.fOutputs[chan] = e.outputBuffer.getChannelData(chan);\n            }\n\n            return this.fDSPCode.compute(this.fInputs, this.fOutputs);\n        }\n\n        this.start();\n    }\n\n    // Public API\n\n    /** Start accelerometer and gyroscope handlers */\n    async startSensors() {\n        if (this.hasAccInput) {\n            if (window.DeviceMotionEvent) {\n                // iOS 13+ requires a user gesture to enable DeviceMotionEvent, to be done in the main thread\n                window.addEventListener(\"devicemotion\", this.handleDeviceMotion, true);\n            } else {\n                // Browser doesn't support DeviceMotionEvent\n                console.log(\"Cannot set the accelerometer handler.\");\n            }\n        }\n        if (this.hasGyrInput) {\n            if (window.DeviceMotionEvent) {\n                // iOS 13+ requires a user gesture to enable DeviceMotionEvent, to be done in the main thread\n                window.addEventListener(\"deviceorientation\", this.handleDeviceOrientation, true);\n            } else {\n                // Browser doesn't support DeviceMotionEvent\n                console.log(\"Cannot set the gyroscope handler.\");\n            }\n        }\n    }\n\n    /** Stop accelerometer and gyroscope handlers */\n    stopSensors() {\n        if (this.hasAccInput) {\n            window.removeEventListener(\"devicemotion\", this.handleDeviceMotion, true);\n        }\n        if (this.hasGyrInput) {\n            window.removeEventListener(\"deviceorientation\", this.handleDeviceOrientation, true);\n        }\n    }\n\n    compute(input: Float32Array[], output: Float32Array[]) { return this.fDSPCode.compute(input, output); }\n\n    setOutputParamHandler(handler: OutputParamHandler) { this.fDSPCode.setOutputParamHandler(handler); }\n    getOutputParamHandler() { return this.fDSPCode.getOutputParamHandler(); }\n\n    setComputeHandler(handler: ComputeHandler) { this.fDSPCode.setComputeHandler(handler); }\n    getComputeHandler() { return this.fDSPCode.getComputeHandler(); }\n\n    setPlotHandler(handler: PlotHandler) { this.fDSPCode.setPlotHandler(handler); }\n    getPlotHandler() { return this.fDSPCode.getPlotHandler(); }\n\n    getNumInputs() { return this.fDSPCode.getNumInputs(); }\n    getNumOutputs() { return this.fDSPCode.getNumOutputs(); }\n\n    metadata(handler: MetadataHandler) { }\n\n    midiMessage(data: number[] | Uint8Array) { this.fDSPCode.midiMessage(data); }\n\n    ctrlChange(chan: number, ctrl: number, value: number) { this.fDSPCode.ctrlChange(chan, ctrl, value); }\n    pitchWheel(chan: number, value: number) { this.fDSPCode.pitchWheel(chan, value); }\n\n    setParamValue(path: string, value: number) { this.fDSPCode.setParamValue(path, value); }\n    getParamValue(path: string) { return this.fDSPCode.getParamValue(path); }\n    getParams() { return this.fDSPCode.getParams(); }\n\n    getMeta() { return this.fDSPCode.getMeta(); }\n    getJSON() { return this.fDSPCode.getJSON(); }\n    getDescriptors() { return this.fDSPCode.getDescriptors(); }\n    getUI() { return this.fDSPCode.getUI(); }\n\n    start() { this.fDSPCode.start(); }\n    stop() { this.fDSPCode.stop(); }\n\n    destroy() { this.fDSPCode.destroy(); }\n\n    get hasAccInput() { return this.fDSPCode.hasAccInput; }\n\n    propagateAcc(accelerationIncludingGravity: NonNullable<DeviceMotionEvent[\"accelerationIncludingGravity\"]>, invert: boolean = false) {\n        this.fDSPCode.propagateAcc(accelerationIncludingGravity, invert);\n    }\n\n    get hasGyrInput() { return this.fDSPCode.hasGyrInput; }\n\n    propagateGyr(event: Pick<DeviceOrientationEvent, \"alpha\" | \"beta\" | \"gamma\">) {\n        this.fDSPCode.propagateGyr(event);\n    }\n}\n\nexport class FaustMonoScriptProcessorNode extends FaustScriptProcessorNode<false> implements IFaustMonoWebAudioDsp {\n}\n\nexport class FaustPolyScriptProcessorNode extends FaustScriptProcessorNode<true> implements IFaustPolyWebAudioDsp {\n    keyOn(channel: number, pitch: number, velocity: number) { this.fDSPCode.keyOn(channel, pitch, velocity); }\n    keyOff(channel: number, pitch: number, velocity: number) { this.fDSPCode.keyOff(channel, pitch, velocity); }\n    allNotesOff(hard: boolean) { this.fDSPCode.allNotesOff(hard); }\n}\n", "import { FaustMonoAudioWorkletNode, FaustPolyAudioWorkletNode } from \"./FaustAudioWorkletNode\";\nimport getFaustAudioWorkletProcessor, { FaustData } from \"./FaustAudioWorkletProcessor\";\nimport getFaustFFTAudioWorkletProcessor, { FaustFFTData, FaustFFTOptionsData } from \"./FaustFFTAudioWorkletProcessor\";\nimport { FaustDspInstance } from \"./FaustDspInstance\";\nimport FaustWasmInstantiator from \"./FaustWasmInstantiator\";\nimport { FaustMonoOfflineProcessor, FaustPolyOfflineProcessor, IFaustMonoOfflineProcessor, IFaustPolyOfflineProcessor } from \"./FaustOfflineProcessor\";\nimport { FaustMonoScriptProcessorNode, FaustPolyScriptProcessorNode } from \"./FaustScriptProcessorNode\";\nimport { FaustBaseWebAudioDsp, FaustMonoWebAudioDsp, FaustPolyWebAudioDsp, FaustWebAudioDspVoice, IFaustMonoWebAudioNode, IFaustPolyWebAudioNode, Soundfile, WasmAllocator } from \"./FaustWebAudioDsp\";\nimport SoundfileReader from \"./SoundfileReader\";\nimport FaustSensors from \"./FaustSensors\";\nimport type { IFaustCompiler } from \"./FaustCompiler\";\nimport type { FaustDspFactory, FaustUIDescriptor, FaustDspMeta, FFTUtils, LooseFaustDspFactory, AudioData } from \"./types\";\nimport { FaustAudioWorkletCommunicator, FaustAudioWorkletProcessorCommunicator } from \"./FaustAudioWorkletCommunicator\";\n\n\nexport interface GeneratorSupportingSoundfiles {\n    /**\n     * Attach a map of id - audio data, call after `compile()` before `createNode()`\n     * \n     * @param soundfileMap a map of id - `AudioData` as an object where `AudioData` contains channel data as `audioBuffer: Float32Array[]` and `sampleRate: number`\n     */\n    addSoundfiles(soundfileMap: Record<string, AudioData>): void;\n\n    /**\n     * Get a list of soundfiles needed, call after `compile()`\n     */\n    getSoundfileList(): string[];\n}\n\nexport interface IFaustMonoDspGenerator extends GeneratorSupportingSoundfiles {\n    /**\n     * Compile a monophonic DSP factory from given code.\n     * \n     * @param compiler - the Faust compiler\n     * @param name - the DSP name\n     * @param code - the DSP code\n     * @param args - the compilation parameters\n     * @returns the compiled factory or 'null' if failure\n     */\n    compile(compiler: IFaustCompiler, name: string, code: string, args: string): Promise<{\n        factory: FaustDspFactory | null;\n        name?: string;\n        meta?: FaustDspMeta;\n    } | null>;\n\n\n    /**\n     * Create a monophonic WebAudio node (either ScriptProcessorNode or AudioWorkletNode).\n     *\n     * @param context - the WebAudio context\n     * @param name - DSP name, can be used for processorName\n     * @param factory - default is the compiled factory\n     * @param sp - whether to compile a ScriptProcessorNode or an AudioWorkletNode\n     * @param bufferSize - the buffer size in frames to be used in ScriptProcessorNode only, since AudioWorkletNode always uses 128 frames\n     * @param processorName - AudioWorklet Processor name\n     * @param processorOptions - Additional AudioWorklet Processor options\n     * @returns the compiled WebAudio node or 'null' if failure\n     */\n    createNode(\n        context: BaseAudioContext,\n        name?: string,\n        factory?: LooseFaustDspFactory,\n        sp?: boolean,\n        bufferSize?: number,\n        processorName?: string,\n        processorOptions?: Record<string, any>\n    ): Promise<IFaustMonoWebAudioNode | null>;\n\n    /**\n     * Create a monophonic WebAudio node (either ScriptProcessorNode or AudioWorkletNode).\n     *\n     * @param context - the WebAudio context\n     * @param fftUtils - should be an anonymous class with static methods, without any import from outside\n     * @param name - DSP name, can be used for processorName\n     * @param factory - default is the compiled factory\n     * @param fftOptions - initial FFT options\n     * @param processorName - AudioWorklet Processor name\n     * @param processorOptions - Additional AudioWorklet Processor options\n     * @returns the compiled WebAudio node or 'null' if failure\n     */\n    createFFTNode(\n        context: BaseAudioContext,\n        fftUtils: typeof FFTUtils,\n        name?: string,\n        factory?: LooseFaustDspFactory,\n        fftOptions?: Partial<FaustFFTOptionsData>,\n        processorName?: string,\n        processorOptions?: Record<string, any>\n    ): Promise<FaustMonoAudioWorkletNode | null>;\n\n    /**\n     * Create a monophonic Offline processor.\n     *\n     * @param sampleRate - the sample rate in Hz\n     * @param bufferSize - the buffer size in frames\n     * @param factory - default is the compiled factory\n     * @param context - if this exists, will be used to fetch soundfiles online\n     * @returns the compiled processor or 'null' if failure\n     */\n    createOfflineProcessor(\n        sampleRate: number,\n        bufferSize: number,\n        factory?: LooseFaustDspFactory,\n        context?: BaseAudioContext\n    ): Promise<IFaustMonoOfflineProcessor | null>;\n\n    /**\n     * Get DSP JSON description with its UI and metadata as object.\n     *\n     * @return the DSP JSON description as object\n     */\n    getMeta(): FaustDspMeta;\n\n    /**\n     * Get DSP JSON description with its UI and metadata.\n     *\n     * @return the DSP JSON description\n     */\n    getJSON(): string;\n\n    /**\n     * Get DSP UI description.\n     *\n     * @return the DSP UI description\n     */\n    getUI(): FaustUIDescriptor;\n}\n\nexport interface IFaustPolyDspGenerator extends GeneratorSupportingSoundfiles {\n    /**\n     * Compile a monophonic DSP factory from given code.\n     * \n     * @param compiler - the Faust compiler\n     * @param name - the DSP name\n     * @param dspCode - the DSP code ('dspCode' can possibly contain an integrated effect)\n     * @param args - the compilation parameters\n     * @param effectCode - optional effect DSP code\n     * @returns the compiled factory or 'null' if failure\n     */\n    compile(compiler: IFaustCompiler, name: string, dspCode: string, args: string, effectCode?: string): Promise<{\n        voiceFactory: FaustDspFactory | null;\n        effectFactory?: FaustDspFactory | null;\n    } | null>;\n\n    /**\n     * Create a polyphonic WebAudio node (either ScriptProcessorNode or AudioWorkletNode).\n     *\n     * @param context the WebAudio context\n     * @param voices - the number of voices\n     * @param name - AudioWorklet Processor name\n     * @param voiceFactory - the Faust factory for voices, either obtained with a compiler (createDSPFactory) or loaded from files (loadDSPFactory)\n     * @param mixerModule - the wasm Mixer module (loaded from 'mixer32.wasm' or 'mixer64.wasm' files located in the 'faustwasm' package)\n     * @param effectFactory - the Faust factory for the effect, either obtained with a compiler (createDSPFactory) or loaded from files (loadDSPFactory)\n     * @param sp - whether to compile a ScriptProcessorNode or an AudioWorkletNode\n     * @param bufferSize - the buffer size in frames to be used in ScriptProcessorNode only, since AudioWorkletNode always uses 128 frames\n     * @param processorOptions - Additional AudioWorklet Processor options\n     * @returns the compiled WebAudio node or 'null' if failure\n     */\n    createNode(\n        context: BaseAudioContext,\n        voices: number,\n        name?: string,\n        voiceFactory?: LooseFaustDspFactory,\n        mixerModule?: WebAssembly.Module,\n        effectFactory?: LooseFaustDspFactory | null,\n        sp?: boolean,\n        bufferSize?: number,\n        processorName?: string,\n        processorOptions?: Record<string, any>\n    ): Promise<IFaustPolyWebAudioNode | null>;\n\n    /**\n     * Create a monophonic Offline processor.\n     *\n     * @param sampleRate - the sample rate in Hz\n     * @param bufferSize - the buffer size in frames\n     * @param voiceFactory - the Faust factory for voices, either obtained with a compiler (createDSPFactory) or loaded from files (loadDSPFactory)\n     * @param mixerModule - the wasm Mixer module (loaded from 'mixer32.wasm' or 'mixer64.wasm' files)\n     * @param effectFactory - the Faust factory for the effect, either obtained with a compiler (createDSPFactory) or loaded from files (loadDSPFactory)\n     * @param context - if this exists, will be used to fetch soundfiles online\n     * @returns the compiled processor or 'null' if failure\n     */\n    createOfflineProcessor(\n        sampleRate: number,\n        bufferSize: number,\n        voices: number,\n        voiceFactory?: LooseFaustDspFactory,\n        mixerModule?: WebAssembly.Module,\n        effectFactory?: LooseFaustDspFactory | null,\n        context?: BaseAudioContext\n    ): Promise<IFaustPolyOfflineProcessor | null>;\n\n    /**\n     * Get DSP JSON description with its UI and metadata as object.\n     *\n     * @return the DSP JSON description as object\n     */\n    getMeta(): FaustDspMeta;\n\n    /**\n     * Get DSP JSON description with its UI and metadata.\n     *\n     * @return the DSP JSON description\n     */\n    getJSON(): string;\n\n    /**\n     * Get DSP UI description.\n     *\n     * @return the DSP UI description\n     */\n    getUI(): FaustUIDescriptor;\n}\n\nexport class FaustMonoDspGenerator implements IFaustMonoDspGenerator {\n    // Set of all created WorkletProcessors, each of them has to be unique\n    private static gWorkletProcessors: Map<BaseAudioContext, Set<string>> = new Map();\n\n    name: string;\n    factory!: FaustDspFactory | null;\n\n    constructor() {\n        this.factory = null;\n    }\n    async compile(compiler: IFaustCompiler, name: string, code: string, args: string) {\n        this.factory = await compiler.createMonoDSPFactory(name, code, args);\n        if (this.factory) {\n            this.name = name;\n            return this;\n        } else {\n            return null;\n        }\n    }\n\n    addSoundfiles(soundfileMap: Record<string, AudioData>) {\n        if (!this.factory) throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n        for (const id in soundfileMap) {\n            this.factory.soundfiles[id] = soundfileMap[id];\n        }\n    }\n    getSoundfileList() {\n        if (!this.factory) throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n        const meta = JSON.parse(this.factory.json);\n        const map = SoundfileReader.findSoundfilesFromMeta(meta);\n        return Object.keys(map);\n    }\n\n    async createNode<SP extends boolean = false>(\n        context: BaseAudioContext,\n        name = this.name,\n        factory = this.factory as LooseFaustDspFactory,\n        sp = false as SP,\n        bufferSize = 1024,\n        processorName = factory?.shaKey || name,\n        processorOptions: Record<string, any> = {}\n    ): Promise<SP extends true ? FaustMonoScriptProcessorNode | null : FaustMonoAudioWorkletNode | null> {\n        if (!factory) throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n\n        const meta = JSON.parse(factory.json);\n        const sampleSize = meta.compile_options.match(\"-double\") ? 8 : 4;\n        factory.soundfiles = await SoundfileReader.loadSoundfiles(meta, factory.soundfiles || {}, context);\n        if (sp) {\n            const instance = await FaustWasmInstantiator.createAsyncMonoDSPInstance(factory);\n            const monoDsp = new FaustMonoWebAudioDsp(instance, context.sampleRate, sampleSize, bufferSize, factory.soundfiles);\n\n            const sp = context.createScriptProcessor(bufferSize, monoDsp.getNumInputs(), monoDsp.getNumOutputs()) as FaustMonoScriptProcessorNode;\n            Object.setPrototypeOf(sp, FaustMonoScriptProcessorNode.prototype);\n            sp.init(monoDsp);\n            return sp as SP extends true ? FaustMonoScriptProcessorNode : FaustMonoAudioWorkletNode;\n        } else {\n            // Dynamically create AudioWorkletProcessor if code not yet created\n            if (!FaustMonoDspGenerator.gWorkletProcessors.has(context)) FaustMonoDspGenerator.gWorkletProcessors.set(context, new Set());\n            if (!FaustMonoDspGenerator.gWorkletProcessors.get(context)?.has(processorName)) {\n                try {\n                    const processorCode = `\n// DSP name and JSON string for DSP are generated\nconst faustData = ${JSON.stringify({\n                        processorName,\n                        dspName: name,\n                        dspMeta: meta,\n                        poly: false\n                    } as FaustData)};\n// Implementation needed classes of functions\nvar ${FaustDspInstance.name} = ${FaustDspInstance.toString()}\nvar FaustDspInstance = ${FaustDspInstance.name};\nvar ${FaustBaseWebAudioDsp.name} = ${FaustBaseWebAudioDsp.toString()}\nvar FaustBaseWebAudioDsp = ${FaustBaseWebAudioDsp.name};\nvar ${FaustMonoWebAudioDsp.name} = ${FaustMonoWebAudioDsp.toString()}\nvar FaustMonoWebAudioDsp = ${FaustMonoWebAudioDsp.name};\nvar ${FaustWasmInstantiator.name} = ${FaustWasmInstantiator.toString()}\nvar FaustWasmInstantiator = ${FaustWasmInstantiator.name};\nvar ${Soundfile.name} = ${Soundfile.toString()}\nvar Soundfile = ${Soundfile.name};\nvar ${WasmAllocator.name} = ${WasmAllocator.toString()}\nvar WasmAllocator = ${WasmAllocator.name};\nvar ${FaustSensors.name} = ${FaustSensors.toString()}\nvar FaustSensors = ${FaustSensors.name};\nvar ${FaustAudioWorkletCommunicator.name} = ${FaustAudioWorkletCommunicator.toString()}\nvar FaustAudioWorkletCommunicator = ${FaustAudioWorkletCommunicator.name};\nvar ${FaustAudioWorkletProcessorCommunicator.name} = ${FaustAudioWorkletProcessorCommunicator.toString()}\nvar FaustAudioWorkletProcessorCommunicator = ${FaustAudioWorkletProcessorCommunicator.name};\n// Put them in dependencies\nconst dependencies = {\n    FaustBaseWebAudioDsp,\n    FaustMonoWebAudioDsp,\n    FaustWasmInstantiator,\n    FaustAudioWorkletProcessorCommunicator\n};\n// Generate the actual AudioWorkletProcessor code\n(${getFaustAudioWorkletProcessor.toString()})(dependencies, faustData);\n`;\n                    const url = URL.createObjectURL(new Blob([processorCode], { type: \"text/javascript\" }));\n                    await context.audioWorklet.addModule(url);\n                    // Keep the DSP name\n                    FaustMonoDspGenerator.gWorkletProcessors.get(context)?.add(processorName);\n                } catch (e) {\n                    // console.error(`=> exception raised while running createMonoNode: ${e}`);\n                    // console.error(`=> check that your page is served using https.${e}`);\n                    throw e;\n                }\n            }\n            // Create the AWN\n            const node = new FaustMonoAudioWorkletNode(context, { processorOptions: { name: processorName, factory, sampleSize, ...processorOptions } });\n\n            return node as SP extends true ? FaustMonoScriptProcessorNode : FaustMonoAudioWorkletNode;\n        }\n    }\n\n    async createFFTNode(\n        context: BaseAudioContext,\n        fftUtils: typeof FFTUtils,\n        name = this.name,\n        factory = this.factory as LooseFaustDspFactory,\n        fftOptions: Partial<FaustFFTOptionsData> = {},\n        processorName = factory?.shaKey ? `${factory.shaKey}_fft` : name,\n        processorOptions: Record<string, any> = {}\n    ): Promise<FaustMonoAudioWorkletNode | null> {\n        if (!factory) throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n\n        const meta: FaustDspMeta = JSON.parse(factory.json);\n        const sampleSize = meta.compile_options.match(\"-double\") ? 8 : 4;\n        factory.soundfiles = await SoundfileReader.loadSoundfiles(meta, factory.soundfiles || {}, context);\n        // Dynamically create AudioWorkletProcessor if code not yet created\n        if (!FaustMonoDspGenerator.gWorkletProcessors.has(context)) FaustMonoDspGenerator.gWorkletProcessors.set(context, new Set());\n        if (!FaustMonoDspGenerator.gWorkletProcessors.get(context)?.has(processorName)) {\n            try {\n                const processorCode = `\n// DSP name and JSON string for DSP are generated\nconst faustData = ${JSON.stringify({\n                    processorName,\n                    dspName: name,\n                    dspMeta: meta,\n                    fftOptions\n                } as FaustFFTData)};\n// Implementation needed classes of functions\nvar ${FaustDspInstance.name} = ${FaustDspInstance.toString()}\nvar FaustDspInstance = ${FaustDspInstance.name};\nvar ${FaustBaseWebAudioDsp.name} = ${FaustBaseWebAudioDsp.toString()}\nvar FaustBaseWebAudioDsp = ${FaustBaseWebAudioDsp.name};\nvar ${FaustMonoWebAudioDsp.name} = ${FaustMonoWebAudioDsp.toString()}\nvar FaustMonoWebAudioDsp = ${FaustMonoWebAudioDsp.name};\nvar ${FaustWasmInstantiator.name} = ${FaustWasmInstantiator.toString()}\nvar FaustWasmInstantiator = ${FaustWasmInstantiator.name};\nvar ${Soundfile.name} = ${Soundfile.toString()}\nvar Soundfile = ${Soundfile.name};\nvar ${WasmAllocator.name} = ${WasmAllocator.toString()}\nvar WasmAllocator = ${WasmAllocator.name};\nvar ${FaustSensors.name} = ${FaustSensors.toString()}\nvar FaustSensors = ${FaustSensors.name};\nvar ${FaustAudioWorkletCommunicator.name} = ${FaustAudioWorkletCommunicator.toString()}\nvar FaustAudioWorkletCommunicator = ${FaustAudioWorkletCommunicator.name};\nvar ${FaustAudioWorkletProcessorCommunicator.name} = ${FaustAudioWorkletProcessorCommunicator.toString()}\nvar FaustAudioWorkletProcessorCommunicator = ${FaustAudioWorkletProcessorCommunicator.name};\nvar FFTUtils = ${fftUtils.toString()}\n// Put them in dependencies\nconst dependencies = {\n    FaustBaseWebAudioDsp,\n    FaustMonoWebAudioDsp,\n    FaustWasmInstantiator,\n    FaustAudioWorkletProcessorCommunicator,\n    FFTUtils\n};\n// Generate the actual AudioWorkletProcessor code\n(${getFaustFFTAudioWorkletProcessor.toString()})(dependencies, faustData);\n`;\n                const url = URL.createObjectURL(new Blob([processorCode], { type: \"text/javascript\" }));\n                await context.audioWorklet.addModule(url);\n                // Keep the DSP name\n                FaustMonoDspGenerator.gWorkletProcessors.get(context)?.add(processorName);\n            } catch (e) {\n                // console.error(`=> exception raised while running createMonoNode: ${e}`);\n                // console.error(`=> check that your page is served using https.${e}`);\n                throw e;\n            }\n        }\n        // Create the AWN\n        const node = new FaustMonoAudioWorkletNode(context, { channelCount: Math.max(1, Math.ceil(meta.inputs / 3)), outputChannelCount: [Math.ceil(meta.outputs / 2)], processorOptions: { name: processorName, factory, sampleSize, ...processorOptions } });\n        if (fftOptions.fftSize) {\n            const param = node.parameters.get(\"fftSize\");\n            if (param) param.value = fftOptions.fftSize;\n        }\n        if (fftOptions.fftOverlap) {\n            const param = node.parameters.get(\"fftOverlap\");\n            if (param) param.value = fftOptions.fftOverlap;\n        }\n        if (typeof fftOptions.defaultWindowFunction === \"number\") {\n            const param = node.parameters.get(\"windowFunction\");\n            if (param) param.value = fftOptions.defaultWindowFunction + 1;\n        }\n        if (typeof fftOptions.noIFFT === \"boolean\") {\n            const param = node.parameters.get(\"noIFFT\");\n            if (param) param.value = +fftOptions.noIFFT;\n        }\n        return node;\n    }\n\n    async createAudioWorkletProcessor(\n        name = this.name,\n        factory = this.factory as LooseFaustDspFactory,\n        processorName = factory?.shaKey || name\n    ) {\n        if (!factory) throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n\n        const meta = JSON.parse(factory.json);\n        const dependencies = {\n            FaustBaseWebAudioDsp,\n            FaustMonoWebAudioDsp,\n            FaustWasmInstantiator,\n            FaustAudioWorkletProcessorCommunicator,\n            FaustPolyWebAudioDsp: undefined,\n            FaustWebAudioDspVoice: undefined,\n        }\n        // const sampleSize = meta.compile_options.match(\"-double\") ? 8 : 4;\n        // Dynamically create AudioWorkletProcessor if code not yet created\n        try {\n            // DSP name and JSON string for DSP are generated\n            const faustData = {\n                processorName,\n                dspName: name,\n                dspMeta: meta,\n                poly: false\n            } as FaustData;\n            // Generate the actual AudioWorkletProcessor code\n            const Processor = getFaustAudioWorkletProcessor(dependencies, faustData);\n            return Processor;\n        } catch (e) {\n            // console.error(`=> exception raised while running createMonoNode: ${e}`);\n            // console.error(`=> check that your page is served using https.${e}`);\n            throw e;\n        }\n    }\n\n    async createOfflineProcessor(\n        sampleRate: number,\n        bufferSize: number,\n        factory = this.factory as LooseFaustDspFactory,\n        context?: BaseAudioContext\n    ) {\n        if (!factory) throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n\n        const meta = JSON.parse(factory.json);\n        const instance = await FaustWasmInstantiator.createAsyncMonoDSPInstance(factory);\n        const sampleSize = meta.compile_options.match(\"-double\") ? 8 : 4;\n        if (context) factory.soundfiles = await SoundfileReader.loadSoundfiles(meta, factory.soundfiles || {}, context);\n        const monoDsp = new FaustMonoWebAudioDsp(instance, sampleRate, sampleSize, bufferSize, factory.soundfiles);\n        return new FaustMonoOfflineProcessor(monoDsp, bufferSize);\n    }\n\n    getMeta() { return JSON.parse(this.factory!.json); }\n    getJSON() { return JSON.stringify(this.getMeta()); }\n    getUI() { return this.getMeta().ui; }\n}\n\nexport class FaustPolyDspGenerator implements IFaustPolyDspGenerator {\n    // Set of all created WorkletProcessors, each of them has to be unique\n    private static gWorkletProcessors: Map<BaseAudioContext, Set<string>> = new Map();\n\n    name: string;\n    voiceFactory!: FaustDspFactory | null;\n    effectFactory!: FaustDspFactory | null;\n    mixerBuffer!: Uint8Array;\n    mixerModule!: WebAssembly.Module;\n\n    constructor() {\n        this.voiceFactory = null;\n        this.effectFactory = null;\n    }\n    async compile(\n        compiler: IFaustCompiler,\n        name: string,\n        dspCodeAux: string,\n        args: string,\n        // The ${dspCode} has to be added with wrapping new lines to make it properly formatted and ready to compile  \n        effectCodeAux = `dsp_code = environment{\n                ${dspCodeAux}\n            };\n            process = dsp_code.effect;`\n    ) {\n        // Try to compile effect, possibly failing\n        try {\n            this.effectFactory = await compiler.createPolyDSPFactory(name, effectCodeAux, args);\n            // Since the effect is processing the same buffers for inputs and outputs (in place processing), \n            // the voice and effect are adapted, possibly clearing buffers\n            if (this.effectFactory) {\n                const effectJSON = JSON.parse(this.effectFactory.json);\n                const dspCode = `\\\n// Voice output is forced to 2, when DSP is stereo or effect has 2 ins or 2 outs,\n// so that the effect can process the 2 channels of the voice\nadaptOut(1,1,1) = _;\nadaptOut(1,1,2) = _ <: _,0;  // The left channel only is kept\nadaptOut(1,2,1) = _ <: _,_;\nadaptOut(1,2,2) = _ <: _,_;\nadaptOut(2,1,1) = _,_;\nadaptOut(2,1,2) = _,_;\nadaptOut(2,2,1) = _,_;\nadaptOut(2,2,2) = _,_;\nadaptor(F) = adaptOut(outputs(F),${effectJSON.inputs},${effectJSON.outputs});\ndsp_code = environment{\n    ${dspCodeAux}\n};\nprocess = dsp_code.process : adaptor(dsp_code.process);\n`;\n                const effectCode = `\\\n// Inputs\nadaptIn(1,1,1) = _;\nadaptIn(1,1,2) = _,_ :> _;  \nadaptIn(1,2,1) = _,_;\nadaptIn(1,2,2) = _,_;\nadaptIn(2,1,1) = _,_ :> _;\nadaptIn(2,1,2) = _,_ :> _;\nadaptIn(2,2,1) = _,_;\nadaptIn(2,2,2) = _,_;\n// Outputs\nadaptOut(1,1) = _ <: _,0;   // The left channel only is kept\nadaptOut(1,2) = _,_;\nadaptOut(2,1) = _ <: _,0;   // The left channel only is kept\nadaptOut(2,2) = _,_;\nadaptorIns(F) = adaptIn(outputs(F),${effectJSON.inputs},${effectJSON.outputs});\nadaptorOuts = adaptOut(${effectJSON.inputs},${effectJSON.outputs});\ndsp_code = environment{\n    ${dspCodeAux}\n};\nprocess = adaptorIns(dsp_code.process) : dsp_code.effect : adaptorOuts;\n`;\n                this.voiceFactory = await compiler.createPolyDSPFactory(name, dspCode, args);\n                try {\n                    // Effect is processing same buffers for inputs and outputs, so has to use -inpl option\n                    this.effectFactory = await compiler.createPolyDSPFactory(name, effectCode, args + \" -inpl\");\n                } catch (e) {\n                    console.warn(e);\n                }\n            }\n        } catch (e) {\n            console.warn(e);\n            this.voiceFactory = await compiler.createPolyDSPFactory(name, dspCodeAux, args);\n        }\n\n        if (this.voiceFactory) {\n            this.name = name;\n            const voiceMeta = JSON.parse(this.voiceFactory.json);\n            const isDouble = voiceMeta.compile_options.match(\"-double\");\n            const { mixerBuffer, mixerModule } = await compiler.getAsyncInternalMixerModule(!!isDouble);\n            this.mixerBuffer = mixerBuffer;\n            this.mixerModule = mixerModule;\n            return this;\n        } else {\n            return null;\n        }\n    }\n\n    addSoundfiles(soundfileMap: Record<string, AudioData>) {\n        if (!this.voiceFactory) throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n        for (const id in soundfileMap) {\n            this.voiceFactory.soundfiles[id] = soundfileMap[id];\n        }\n    }\n    getSoundfileList() {\n        if (!this.voiceFactory) throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n        const meta = JSON.parse(this.voiceFactory.json);\n        const map = SoundfileReader.findSoundfilesFromMeta(meta);\n        if (!this.effectFactory) return Object.keys(map);\n        const effectMeta = JSON.parse(this.effectFactory.json);\n        const effectMap = SoundfileReader.findSoundfilesFromMeta(effectMeta);\n        return Object.keys({ ...effectMap, ...map });\n    }\n\n    async createNode<SP extends boolean = false>(\n        context: BaseAudioContext,\n        voices: number,\n        name = this.name,\n        voiceFactory = this.voiceFactory as LooseFaustDspFactory,\n        mixerModule = this.mixerModule,\n        effectFactory = this.effectFactory as LooseFaustDspFactory | null,\n        sp = false as SP,\n        bufferSize = 1024,\n        processorName = ((voiceFactory?.shaKey || \"\") + (effectFactory?.shaKey || \"\")) || `${name}_poly`,\n        processorOptions = {}\n    ): Promise<SP extends true ? FaustPolyScriptProcessorNode | null : FaustPolyAudioWorkletNode | null> {\n        if (!voiceFactory) throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n\n        const voiceMeta = JSON.parse(voiceFactory.json);\n        const effectMeta = effectFactory ? JSON.parse(effectFactory.json) : undefined;\n        const sampleSize = voiceMeta.compile_options.match(\"-double\") ? 8 : 4;\n        voiceFactory.soundfiles = await SoundfileReader.loadSoundfiles(voiceMeta, voiceFactory.soundfiles || {}, context);\n        if (effectFactory) effectFactory.soundfiles = await SoundfileReader.loadSoundfiles(effectMeta, effectFactory.soundfiles || {}, context);\n        if (sp) {\n            const instance = await FaustWasmInstantiator.createAsyncPolyDSPInstance(voiceFactory, mixerModule, voices, effectFactory || undefined);\n            const soundfiles = { ...effectFactory?.soundfiles, ...voiceFactory.soundfiles };\n            const polyDsp = new FaustPolyWebAudioDsp(instance, context.sampleRate, sampleSize, bufferSize, soundfiles);\n\n            const sp = context.createScriptProcessor(bufferSize, polyDsp.getNumInputs(), polyDsp.getNumOutputs()) as FaustPolyScriptProcessorNode;\n            Object.setPrototypeOf(sp, FaustPolyScriptProcessorNode.prototype);\n            sp.init(polyDsp);\n            return sp as SP extends true ? FaustPolyScriptProcessorNode : FaustPolyAudioWorkletNode;\n        } else {\n            // Dynamically create AudioWorkletProcessor if code not yet created\n            if (!FaustPolyDspGenerator.gWorkletProcessors.has(context)) FaustPolyDspGenerator.gWorkletProcessors.set(context, new Set());\n            if (!FaustPolyDspGenerator.gWorkletProcessors.get(context)?.has(processorName)) {\n                try {\n                    const processorCode = `\n// DSP name and JSON string for DSP are generated\nconst faustData = ${JSON.stringify({\n                        processorName,\n                        dspName: name,\n                        dspMeta: voiceMeta,\n                        poly: true,\n                        effectMeta\n                    } as FaustData)};\n// Implementation needed classes of functions\nvar ${FaustDspInstance.name} = ${FaustDspInstance.toString()}\nvar FaustDspInstance = ${FaustDspInstance.name};\nvar ${FaustBaseWebAudioDsp.name} = ${FaustBaseWebAudioDsp.toString()}\nvar FaustBaseWebAudioDsp = ${FaustBaseWebAudioDsp.name};\nvar ${FaustPolyWebAudioDsp.name} = ${FaustPolyWebAudioDsp.toString()}\nvar FaustPolyWebAudioDsp = ${FaustPolyWebAudioDsp.name};\nvar ${FaustWebAudioDspVoice.name} = ${FaustWebAudioDspVoice.toString()}\nvar FaustWebAudioDspVoice = ${FaustWebAudioDspVoice.name};\nvar ${FaustWasmInstantiator.name} = ${FaustWasmInstantiator.toString()}\nvar FaustWasmInstantiator = ${FaustWasmInstantiator.name};\nvar ${Soundfile.name} = ${Soundfile.toString()}\nvar Soundfile = ${Soundfile.name};\nvar ${WasmAllocator.name} = ${WasmAllocator.toString()}\nvar WasmAllocator = ${WasmAllocator.name};\nvar ${FaustSensors.name} = ${FaustSensors.toString()}\nvar FaustSensors = ${FaustSensors.name};\nvar ${FaustAudioWorkletCommunicator.name} = ${FaustAudioWorkletCommunicator.toString()}\nvar FaustAudioWorkletCommunicator = ${FaustAudioWorkletCommunicator.name};\nvar ${FaustAudioWorkletProcessorCommunicator.name} = ${FaustAudioWorkletProcessorCommunicator.toString()}\nvar FaustAudioWorkletProcessorCommunicator = ${FaustAudioWorkletProcessorCommunicator.name};\n// Put them in dependencies\nconst dependencies = {\n    FaustBaseWebAudioDsp,\n    FaustPolyWebAudioDsp,\n    FaustWasmInstantiator,\n    FaustAudioWorkletProcessorCommunicator\n};\n// Generate the actual AudioWorkletProcessor code\n(${getFaustAudioWorkletProcessor.toString()})(dependencies, faustData);\n`;\n                    const url = URL.createObjectURL(new Blob([processorCode], { type: \"text/javascript\" }));\n                    await context.audioWorklet.addModule(url);\n                    // Keep the DSP name\n                    FaustPolyDspGenerator.gWorkletProcessors.get(context)?.add(processorName);\n                } catch (e) {\n                    // console.error(`=> exception raised while running createPolyNode: ${e}`);\n                    // console.error(`=> check that your page is served using https.${e}`);\n                    throw e;\n                }\n            }\n            // Create the AWN\n            const node = new FaustPolyAudioWorkletNode(context, { processorOptions: { name: processorName, voiceFactory, mixerModule, voices, sampleSize, effectFactory: effectFactory || undefined, ...processorOptions } });\n\n            return node as SP extends true ? FaustPolyScriptProcessorNode : FaustPolyAudioWorkletNode;\n        }\n    }\n\n    async createAudioWorkletProcessor(\n        name = this.name,\n        voiceFactory = this.voiceFactory as LooseFaustDspFactory,\n        effectFactory = this.effectFactory as LooseFaustDspFactory | null,\n        processorName = ((voiceFactory?.shaKey || \"\") + (effectFactory?.shaKey || \"\")) || `${name}_poly`\n    ) {\n        if (!voiceFactory) throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n\n        const voiceMeta = JSON.parse(voiceFactory.json);\n        const effectMeta = effectFactory ? JSON.parse(effectFactory.json) : undefined;\n        const sampleSize = voiceMeta.compile_options.match(\"-double\") ? 8 : 4;\n        // Dynamically create AudioWorkletProcessor if code not yet created\n        try {\n            const dependencies = {\n                FaustBaseWebAudioDsp,\n                FaustMonoWebAudioDsp: undefined,\n                FaustWasmInstantiator,\n                FaustPolyWebAudioDsp,\n                FaustWebAudioDspVoice,\n                FaustAudioWorkletProcessorCommunicator\n            };\n            // DSP name and JSON string for DSP are generated\n            const faustData = {\n                processorName,\n                dspName: name,\n                dspMeta: voiceMeta,\n                poly: true,\n                effectMeta\n            } as FaustData;\n            // Generate the actual AudioWorkletProcessor code\n            const Processor = getFaustAudioWorkletProcessor<true>(dependencies, faustData);\n            return Processor;\n        } catch (e) {\n            // console.error(`=> exception raised while running createPolyNode: ${e}`);\n            // console.error(`=> check that your page is served using https.${e}`);\n            throw e;\n        }\n    }\n\n    async createOfflineProcessor(\n        sampleRate: number,\n        bufferSize: number,\n        voices: number,\n        voiceFactory = this.voiceFactory as LooseFaustDspFactory,\n        mixerModule = this.mixerModule,\n        effectFactory = this.effectFactory as LooseFaustDspFactory | null,\n        context?: BaseAudioContext\n    ) {\n        if (!voiceFactory) throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n\n        const voiceMeta = JSON.parse(voiceFactory.json);\n        const effectMeta = effectFactory ? JSON.parse(effectFactory.json) : undefined;\n        const instance = await FaustWasmInstantiator.createAsyncPolyDSPInstance(voiceFactory, mixerModule, voices, effectFactory || undefined);\n        const sampleSize = voiceMeta.compile_options.match(\"-double\") ? 8 : 4;\n        if (context) {\n            voiceFactory.soundfiles = await SoundfileReader.loadSoundfiles(voiceMeta, voiceFactory.soundfiles || {}, context);\n            if (effectFactory) effectFactory.soundfiles = await SoundfileReader.loadSoundfiles(effectMeta, effectFactory.soundfiles || {}, context);\n        }\n        const soundfiles = { ...effectFactory?.soundfiles, ...voiceFactory.soundfiles };\n        const polyDsp = new FaustPolyWebAudioDsp(instance, sampleRate, sampleSize, bufferSize, soundfiles);\n        return new FaustPolyOfflineProcessor(polyDsp, bufferSize);\n    }\n\n    getMeta() {\n        const o = (this.voiceFactory) ? JSON.parse(this.voiceFactory.json) : null;\n        const e = (this.effectFactory) ? JSON.parse(this.effectFactory.json) : null;\n        const r = { ...o };\n        if (e) {\n            r.ui = [{\n                type: \"tgroup\", label: \"Sequencer\", items: [\n                    { type: \"vgroup\", label: \"Instrument\", items: o.ui },\n                    { type: \"vgroup\", label: \"Effect\", items: e.ui }\n                ]\n            }];\n        } else {\n            r.ui = [{\n                type: \"tgroup\", label: \"Polyphonic\", items: [\n                    { type: \"vgroup\", label: \"Voices\", items: o.ui }\n                ]\n            }];\n        }\n        return r as FaustDspMeta;\n    }\n\n    getJSON() {\n        return JSON.stringify(this.getMeta());\n    }\n\n    getUI() {\n        return this.getMeta().ui;\n    }\n}\n"],
  "mappings": "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",
  "names": ["FaustBaseWebAudioDsp", "FaustWasmInstantiator", "FaustAudioWorkletProcessorCommunicator", "FaustMonoWebAudioDsp", "FaustPolyWebAudioDsp", "FaustBaseWebAudioDsp", "FaustWasmInstantiator", "FaustMonoWebAudioDsp", "FaustAudioWorkletProcessorCommunicator", "RawSha256", "fromUtf8", "Sha256", "sha256", "item", "ctrl", "files", "sp"]
}
